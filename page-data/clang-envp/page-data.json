{"componentChunkName":"component---src-templates-post-template-js","path":"/clang-envp","result":{"data":{"markdownRemark":{"id":"1b21a11b-9fba-5f58-a366-e74a0d4bdb49","html":"<h2 id=\"c-言語のmain関数の-3-つ目の引数-envp-について\" style=\"position:relative;\"><a href=\"#c-%E8%A8%80%E8%AA%9E%E3%81%AEmain%E9%96%A2%E6%95%B0%E3%81%AE-3-%E3%81%A4%E7%9B%AE%E3%81%AE%E5%BC%95%E6%95%B0-envp-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"c 言語のmain関数の 3 つ目の引数 envp について permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C 言語のmain関数の 3 つ目の引数 *envp[] について</h2>\n<p>今回は、C 言語でmain関数を定義する際に使用できる3つ目の引数についてまとめます。</p>\n<p>先日、某CTFのデコンパイル結果を眺めていたところ、<code class=\"language-text\">int main(int argc, char *argv[], char *envp[])</code>のように、引数を3つ取るmain関数に出会いました。</p>\n<p>この3つ目の環境変数<code class=\"language-text\">*envp[]</code>は、C標準にて以下のように定義されており、実行環境の環境変数に対してのポインタが格納されるものであるようです。</p>\n<blockquote>\n<p>ホスト環境において、main 関数は第3引数 <code class=\"language-text\">char *envp[]</code> を取る。</p>\n<p>この引数は <code class=\"language-text\">char</code> へのポインタの null 終端配列を指す。<code class=\"language-text\">char</code> への各ポインタは、このプログラム実行環境に関する情報を提供する文字列を指す。</p>\n</blockquote>\n<p>よく目にするC言語のmain関数は、以下のように2つの引数を取ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>argv<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これらはそれぞれ、次のような引数です。</p>\n<ul>\n<li>argc : 引数の個数</li>\n<li>*argv[] : 実行時の引数のポインタ</li>\n</ul>\n<p>実際に、このソースコードを<code class=\"language-text\">test.o</code>という実行ファイルにコンパイルして実行すると、次のような結果が出力されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./test.o arg1 arg2 arg2\n<span class=\"token number\">4</span>\n./test.o\narg1\narg2\narg2</code></pre></div>\n<p>一方で、3つめの引数<code class=\"language-text\">*envp[]</code>を取る以下のようなmain関数を見てみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>envp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>envp<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>このコードを実行すると、すべての環境変数が一行ずつ出力されました。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./test.o \n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELL</span></span><span class=\"token operator\">=</span>/bin/bash\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SESSION_MANAGER</span></span><span class=\"token operator\">=</span>local/parrot:@/tmp/.ICE-unix/1393,unix/parrot:/tmp/.ICE-unix/1393\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> 中略 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/home/parrot/.local/bin:/snap/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">DBUS_SESSION_BUS_ADDRESS</span></span><span class=\"token operator\">=</span>unix:path<span class=\"token operator\">=</span>/run/user/1000/bus\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">UID</span></span><span class=\"token operator\">=</span><span class=\"token number\">1000</span>\n<span class=\"token assign-left variable\">QT_SCALE_FACTOR</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">_</span><span class=\"token operator\">=</span>./test.o\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">OLDPWD</span></span><span class=\"token operator\">=</span>/home/parrot</code></pre></div>\n<p>これは、<code class=\"language-text\">env</code>コマンドを実行した場合と同等の出力になります。</p>\n<p>ちなみに、<code class=\"language-text\">env -i</code>で環境変数をすべて無視した状態で、実行時に<code class=\"language-text\">Test=Test</code>という環境変数を明示的に与えて実行すると、<code class=\"language-text\">Test=Test</code>のみが出力されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">env</span> -i <span class=\"token assign-left variable\">Test</span><span class=\"token operator\">=</span>Test ./test.o \n<span class=\"token assign-left variable\">Test</span><span class=\"token operator\">=</span>Test</code></pre></div>\n<p>このことから、3つめの引数<code class=\"language-text\">*envp[]</code>は、あくまでそのプログラムが実行される環境の環境変数を取得する引数であることがわかります。</p>\n<h2 id=\"セキュアコーディングにおける-envp\" style=\"position:relative;\"><a href=\"#%E3%82%BB%E3%82%AD%E3%83%A5%E3%82%A2%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B-envp\" aria-label=\"セキュアコーディングにおける envp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>セキュアコーディングにおける *envp[]</h2>\n<p>さて、3つめの引数<code class=\"language-text\">*envp[]</code>について調べていたところ、1つ面白い記事を見つけました。</p>\n<blockquote>\n<p>何らかの方法で環境に変更を加えると、環境のメモリ領域が再割り当てされることになり、結果として <code class=\"language-text\">envp</code> が間違った場所を参照することになる場合がある。</p>\n<p>参考：<a href=\"https://www.jpcert.or.jp/sc-rules/c-env31-c.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ENV31-C. 環境変数へのポインタを無効にするかもしれない操作の後で、そのポインタを参照しない</a></p>\n</blockquote>\n<p>上記のJPCERT/CCの記事のとおり、プログラムの実行後に何らかの方法で環境変数を改ざんした場合、<code class=\"language-text\">*envp[]</code>が環境変数の参照のために使用するメモリ領域が再割り当てされます。</p>\n<p>つまり、何らかの方法で環境を変更した後に、3つめの引数<code class=\"language-text\">*envp[]</code>のポインタを使用すると、問題を引き起こす可能性があります。</p>\n<p>上記より、プログラム内部で環境変数を利用する場合は、Linux環境では<code class=\"language-text\">extern char **environ;</code>、Windows環境なら<code class=\"language-text\">_CRTIMP extern char **_environ;</code>が定義されているのであれば、そちらを利用することが推奨されるようです。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>この仕様は初めて知ったので、C言語の入門書としては個人的に一番推してる<a href=\"https://amzn.to/3wlYyLJ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">猫でもわかるC言語プログラミング</a>を 読み返してみたのですが、main関数の引数については、<code class=\"language-text\">argc</code>と<code class=\"language-text\">*argv[]</code>についてしか書かれておらず、3つめの引数<code class=\"language-text\">*envp[]</code>については一切触れられていませんでした。</p>\n<p>入門書レベルでは扱われないような少しマニアックな仕様なんですかね。</p>\n<h3 id=\"追記2021年-7月-7日\" style=\"position:relative;\"><a href=\"#%E8%BF%BD%E8%A8%982021%E5%B9%B4-7%E6%9C%88-7%E6%97%A5\" aria-label=\"追記2021年 7月 7日 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>追記（2021年 7月 7日）</h3>\n<p>3つ目の環境変数<code class=\"language-text\">*envp[]</code>が定義されている<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">J.5 Common extensions</a>は、厳密にはC言語の仕様ではなく拡張機能として定められており、すべての実装に移植できるものではないようです。  </p>\n<p>理解があいまいな部分がありますが、「C言語の仕様」という理解は間違っていたようです。</p>","fields":{"slug":"/clang-envp","tagSlugs":["/tag/c/"]},"frontmatter":{"date":"2021-10-01","description":"C言語でmain関数を定義する際に使用できる3つ目の引数についてまとめます。","tags":["C"],"title":"main関数の3つ目の引数*envp[]で環境変数を取得する","socialImage":{"publicURL":"/static/dc4d8b7f8795f3c3d3489d9957d155f2/no-image.png"}}}},"pageContext":{"slug":"/clang-envp"}},"staticQueryHashes":["251939775","401334301","825871152"]}