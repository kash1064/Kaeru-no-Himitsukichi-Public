{"componentChunkName":"component---src-templates-post-template-js","path":"/ctf-angstromctf-2021","result":{"data":{"markdownRemark":{"id":"ee6c729e-4cd6-5951-93a3-afa38ed198f5","html":"<p>ångstromctf2021に参加しました。\n今回もReversing全完を目指して参加したものの、残念ながら11問中3問しか解けず…。</p>\n<p>今回は何とか解けた問題の中から特に学びになった点の多い<code class=\"language-text\">Infinity Gauntlet</code>についてWriteUpを書きます。</p>\n<h2 id=\"本記事について\" style=\"position:relative;\"><a href=\"#%E6%9C%AC%E8%A8%98%E4%BA%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"本記事について permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本記事について</h2>\n<p><strong>本記事の内容は社会秩序に反する行為を推奨することを目的としたものではございません。</strong></p>\n<p>自身の所有する環境、もしくは許可された環境以外への攻撃の試行は、「不正アクセス行為の禁止等に関する法律（不正アクセス禁止法）」に違反する可能性があること、予めご留意ください。</p>\n<p>またすべての発言は所属団体ではなく個人に帰属します。</p>\n<h3 id=\"ctf解説シリーズについて\" style=\"position:relative;\"><a href=\"#ctf%E8%A7%A3%E8%AA%AC%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"ctf解説シリーズについて permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CTF解説シリーズについて</h3>\n<p>自分の勉強も兼ねて、CTFの問題を初心者でも解るように丁寧に解説していきます。</p>\n<p>というのも、CTFは正直、初めての人がいきなりチャレンジするには結構難しいジャンルだと思ってます。\n僕自身、初めて参加したコンテストでは一問も解けなかった上、ベテランCTFerの方のWriteUpを読んでもなお、何も理解できない状態でした。</p>\n<p>そこでこのシリーズでは自分の勉強も兼ねて、Flag取得までのステップが分かりやすいように可能な限り丁寧に解説することを目指しています。</p>\n<p>一方で僕自身まだCTF歴は浅い身なので、もし誤った記載などあれば、ぜひご指摘いただけるとありがたいです。</p>\n<h2 id=\"問題概要\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C%E6%A6%82%E8%A6%81\" aria-label=\"問題概要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題概要</h2>\n<blockquote>\n<p>All clam needs to do is snap and finite will turn into infinit…</p>\n<p><a href=\"https://2021.%C3%A5ngstromctf.com/challenges\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://2021.ångstromctf.com/challenges</a></p>\n</blockquote>\n<p>問題文の意味はよくわかりませんが、ダウンロードした実行ファイルを起動すると、下記のような問題文が表示され、入力を要求されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$./infinity_gauntlet \n\nWelcome to the infinity gauntlet<span class=\"token operator\">!</span>\nIf you complete the gauntlet, you'll get the flag<span class=\"token operator\">!</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> ROUND <span class=\"token number\">1</span> <span class=\"token operator\">==</span><span class=\"token operator\">=</span>\nbar<span class=\"token punctuation\">(</span>?, <span class=\"token number\">108</span>, <span class=\"token number\">377</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">102484</span>\n<span class=\"token number\">100</span>\nWrong<span class=\"token operator\">!</span></code></pre></div>\n<p>出題される問題は次の7パターンがあります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// foo関数\nfoo<span class=\"token punctuation\">(</span>?, %u<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> %u\nfoo<span class=\"token punctuation\">(</span>%u, ?<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> %u\nfoo<span class=\"token punctuation\">(</span>%u, %u<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ?\n\n// bar関数\nbar<span class=\"token punctuation\">(</span>?, %u, %u<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> %u\nbar<span class=\"token punctuation\">(</span>%u, ?, %u<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> %u\nbar<span class=\"token punctuation\">(</span>%u, %u, ?<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> %u\nbar<span class=\"token punctuation\">(</span>%u, %u, %u<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ?</code></pre></div>\n<p>この問題に正解するとROUNDの値が更新されて、次の問題が出題されます。</p>\n<h2 id=\"今回学んだこと\" style=\"position:relative;\"><a href=\"#%E4%BB%8A%E5%9B%9E%E5%AD%A6%E3%82%93%E3%81%A0%E3%81%93%E3%81%A8\" aria-label=\"今回学んだこと permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>今回学んだこと</h2>\n<ol>\n<li>Pythonを使って対話的なプログラムの実行を自動化する</li>\n<li>アセンブリがちょっと読めるようになる</li>\n</ol>\n<h2 id=\"解法\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B3%95\" aria-label=\"解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解法</h2>\n<p>先に問題全体の解法を記載しておきます。\n特に3番のFLAGの取得に関しては今回苦戦しました。</p>\n<ol>\n<li>与えられた実行ファイルを静的解析して、FLAGの文字列の格納先と格納方法を理解する</li>\n<li>GDBを使って、foo関数とbar関数の詳細を理解する</li>\n<li>与えられた実行ファイルを静的解析して、FLAGの取得方法を理解する</li>\n<li>問題の解答とFLAGの取得を自動化するSolverを書く</li>\n</ol>\n<h2 id=\"1flagの文字列の格納先と格納方法を理解する\" style=\"position:relative;\"><a href=\"#1flag%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E6%A0%BC%E7%B4%8D%E5%85%88%E3%81%A8%E6%A0%BC%E7%B4%8D%E6%96%B9%E6%B3%95%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B\" aria-label=\"1flagの文字列の格納先と格納方法を理解する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1．FLAGの文字列の格納先と格納方法を理解する</h2>\n<p>まず、与えられた実行ファイルをローカルで動かそうとすると、次のようなエラーが返ってきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$./infinity_gauntlet \nCouldn't <span class=\"token function\">find</span> a flag file.</code></pre></div>\n<p>Ghidraでデコンパイルしてみると、どうやら実行時に同一ディレクトリ内のflag.txtを読み込んでいることが分かります。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">local_40 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>in_FS_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">0x28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n__stream <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// flag.txtの読み込みに失敗した場合</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__stream <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn\\'t find a flag file.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  uVar6 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>flag.txtの読み込みに成功すると、次のような処理を実行するようです。\n※変数名は適当に修正してます。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">__s <span class=\"token operator\">=</span> FLAG<span class=\"token punctuation\">;</span>\n<span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>__s<span class=\"token punctuation\">,</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsVar4 <span class=\"token operator\">=</span> <span class=\"token function\">strcspn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>__s<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\niVar1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>sVar4<span class=\"token punctuation\">;</span>\nFLAG<span class=\"token punctuation\">[</span>iVar1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iVar1 <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  bVar7 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span>__s <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>__s <span class=\"token operator\">^</span> bVar7<span class=\"token punctuation\">;</span>\n    bVar7 <span class=\"token operator\">=</span> bVar7 <span class=\"token operator\">+</span> <span class=\"token number\">0x11</span><span class=\"token punctuation\">;</span>\n    __s <span class=\"token operator\">=</span> __s <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bVar7 <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>sVar4 <span class=\"token operator\">*</span> <span class=\"token char\">'\\x11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n・・・\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>デコンパイルされたコードを読めばわかる通り、以下のような処理を実行しているようです。</p>\n<ol>\n<li>flag.txtから取得した文字列を一文字ずつ取得</li>\n<li>flagの一文字 XOR (0x11 * (文字の添え字 - 1))を計算</li>\n<li>暗号化されたflagの格納先に保存</li>\n</ol>\n<p>この格納先のアドレスは、後々再登場するので覚えておくとよいです。\nGhidraでラベル名を付けておくとわかりやすいと思います。</p>\n<h2 id=\"2foo関数とbar関数の詳細を理解する\" style=\"position:relative;\"><a href=\"#2foo%E9%96%A2%E6%95%B0%E3%81%A8bar%E9%96%A2%E6%95%B0%E3%81%AE%E8%A9%B3%E7%B4%B0%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B\" aria-label=\"2foo関数とbar関数の詳細を理解する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2．foo関数とbar関数の詳細を理解する</h2>\n<p>次に出される問題を解くために、問題の性質を把握していきます。\n便宜上関数と呼んでますが、処理自体はmain関数の内部に書かれてました。</p>\n<p>どちらも、アセンブリソースから追っていくと大変なので、GDBを使って解析していきます。</p>\n<p>まず、ディスアセンブルした結果から、以下の処理が入力値の受け取りと正解不正解の判定を行っていることがわかります。\nそのため、このアドレスにbreakpointを仕掛けてGDBで解析していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">0010125a e8 71 fe        CALL       __isoc99_scanf                                   undefined __isoc99_scanf()\n          ff ff\n0010125f 39 5c 24 0c     CMP        dword ptr [RSP + local_14c],EBX\n00101263 0f 85 c7        JNZ        LAB_00101430\n          01 00 00\n00101269 83 c5 01        ADD        ebp,0x1\n0010126c 48 8d 3d        LEA        RDI,[s_Correct!_Maybe_round_%d_will_get_001021   = &quot;Correct! Maybe round %d will \n          bd 0e 00 00\n00101273 31 c0           XOR        EAX,EAX\n00101275 89 ee           MOV        ESI,ebp\n00101277 e8 e4 fd        CALL       printf                                           int printf(char * __format, ...)</code></pre></div>\n<p>各問題の正解不正解を判断する部分をゼロフラグの書き換えで突破しながら何度か動かしてみると、上のアセンブルソースと合わせて次のことがわかります。</p>\n<ol>\n<li>0x0010125f で、入力された値とEBXレジスタの値を比較して、正解か不正解かを判定している。</li>\n<li>正解した場合は、EBPレジスタの値に1が加算される。</li>\n</ol>\n<p>ここで、GDBを使って問題の正誤判定時のEBXレジスタの値を読むことで、問題の正解を知ることができ、各関数のルールを見つける手がかりとすることができます。\n(残念ながら各計算式を逆算していく流れはボリュームが大きくなるので割愛します。)</p>\n<p>なんやかんやすると、foo関数とbar関数がどのようなロジックで問題文の各要素の値を決定しているか知ることができました。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">foo(A, B) = C\nC = A ^ (B + 1) ^ 0x539</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bar(A, B, C) = D\nD = B * (C + 1) + A</code></pre></div>\n<p>プログラムから与えられる問題は、すべてfooかbarのどちらかの式の虫食い問題なので、この式を使用することで、すべての問題に正解することができます。</p>\n<p>自動化スクリプトを作成して問題を解いてみました。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">==</span><span class=\"token operator\">=</span> ROUND <span class=\"token number\">44</span> <span class=\"token operator\">==</span><span class=\"token operator\">=</span>\nbar<span class=\"token punctuation\">(</span><span class=\"token number\">1160</span>, ?, <span class=\"token number\">58</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">124529</span>\n<span class=\"token number\">2091</span>\nCorrect<span class=\"token operator\">!</span> Maybe round <span class=\"token number\">45</span> will get you the flag <span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> ROUND <span class=\"token number\">45</span> <span class=\"token operator\">==</span><span class=\"token operator\">=</span>\nfoo<span class=\"token punctuation\">(</span>?, <span class=\"token number\">355</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">38988</span>\n<span class=\"token number\">39953</span>\nCorrect<span class=\"token operator\">!</span> Maybe round <span class=\"token number\">46</span> will get you the flag <span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> ROUND <span class=\"token number\">46</span> <span class=\"token operator\">==</span><span class=\"token operator\">=</span>\nfoo<span class=\"token punctuation\">(</span><span class=\"token number\">39</span>, ?<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">41440</span>\n<span class=\"token number\">42237</span>\nCorrect<span class=\"token operator\">!</span> Maybe round <span class=\"token number\">47</span> will get you the flag <span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>しかし、10000問以上の問題に正解しても、FLAGが取得できませんでしたので、さらにプログラムの解析を進めて、FLAGがどのように取得できるのかを考える必要がありました。</p>\n<h2 id=\"3flagの取得方法を理解する\" style=\"position:relative;\"><a href=\"#3flag%E3%81%AE%E5%8F%96%E5%BE%97%E6%96%B9%E6%B3%95%E3%82%92%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8B\" aria-label=\"3flagの取得方法を理解する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3．FLAGの取得方法を理解する</h2>\n<p>さて、どうしたらFLAGが取得できるかというのを考えていきます。</p>\n<p>問題に正解するとebpレジスタがインクリメントされることを先ほど確認したので、これが関係しているとあたりを付けてコードを追っていきました。</p>\n<p>すると、ebpレジスタの値と0x31を比較して、大きい時に0x1504にジャンプすることがわかりました。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">0x00001291      83fd31         cmp ebp, 0x31\n0x00001294      0f8f6a020000   jg 0x1504</code></pre></div>\n<p>そこで、0x1504以降の処理を見てみます。\nどうやら、本来はランダムに生成されるはずの問題の解答(EBXレジスタの値)が、50問以上正解するとランダムではなく、以下の処理によって作成されるようになるようです！</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">0x00001504      99             cdq\n0x00001505      41f7fe         idiv r14d\n0x00001508      8d1c2a         lea ebx, [rdx + rbp]\n0x0000150b      4863d2         movsxd rdx, edx\n0x0000150e      0fb6441410     movzx eax, byte [rsp + rdx + 0x10]\n0x00001513      0fb6db         movzx ebx, bl\n0x00001516      c1e308         shl ebx, 8\n0x00001519      09c3           or ebx, eax\n0x0000151b      e98bfdffff     jmp 0x12ab ;次の問題の準備開始地点</code></pre></div>\n<p>このままだと読みづらいので、Ghidraのデコンパイル結果を見てみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">EBX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FlagLength <span class=\"token operator\">%</span> iVar1 <span class=\"token operator\">+</span> 現在の正解数 <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span> <span class=\"token operator\">|</span> \\\n\t<span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>FLAGARR<span class=\"token punctuation\">[</span>FlagLength <span class=\"token operator\">%</span> iVar1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>どうやら、初めに暗号化したflagの文字列を利用してEBXに値を格納しているようです。\n具体的には、<code class=\"language-text\">「現在までの正解数 + flag文字の位置」下位8ビットを取り出し、左に8bitシフトしたもの</code>と<code class=\"language-text\">「暗号化されたフラグをint変換したもの」</code>のORを取ったものがEBXに格納されています。</p>\n<p>つまり、EBXが<code class=\"language-text\">0x9c3f</code>で、現在までの正解数が152回である時は、以下のようにしてFlagの文字を求めることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">EBX   0x9c3f\n正解数 0x98(152) のとき\n\n1. 0x9c - 0x98 = 4 から、下位バイトは4番目の文字\n2. 下位の1バイトは3fなので、Flagの4番目の暗号化された文字は 0x3f とわかる\n3. 暗号化は Flagの文字 XOR (0x11 * Flagの添え字)なので4番目の場合は \n   0x3f XOR 0x33 となる\n4. 4番目のFlagの文字は { であるとわかる</code></pre></div>\n<p>ここまでわかればあとは簡単で、<code class=\"language-text\">現在までの正解数</code>を保持しつつ自動的に問題を解くスクリプトを作成し、正解数が50問を超えたタイミングから上記のデコード処理を実施していくだけで、Flagの文字列が取得できます。</p>\n<p>・・・、嘘でした！！\nこのままだと、16番目以降の文字が文字化けしてしまいます。</p>\n<p>これ、最初なんでこんな事態になるのか全く分からなくて結構ハマりました。</p>\n<p>しばらく悩んだ結果、Flagの文字を0x11の倍数でXOR暗号化するこの部分で、実際に暗号化に使っているのがclレジスタであることに気づきました。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">0x00001190      300a           xor byte [rdx], cl\n0x00001192      83c111         add ecx, 0x11</code></pre></div>\n<p>clレジスタはecxレジスタの下位8bitのレジスタなので、ここでXOR演算に使用しているのも1Byteの値ということが分かります。</p>\n<p>0x11の倍数について計算したところ、ちょうど15倍目が0xFFであり、16倍以降は8bitに収まらない桁数になります。\n最初にSolverを回した段階でFlagの文字数が26文字なのはわかっていたので、16文字目から26文字目までの文字化けが発生しないように、256でXORを取ってあげるようにSolverを修正することでFlagが取得できました。</p>\n<h2 id=\"4-問題の解答とflagの取得を自動化するsolverを書く\" style=\"position:relative;\"><a href=\"#4-%E5%95%8F%E9%A1%8C%E3%81%AE%E8%A7%A3%E7%AD%94%E3%81%A8flag%E3%81%AE%E5%8F%96%E5%BE%97%E3%82%92%E8%87%AA%E5%8B%95%E5%8C%96%E3%81%99%E3%82%8Bsolver%E3%82%92%E6%9B%B8%E3%81%8F\" aria-label=\"4 問題の解答とflagの取得を自動化するsolverを書く permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4． 問題の解答とFLAGの取得を自動化するSolverを書く</h2>\n<p>ここからは完全にWriteUpとしては蛇足ですが、PythonスクリプトでELFの対話的な実行を自動化するのは今回が初めてだったので追記しておきます。</p>\n<p>Pythonでプログラムの対話的な実行を実現するには、<a href=\"https://pexpect.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pyexpect</a>を使います。</p>\n<p>使い方は非常に簡単で、CLIコマンドを指定して実行するプロセスを呼び出し、特定の文字列が出力されるタイミングで、任意の入力を与えることができます。</p>\n<p>以下に今回利用したTipsについてまとめます。</p>\n<h3 id=\"プログラムを起動する\" style=\"position:relative;\"><a href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\" aria-label=\"プログラムを起動する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プログラムを起動する</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">child <span class=\"token operator\">=</span> pexpect<span class=\"token punctuation\">.</span>spawn <span class=\"token punctuation\">(</span><span class=\"token string\">'起動するコマンド'</span><span class=\"token punctuation\">,</span> logfile<span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span>\n・・・\nchild<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">起動するコマンド</code>の欄に、<code class=\"language-text\">nc shell.actf.co 21700</code>や<code class=\"language-text\">./実行ファイル名</code>を入力することで、対話的なコマンド処理を自動化するためのプロセスを立ち上げます。</p>\n<p>このとき、<code class=\"language-text\">logfile=sys.stdout.buffer</code>で出力を吐き出す先を標準出力にしておくことで、普通にコンソールからプログラムを実行したときと近い使用感で処理を自動化できます。</p>\n<h3 id=\"任意のタイミングで入力を与える\" style=\"position:relative;\"><a href=\"#%E4%BB%BB%E6%84%8F%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A7%E5%85%A5%E5%8A%9B%E3%82%92%E4%B8%8E%E3%81%88%E3%82%8B\" aria-label=\"任意のタイミングで入力を与える permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>任意のタイミングで入力を与える</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">child<span class=\"token punctuation\">.</span>expect<span class=\"token punctuation\">(</span><span class=\"token string\">r'待ち受ける文字（正規表現）'</span><span class=\"token punctuation\">)</span>\nchild<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">'送信する文字'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">expect()</code>に与えた正規表現にマッチする文字列が現れるまで、プログラムを待機します。</p>\n<p><code class=\"language-text\">sendline</code>は、プロセスに文字列を改行付きで送信します。</p>\n<p><code class=\"language-text\">expect()</code>は、マッチする文字列が現れると以下の</p>\n<ol>\n<li>before: 正規表現にマッチした文字列より前に標準出力されていた文字列</li>\n<li>after: 正規表現にマッチした文字列</li>\n<li>buffer: 正規表現マッチ時、マッチした文字列より後に標準出力されていた文字列</li>\n</ol>\n<p>今回作成したSolverでは、<code class=\"language-text\">\\n</code>ですべての行にマッチさせた上で、直前に表示されていた文字列（問題文）にfooかbarが含まれるかで条件分岐し、処理を設定しています。</p>\n<h2 id=\"作成したsolver\" style=\"position:relative;\"><a href=\"#%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9Fsolver\" aria-label=\"作成したsolver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>作成したSolver</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> io\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> pexpect\n\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-1\"</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nx11 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">17</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">revflag</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> rounds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> rounds\n    pos <span class=\"token operator\">=</span> pos\n    flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00ff</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> pos <span class=\"token operator\">></span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span>\n        flag <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">^</span> x11<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        flag <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">^</span> x11<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ans {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pos {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    arr<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag\n    <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getfoo</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># foo(?, 13) = 11231</span>\n    reA <span class=\"token operator\">=</span> <span class=\"token string\">r\"^foo\\(([0-9]{1,9}|\\?),\"</span>\n    reB <span class=\"token operator\">=</span> <span class=\"token string\">r\",\\s([0-9]{1,9}|\\?)\\)\"</span>\n    reC <span class=\"token operator\">=</span> <span class=\"token string\">r\"=\\s([0-9]{1,9}|\\?)\"</span>\n\n    A <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>reA<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    B <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>reB<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    C <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>reC<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getbar</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># bar(?, 305, 449) = 138744</span>\n    reA <span class=\"token operator\">=</span> <span class=\"token string\">r\"^bar\\(([0-9]{1,9}|\\?),\"</span>\n    reB <span class=\"token operator\">=</span> <span class=\"token string\">r\",\\s([0-9]{1,9}|\\?),\"</span>\n    reC <span class=\"token operator\">=</span> <span class=\"token string\">r\",\\s([0-9]{1,9}|\\?)\\)\"</span>\n    reD <span class=\"token operator\">=</span> <span class=\"token string\">r\"=\\s([0-9]{1,9}|\\?)\"</span>\n\n    A <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>reA<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    B <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>reB<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    C <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>reC<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    D <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>reD<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> D\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span>    \n    <span class=\"token keyword\">if</span> A <span class=\"token operator\">==</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">:</span>\n        cd <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">1337</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> cd\n         \n    <span class=\"token keyword\">if</span> B <span class=\"token operator\">==</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">:</span>\n        cd <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">1337</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> cd<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">if</span> C <span class=\"token operator\">==</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">:</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">1337</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span>  \n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> A <span class=\"token operator\">==</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">:</span>\n        bd <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> bd\n         \n    <span class=\"token keyword\">if</span> B <span class=\"token operator\">==</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">:</span>\n        dd <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dd <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         \n    <span class=\"token keyword\">if</span> C <span class=\"token operator\">==</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">:</span>\n        dd <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dd <span class=\"token operator\">//</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n         \n    <span class=\"token keyword\">if</span> D <span class=\"token operator\">==</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">:</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span>\n\n\nchild <span class=\"token operator\">=</span> pexpect<span class=\"token punctuation\">.</span>spawn <span class=\"token punctuation\">(</span><span class=\"token string\">'nc shell.actf.co 21700'</span><span class=\"token punctuation\">,</span> logfile<span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span>\n\ncounter <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        child<span class=\"token punctuation\">.</span>expect<span class=\"token punctuation\">(</span><span class=\"token string\">r'\\n'</span><span class=\"token punctuation\">)</span>\n        S <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>before<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># print(S[2:-3])</span>\n\n        <span class=\"token keyword\">if</span> counter <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">:</span>            \n            <span class=\"token keyword\">if</span> <span class=\"token string\">\"bar\"</span> <span class=\"token keyword\">in</span> S<span class=\"token punctuation\">:</span>\n                counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> D <span class=\"token operator\">=</span> getbar<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># print(A, B, C, D)</span>\n\n                ans <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> D<span class=\"token punctuation\">)</span>\n                child<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                \n            <span class=\"token keyword\">if</span> <span class=\"token string\">\"foo\"</span> <span class=\"token keyword\">in</span> S<span class=\"token punctuation\">:</span>\n                counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C <span class=\"token operator\">=</span> getfoo<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n                ans <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span>\n                child<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">\"bar\"</span> <span class=\"token keyword\">in</span> S<span class=\"token punctuation\">:</span>\n                A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> D <span class=\"token operator\">=</span> getbar<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># print(A, B, C, D)</span>\n\n                ans <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> D<span class=\"token punctuation\">)</span>\n                revflag<span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count : {} Ans : {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                child<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                \n            <span class=\"token keyword\">if</span> <span class=\"token string\">\"foo\"</span> <span class=\"token keyword\">in</span> S<span class=\"token punctuation\">:</span>\n                A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C <span class=\"token operator\">=</span> getfoo<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n                ans <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span>\n                revflag<span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count : {} Ans : {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                child<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">if</span> counter <span class=\"token operator\">></span> <span class=\"token number\">254</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n\nchild<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>というわけで、ångstromCTF 2021のReversing問題から、Infinite Gauntletに挑戦したWriteUpを書きました。</p>\n<p>解き切るまでに結構時間がかかりました（5時間くらい）が、この問題にじっくり取り組んだことで、アセンブリやレジスタなどの知識と理解がかなり深まったように感じます。</p>\n<p>今後もいろんなReversing問題にチャレンジしていこうと思います。</p>\n<h3 id=\"参考問題を解く際に使った書籍\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E5%95%8F%E9%A1%8C%E3%82%92%E8%A7%A3%E3%81%8F%E9%9A%9B%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%9F%E6%9B%B8%E7%B1%8D\" aria-label=\"参考問題を解く際に使った書籍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考＆問題を解く際に使った書籍</h3>\n<h3 id=\"books\" style=\"position:relative;\"><a href=\"#books\" aria-label=\"books permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Books</h3>\n<ul>\n<li>\n<p><a href=\"https://amzn.to/3mceJHH\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">大熱血！ アセンブラ入門</a></p>\n<ul>\n<li>アセンブリ読むときはとりあえずこの本を適宜参照してます。</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://amzn.to/2PsWQbI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解析魔法少女 美咲ちゃん マジカル・オープン!</a></p>\n<ul>\n<li>PEモジュール向けですが、プログラムの流れを追うのにいつも参考にしてます。</li>\n<li>2004年の本なので内容が少し古いことに注意。</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://amzn.to/3t4Lolh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">リバースエンジニアリングツールGhidra実践ガイド ~セキュリティコンテスト入門からマルウェア解析まで~</a></p>\n<ul>\n<li>Ghidraについて日本語で書かれた書籍としてはほぼ唯一の書籍。</li>\n<li>CTFつよつよのメンバーが書いていて、内容も非常にわかりやすい(わかるとは言ってない)。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"web\" style=\"position:relative;\"><a href=\"#web\" aria-label=\"web permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web</h3>\n<ul>\n<li><a href=\"https://takuzoo3868.hatenablog.com/entry/radare2_love\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">radare2 覚書 - /var/log/Sawada.log</a></li>\n<li><a href=\"https://pexpect.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pexpect version 4.8 — Pexpect 4.8 documentation</a></li>\n</ul>","fields":{"slug":"/ctf-angstromctf-2021","tagSlugs":["/tag/ctf/","/tag/reversing/"]},"frontmatter":{"date":"2021-10-04","description":"今回は解けた問題の中から特に学びになった点の多いInfinity GauntletについてWriteUpを書きます。","tags":["CTF","Reversing"],"title":"【Reversing解説】Infinity Gauntlet (ångstromCTF 2021)","socialImage":{"publicURL":"/static/dc4d8b7f8795f3c3d3489d9957d155f2/no-image.png"}}}},"pageContext":{"slug":"/ctf-angstromctf-2021"}},"staticQueryHashes":["251939775","401334301","825871152"]}