{"componentChunkName":"component---src-templates-post-template-js","path":"/ctf-arm-assembly-bigginer","result":{"data":{"markdownRemark":{"id":"edaa9c4a-5f2f-5b36-9b21-d096ac89c9b4","html":"<h2 id=\"はじめに\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h2>\n<p>2021/3/31まで行われていた<a href=\"https://play.picoctf.org/practice\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">picoCTF2021</a>にチャレンジしてました。\nReversingカテゴリの問題に対象を絞って全完を目指していたのですが、残念ながら悔しい結果に終わりました。</p>\n<p>今回は、picoCTF2021のReversing問題の中から、「ARMssembly」シリーズの問題が非常に勉強になったので、WriteUpを書いていこうと思います。</p>\n<h2 id=\"今回学んだこと\" style=\"position:relative;\"><a href=\"#%E4%BB%8A%E5%9B%9E%E5%AD%A6%E3%82%93%E3%81%A0%E3%81%93%E3%81%A8\" aria-label=\"今回学んだこと permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>今回学んだこと</h2>\n<ol>\n<li>ARM向けアセンブリのニーモニック</li>\n<li>アセンブリコードから手動でデコンパイルするポイント</li>\n</ol>\n<h2 id=\"armssembly-シリーズの解法\" style=\"position:relative;\"><a href=\"#armssembly-%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA%E3%81%AE%E8%A7%A3%E6%B3%95\" aria-label=\"armssembly シリーズの解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARMssembly シリーズの解法</h2>\n<p>さて、「ARMssembly」シリーズは全部で5問出題されてましたが、すべての問題において解き方は共通でしたので、先に書いておこうとおもいます。</p>\n<p>「ARMssembly」シリーズの問題は、以下の手順で解くことができました。</p>\n<ol>\n<li>問題として提供されたアセンブリコードを眺める</li>\n<li>\n<p>main 関数からの流れを追っていく</p>\n<ul>\n<li>ググる</li>\n<li>ARMベースのCPUを搭載した環境（ラズパイを使用）でCのソースコードからアセンブリを生成し、問題コードと比較する</li>\n</ul>\n</li>\n<li>解く</li>\n</ol>\n<p>ではさっそく一問目から順に解いていきます。</p>\n<h2 id=\"armssembly-0\" style=\"position:relative;\"><a href=\"#armssembly-0\" aria-label=\"armssembly 0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARMssembly 0</h2>\n<h3 id=\"問題\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C\" aria-label=\"問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題</h3>\n<p>変数が2つ与えられるので、最終的な出力を答えよ、という問題でした。</p>\n<blockquote>\n<p>Description</p>\n<p>What integer does this program print with arguments <code class=\"language-text\">4112417903</code> and <code class=\"language-text\">1169092511</code>? </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">; 問題コード\n\t.arch armv8-a\n\t.file\t&quot;chall.c&quot;\n\t.text\n\t.align\t2\n\t.global\tfunc1\n\t.type\tfunc1, %function\nfunc1:\n\tsub\tsp, sp, #16\n\tstr\tw0, [sp, 12]\n\tstr\tw1, [sp, 8]\n\tldr\tw1, [sp, 12]\n\tldr\tw0, [sp, 8]\n\tcmp\tw1, w0\n\tbls\t.L2\n\tldr\tw0, [sp, 12]\n\tb\t.L3\n.L2:\n\tldr\tw0, [sp, 8]\n.L3:\n\tadd\tsp, sp, 16\n\tret\n\t.size\tfunc1, .-func1\n\t.section\t.rodata\n\t.align\t3\n.LC0:\n\t.string\t&quot;Result: %ld\\n&quot;\n\t.text\n\t.align\t2\n\t.global\tmain\n\t.type\tmain, %function\nmain:\n\tstp\tx29, x30, [sp, -48]!\n\tadd\tx29, sp, 0\n\tstr\tx19, [sp, 16]\n\tstr\tw0, [x29, 44]\n\tstr\tx1, [x29, 32]\n\tldr\tx0, [x29, 32]\n\tadd\tx0, x0, 8\n\tldr\tx0, [x0]\n\tbl\tatoi\n\tmov\tw19, w0\n\tldr\tx0, [x29, 32]\n\tadd\tx0, x0, 16\n\tldr\tx0, [x0]\n\tbl\tatoi\n\tmov\tw1, w0\n\tmov\tw0, w19\n\tbl\tfunc1\n\tmov\tw1, w0\n\tadrp\tx0, .LC0\n\tadd\tx0, x0, :lo12:.LC0\n\tbl\tprintf\n\tmov\tw0, 0\n\tldr\tx19, [sp, 16]\n\tldp\tx29, x30, [sp], 48\n\tret\n\t.size\tmain, .-main\n\t.ident\t&quot;GCC: (Ubuntu/Linaro 7.5.0-3ubuntu1~18.04) 7.5.0&quot;\n\t.section\t.note.GNU-stack,&quot;&quot;,@progbits</code></pre></div>\n<h3 id=\"main関数を読む\" style=\"position:relative;\"><a href=\"#main%E9%96%A2%E6%95%B0%E3%82%92%E8%AA%AD%E3%82%80\" aria-label=\"main関数を読む permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main関数を読む</h3>\n<p>とりあえずmain関数から追っていきます。\n結構長いですが、次の項目に着目しました。</p>\n<ul>\n<li><code class=\"language-text\">bl atoi</code></li>\n<li><code class=\"language-text\">bl atoi</code></li>\n<li><code class=\"language-text\">bl func1</code></li>\n<li><code class=\"language-text\">bl printf</code></li>\n</ul>\n<p><code class=\"language-text\">bl</code>は、”Branch with Link.”の略で、いわゆるCALL命令のようなものと認識してます。\n詳細については<a href=\"https://www.mztn.org/dragon/arm6408cond.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Arm64(ARMv8) Assembly Programming (08) 分岐命令</a>を参照しました。</p>\n<p>一言で表すと、「<code class=\"language-text\">bl</code>の直後に書かれたアドレスにジャンプし、<code class=\"language-text\">RET</code>命令にぶつかったら戻ってくる」という動きをします。</p>\n<p>今回は<code class=\"language-text\">atoi</code>関数が2つあることから、受け取った変数を数値に変換して<code class=\"language-text\">func1</code>関数の引数として送り、戻り値を<code class=\"language-text\">printf</code>で表示する処理をしていることが分かります。</p>\n<h3 id=\"cのコードに落とし込んで確認\" style=\"position:relative;\"><a href=\"#c%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AB%E8%90%BD%E3%81%A8%E3%81%97%E8%BE%BC%E3%82%93%E3%81%A7%E7%A2%BA%E8%AA%8D\" aria-label=\"cのコードに落とし込んで確認 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cのコードに落とし込んで確認</h3>\n<p>ここまで読めたところで、main関数部分をリバースエンジニアリングしたCのコードを書いて、想定があっているか確認しましょう。</p>\n<p>こんなコードを書いてみました。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これをラズパイ上のGCCで<code class=\"language-text\">gcc -S sample.c -o sample.lst</code>のようにして、オブジェクトファイルにしてみます。</p>\n<p>長いのでmain関数部分のみ抜き出したところ、次のようなアセンブリコードが生成されました。\n問題コードと比較しても、ほぼほぼ一致してますね！</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">main:\n.LFB7:\n      .cfi_startproc\n      stp     x29, x30, [sp, -48]!\n      .cfi_def_cfa_offset 48\n      .cfi_offset 29, -48\n      .cfi_offset 30, -40\n      mov     x29, sp\n      str     x0, [sp, 24]\n      str     x1, [sp, 16]\n      ldr     x0, [sp, 24]\n      bl      atoi\n      str     w0, [sp, 36]\n      ldr     x0, [sp, 16]\n      bl      atoi\n      str     w0, [sp, 40]\n      ldr     w1, [sp, 40]\n      ldr     w0, [sp, 36]\n      bl      func1\n      str     w0, [sp, 44]\n      ldr     w1, [sp, 44]\n      adrp    x0, .LC0\n      add     x0, x0, :lo12:.LC0\n      bl      printf\n      mov     w0, 0\n      ldp     x29, x30, [sp], 48\n      .cfi_restore 30\n      .cfi_restore 29\n      .cfi_def_cfa_offset 0\n      ret\n      .cfi_endproc</code></pre></div>\n<h3 id=\"func1関数を読む\" style=\"position:relative;\"><a href=\"#func1%E9%96%A2%E6%95%B0%E3%82%92%E8%AA%AD%E3%82%80\" aria-label=\"func1関数を読む permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>func1関数を読む</h3>\n<p>では、続いて2つの引数が渡された後のfunc1関数を見ていきます。\n問題コードのこの部分ですね。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">func1:\n\tsub\tsp, sp, #16\n\tstr\tw0, [sp, 12]\n\tstr\tw1, [sp, 8]\n\tldr\tw1, [sp, 12]\n\tldr\tw0, [sp, 8]\n\tcmp\tw1, w0\n\tbls\t.L2\n\tldr\tw0, [sp, 12]\n\tb\t.L3\n.L2:\n\tldr\tw0, [sp, 8]\n.L3:\n\tadd\tsp, sp, 16\n\tret\n\t.size\tfunc1, .-func1\n\t.section\t.rodata\n\t.align\t3</code></pre></div>\n<p>まずは<code class=\"language-text\">str</code>と<code class=\"language-text\">ldr</code>命令についてみていきます。</p>\n<p>簡単に言えば、<code class=\"language-text\">str</code>はいわゆるストア命令でレジスタの内容を指定したアドレスに格納します。\n一方、<code class=\"language-text\">ldr</code>はいわゆるロード命令で、指定したアドレスの情報をレジスタに読み込みます。</p>\n<p><code class=\"language-text\">[sp, 12]</code>の部分は、レジスタ間接という、CPUがメモリにアクセスする際のアドレス指定方法の一つで、スタックポインタに指定のオフセット分加算したアドレスを指定しています。</p>\n<p>というわけで、<code class=\"language-text\">func1</code>は引数として受け取った値を呼び出して比較し、その結果によって分岐していることがわかります。</p>\n<p>ここで分岐命令<code class=\"language-text\">bls</code>について確認します。\n<code class=\"language-text\">ls</code>は、“lower or same（&#x3C;=）“を意味します。</p>\n<p>ここから、func1について次のようなCコードに落とし込むことができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n2 <span class=\"token operator\">></span> n1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">bls</code>は”lower or same（&#x3C;=）“と書きましたが、ここで分岐先にジャンプするのは、IFの条件を「満たさなかった」時なので、Cのコードに落とし込むときの条件式は<code class=\"language-text\">n1 > n2</code>となります。</p>\n<p>ちなみに、関数呼び出しの時の引数は「後ろから」スタックに積まれていくため、最初に呼び出されている<code class=\"language-text\">[sp, 12]</code>に格納された情報が一つ目の引数(=n1)であるとわかります。</p>\n<p>それでは、このコードからオブジェクトファイルを生成してみましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">func1:\n.LFB6:\n\t.cfi_startproc\n\tsub\tsp, sp, #16\n\t.cfi_def_cfa_offset 16\n\tstr\tw0, [sp, 12]\n\tstr\tw1, [sp, 8]\n\tldr\tw1, [sp, 8]\n\tldr\tw0, [sp, 12]\n\tcmp\tw1, w0\n\tbls\t.L2\n\tldr\tw0, [sp, 12]\n\tb\t.L3\n.L2:\n\tldr\tw0, [sp, 8]\n.L3:\n\tadd\tsp, sp, 16\n\t.cfi_def_cfa_offset 0\n\tret\n\t.cfi_endproc</code></pre></div>\n<p>問題コードのアセンブリとほぼ一致し、想定が正しいことがわかりました。</p>\n<p>最後は、このコードから生成した実行ファイルに引数を与えて実行すると、FLAGとなる数列が取得できます。</p>\n<h2 id=\"armssembly1\" style=\"position:relative;\"><a href=\"#armssembly1\" aria-label=\"armssembly1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARMssembly1</h2>\n<h3 id=\"問題-1\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C-1\" aria-label=\"問題 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題</h3>\n<p>最終的にプログラムが”win”を出力するような引数を答えなさいという問題でした。\n1問目より少しコード量が多いですね。</p>\n<blockquote>\n<p>Description</p>\n<p>For what argument does this program print <code class=\"language-text\">win</code> with variables <code class=\"language-text\">81</code>, <code class=\"language-text\">0</code> and <code class=\"language-text\">3</code>? </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">\t.arch armv8-a\n\t.file\t&quot;chall_1.c&quot;\n\t.text\n\t.align\t2\n\t.global\tfunc\n\t.type\tfunc, %function\nfunc:\n\tsub\tsp, sp, #32\n\tstr\tw0, [sp, 12]\n\tmov\tw0, 81\n\tstr\tw0, [sp, 16]\n\tstr\twzr, [sp, 20]\n\tmov\tw0, 3\n\tstr\tw0, [sp, 24]\n\tldr\tw0, [sp, 20]\n\tldr\tw1, [sp, 16]\n\tlsl\tw0, w1, w0\n\tstr\tw0, [sp, 28]\n\tldr\tw1, [sp, 28]\n\tldr\tw0, [sp, 24]\n\tsdiv\tw0, w1, w0\n\tstr\tw0, [sp, 28]\n\tldr\tw1, [sp, 28]\n\tldr\tw0, [sp, 12]\n\tsub\tw0, w1, w0\n\tstr\tw0, [sp, 28]\n\tldr\tw0, [sp, 28]\n\tadd\tsp, sp, 32\n\tret\n\t.size\tfunc, .-func\n\t.section\t.rodata\n\t.align\t3\n.LC0:\n\t.string\t&quot;You win!&quot;\n\t.align\t3\n.LC1:\n\t.string\t&quot;You Lose :(&quot;\n\t.text\n\t.align\t2\n\t.global\tmain\n\t.type\tmain, %function\nmain:\n\tstp\tx29, x30, [sp, -48]!\n\tadd\tx29, sp, 0\n\tstr\tw0, [x29, 28]\n\tstr\tx1, [x29, 16]\n\tldr\tx0, [x29, 16]\n\tadd\tx0, x0, 8\n\tldr\tx0, [x0]\n\tbl\tatoi\n\tstr\tw0, [x29, 44]\n\tldr\tw0, [x29, 44]\n\tbl\tfunc\n\tcmp\tw0, 0\n\tbne\t.L4\n\tadrp\tx0, .LC0\n\tadd\tx0, x0, :lo12:.LC0\n\tbl\tputs\n\tb\t.L6\n.L4:\n\tadrp\tx0, .LC1\n\tadd\tx0, x0, :lo12:.LC1\n\tbl\tputs\n.L6:\n\tnop\n\tldp\tx29, x30, [sp], 48\n\tret\n\t.size\tmain, .-main\n\t.ident\t&quot;GCC: (Ubuntu/Linaro 7.5.0-3ubuntu1~18.04) 7.5.0&quot;\n\t.section\t.note.GNU-stack,&quot;&quot;,@progbits</code></pre></div>\n<h3 id=\"main関数を読む-1\" style=\"position:relative;\"><a href=\"#main%E9%96%A2%E6%95%B0%E3%82%92%E8%AA%AD%E3%82%80-1\" aria-label=\"main関数を読む 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main関数を読む</h3>\n<p>とりあえずmain関数から追っていきます。\nこれまでの問題で紹介した命令については割愛します。</p>\n<p>main関数で注目すべき点は最後の処理ですね。</p>\n<p>前の問題と同様、引数を受けとり、それをfunc1関数に渡しています。\nその後、func1関数の戻り値と0を比較した結果で、winかloseのどちらを表示するかを決定しているようです。</p>\n<p>そこで、まずはこの部分をCのソースコードに落としこんでいきたいと思います。</p>\n<p><code class=\"language-text\">bne .L4</code>は”not equal”を意味します。\nつまり、func1の戻り値と0の比較をした時に、<code class=\"language-text\">func1の戻り値 != 0</code>の状態であれば、<code class=\"language-text\">.L4</code>によって指定されたアドレスにジャンプするというわけです。</p>\n<h3 id=\"cのコードに落とし込んで確認-1\" style=\"position:relative;\"><a href=\"#c%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AB%E8%90%BD%E3%81%A8%E3%81%97%E8%BE%BC%E3%82%93%E3%81%A7%E7%A2%BA%E8%AA%8D-1\" aria-label=\"cのコードに落とし込んで確認 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cのコードに落とし込んで確認</h3>\n<p>ここまで読めたところで、main関数部分をリバースエンジニアリングしたCのコードを書いて、想定があっているか確認しましょう。</p>\n<p>こんなコードを書いてみました。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"win\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これをラズパイ上のGCCで<code class=\"language-text\">gcc -S sample.c -o sample.lst</code>のようにして、オブジェクトファイルにしてみます。</p>\n<p>長いのでmain関数部分のみ抜き出したところ、次のようなアセンブリコードが生成されました。\n問題コードと比較し、一致することがわかると思います。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">main:\n.LFB7:\n\t.cfi_startproc\n\tstp\tx29, x30, [sp, -48]!\n\t.cfi_def_cfa_offset 48\n\t.cfi_offset 29, -48\n\t.cfi_offset 30, -40\n\tmov\tx29, sp\n\tstr\tx0, [sp, 24]\n\tldr\tx0, [sp, 24]\n\tbl\tatoi\n\tstr\tw0, [sp, 40]\n\tldr\tw0, [sp, 40]\n\tbl\tfunc1\n\tstr\tw0, [sp, 44]\n\tldr\tw0, [sp, 44]\n\tcmp\tw0, 0\n\tbne\t.L4\n\tadrp\tx0, .LC0\n\tadd\tx0, x0, :lo12:.LC0\n\tbl\tprintf\n\tb\t.L5\n.L4:\n\tadrp\tx0, .LC1\n\tadd\tx0, x0, :lo12:.LC1\n\tbl\tprintf\n.L5:\n\tmov\tw0, 0\n\tldp\tx29, x30, [sp], 48\n\t.cfi_restore 30\n\t.cfi_restore 29\n\t.cfi_def_cfa_offset 0\n\tret\n\t.cfi_endproc</code></pre></div>\n<h3 id=\"func1関数を読む-1\" style=\"position:relative;\"><a href=\"#func1%E9%96%A2%E6%95%B0%E3%82%92%E8%AA%AD%E3%82%80-1\" aria-label=\"func1関数を読む 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>func1関数を読む</h3>\n<p>これで勝利条件が分かりました。\nプログラム実行時に取得した値をfunc1の引数とした際に、func1から返却される戻り値が0になれば、”win”が出力されます。</p>\n<p>では、func1関数を見ていきましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">func:\n\tsub\tsp, sp, #32\n\t; 1. 引数を[sp, 12]に格納\n\tstr\tw0, [sp, 12]\n\t\n\t; 2. [sp, 16]に81を格納\n\tmov\tw0, 81\n\tstr\tw0, [sp, 16]\n\t\n\t; 3．[sp, 20]に0を格納\n\tstr\twzr, [sp, 20]\n\t\n\t; 4．[sp, 24]に3を格納\n\tmov\tw0, 3\n\tstr\tw0, [sp, 24]\n\t\n\t; 5．[sp, 20] と [sp, 16] の情報を読み込んで左シフト\n\tldr\tw0, [sp, 20]\n\tldr\tw1, [sp, 16]\n\tlsl\tw0, w1, w0\n\tstr\tw0, [sp, 28]\n\t\n\t; 6．5の結果を[sp, 24]で割る\n\tldr\tw1, [sp, 28]\n\tldr\tw0, [sp, 24]\n\tsdiv\tw0, w1, w0\n\tstr\tw0, [sp, 28]\n\t\n\t;7. 6の結果から、func1に渡した引数を引いてreturn\n\tldr\tw1, [sp, 28]\n\tldr\tw0, [sp, 12]\n\tsub\tw0, w1, w0\n\t\n\tstr\tw0, [sp, 28]\n\tldr\tw0, [sp, 28]\n\tadd\tsp, sp, 32\n\tret</code></pre></div>\n<p>変数の流れが分かりやすいように、問題コードにコメントを入れてみました。</p>\n<ol>\n<li>引数を[sp, 12]に格納</li>\n<li>[sp, 16]に81を格納</li>\n<li>[sp, 20]に0を格納</li>\n<li>[sp, 24]に3を格納</li>\n</ol>\n<p>1と2と4は既出なので割愛します。</p>\n<p>3の命令については、いわゆるゼロレジスタの表現です。\nこのゼロレジスタを使うことで、間にほかのレジスタを挟むことなく、指定したアドレスに直接0を格納することができます。</p>\n<p><a href=\"https://developer.arm.com/documentation/den0024/a/An-Introduction-to-the-ARMv8-Instruction-Sets/The-ARMv8-instruction-sets/Registers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">参考：ARM Cortex-A Series Programmer’s Guide for ARMv8-A</a></p>\n<p> さて、変数の代入が終わったところで、以降の処理を見てみます。</p>\n<ol start=\"5\">\n<li>[sp, 20] と [sp, 16] の情報を読み込んで左シフト</li>\n</ol>\n<p><code class=\"language-text\">lsl</code>は、論理左シフト命令です。\nデータを左にずらし、空いたbitは0で穴埋めされます。</p>\n<p>6、7については、この左シフトの結果に対して、3で割った後、与えた引数を引くという処理をしています。\nつまり、最終的にこの演算結果が0になる引数が、今回のフラグです。</p>\n<p>ここまで読めればもう簡単に解くことができますが、せっかくなのでfunc1についてもCのコードに落としこんでみましょう。\nこのままオブジェクトファイルを生成すると、なぜかsdivの部分が再現できませんでしたが、概ね正しい実装かなと 思います。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">81</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span>\n    ret <span class=\"token operator\">=</span> n2 <span class=\"token operator\">&lt;&lt;</span> n3<span class=\"token punctuation\">;</span>\n    ret <span class=\"token operator\">=</span> ret <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    ret <span class=\"token operator\">=</span> ret <span class=\"token operator\">-</span> n1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>このコードのfunc1の戻り値が0になるような引数がFLAGとなる数列ということがわかります。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>アセンブリコードとじっくり向き合って、自分の手でCのコードに書き換えていくのは非常に楽しい時間でした。\n作問社の方に感謝を。</p>\n<p>残りの問題については、そのうちWriteUpを追記するかもしれません。</p>\n<p>ちなみに、余談ですが、アセンブリの勉強のためにおすすめの本について書いておきます。\n良ければ参考にしてください。</p>\n<h3 id=\"おすすめ書籍\" style=\"position:relative;\"><a href=\"#%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E6%9B%B8%E7%B1%8D\" aria-label=\"おすすめ書籍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おすすめ書籍</h3>\n<ul>\n<li>\n<p><a href=\"https://amzn.to/3mceJHH\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">大熱血！ アセンブラ入門</a></p>\n<ul>\n<li>長所：大体なんでも書いてある。ARMのアセンブリもこの本を参考にしつつ解きました。</li>\n<li>短所：分厚い、高い、難しい(そう)。まだ全部読めてません笑</li>\n<li></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://amzn.to/2PsWQbI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解析魔法少女 美咲ちゃん マジカル・オープン!</a></p>\n<ul>\n<li>長所：美咲ちゃんが可愛い。読み物感覚で読める。初心者にもわかりやすい。</li>\n<li>短所：古い（Windows XP とかの時代です）</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://amzn.to/3fyymZo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[改訂3版]基本情報技術者らくらく突破CASL II</a></p>\n<ul>\n<li>長所：「まじでアセンブリなんもわからん」って人にこそおすすめ。8bitアセンブリで理解しやすく、問題（基本情報技術者試験）や解説が豊富に落ちてる。</li>\n<li>短所：自分で書いたCのソースから挙動を確認できない。32bitアセンブリとの違いについては別途勉強する必要がある。</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/ctf-arm-assembly-bigginer","tagSlugs":["/tag/ctf/","/tag/reversing/","/tag/pico-ctf/"]},"frontmatter":{"date":"2021-10-04","description":"picoCTF2021のReversing問題、ARMssemblyシリーズを通して、ARM向けのアセンブリを学んでいきます。","tags":["CTF","Reversing","picoCTF"],"title":"CTFで学ぶARMアセンブリ","socialImage":{"publicURL":"/static/dc4d8b7f8795f3c3d3489d9957d155f2/no-image.png"}}}},"pageContext":{"slug":"/ctf-arm-assembly-bigginer"}},"staticQueryHashes":["251939775","401334301","825871152"]}