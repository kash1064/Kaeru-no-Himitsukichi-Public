{"componentChunkName":"component---src-templates-post-template-js","path":"/ctf-tsg-live6","result":{"data":{"markdownRemark":{"id":"3d4cbe02-9da1-5311-b30c-f6b70b0a125a","html":"<h2 id=\"はじめに\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h2>\n<p>TSG LIVE! 6 CTFのWEB問、”<a href=\"https://github.com/tsg-ut/tsg-live-ctf-6/blob/main/web/truth-about-pi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Truth about Pi</a>“がとても勉強になったのでWriteUpを兼ねて学んだことをまとめていこうと思います。</p>\n<p>最初は上手いことインジェクションする問題だと思っていたので、延々とRabbit Holeに入りこんでしまっていました。</p>\n<p>自戒も込めて真面目に勉強した結果の備忘録です。</p>\n<h2 id=\"writeup\" style=\"position:relative;\"><a href=\"#writeup\" aria-label=\"writeup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WriteUp</h2>\n<p>問題サーバにアクセスすると、koaフレームワーク製のページにアクセスできます。</p>\n<p>提供された問題コードを読むと、以下の部分で入力値に対して処理を行い、最終的に“digit”の値が0になったときにFLAGが出力されることがわかりました。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> index <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token keyword\">const</span> pi <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">// 2</span>\n    <span class=\"token keyword\">const</span> digit <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3</span>\n    content <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\t\t&lt;h1>円周率の</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">桁目は</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>digit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">です！&lt;/h1>\n\t\t</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>digit <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">FLAG</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n\t</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ここで、最終的な解答として以下のようなリクエストでFLAGを取得することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X POST -d \"index=toString.length\" http://localhost:3000</code></pre></div>\n<p>では、なぜこのリクエストでFLAGの取得ができるのかを追っていきたいと思います。</p>\n<h2 id=\"1-postリクエストを受け取る\" style=\"position:relative;\"><a href=\"#1-post%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%82%92%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B\" aria-label=\"1 postリクエストを受け取る permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. POSTリクエストを受け取る</h2>\n<p>まずはPOSTリクエストを受け取った直後の<code class=\"language-text\">const { index } = ctx.request.body;</code>の処理についてみていきます。</p>\n<p>ここで、送信されたPOSTリクエストのBody部分が、<a href=\"https://github.com/koajs/bodyparser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>koa-bodyparser</strong></a>によってオブジェクトとして流されてきます。</p>\n<p>このオブジェクト、モジュールのソースコードを読むと最終的にJSON形式でパースされたものが返されているようです。\nそのため、分割代入で”index”の値がconst変数indexに格納されます。</p>\n<p>パース処理の都合上、ユーザが入力した値は必ずStringsオブジェクトになり、Nunberオブジェクトを流すことはできません。</p>\n<p>また、この問題とは関係ないですが、POSTリクエストに”index”を複数定義した場合は、Arrayオブジェクトとしてindexに格納されます。</p>\n<h2 id=\"2-円周率の準備\" style=\"position:relative;\"><a href=\"#2-%E5%86%86%E5%91%A8%E7%8E%87%E3%81%AE%E6%BA%96%E5%82%99\" aria-label=\"2 円周率の準備 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 円周率の準備</h2>\n<p>円周率”3.141592653589793”をStringオブジェクトに変換して変数piに格納しています。</p>\n<p>（Math.PIがもっと長い円周率を出力してくれれば何も悩むことなかったのに・・・）</p>\n<h2 id=\"3-digitを0にする\" style=\"position:relative;\"><a href=\"#3-digit%E3%82%920%E3%81%AB%E3%81%99%E3%82%8B\" aria-label=\"3 digitを0にする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. digitを0にする</h2>\n<p>1,2のステップで、変数indexとpiのそれぞれにStringオブジェクトが格納されています。</p>\n<p>ここから、これを利用して<code class=\"language-text\">parseInt(get(pi, index))</code>の結果を0にする方法を探っていきます。</p>\n<p>まず、一番外側の’parseInt()‘ですが、これは文字列を数値に変換するだけの関数なので深く考えなくてもよさそうです。\nなので、<code class=\"language-text\">get(pi, index)</code>の結果が文字列’0’になる入力値を考えます。</p>\n<p>問題コードを読むと<code class=\"language-text\">get</code>は、 <code class=\"language-text\">const get = require('lodash.get');</code>として定義されているので、<code class=\"language-text\">lodash.get</code>のコードを見てみます。</p>\n<p>第3引数の<code class=\"language-text\">defaultValue</code>は、resultがNullになったときの戻り値を定義します。</p>\n<p>しかし、残念ながら今回はここに値を入力する方法がありません。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> defaultValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> object <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> <span class=\"token function\">baseGet</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> defaultValue <span class=\"token operator\">:</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記のコードの<code class=\"language-text\">object</code>には変数piが、<code class=\"language-text\">path</code>には変数indexが入ります。</p>\n<p>そのため、<code class=\"language-text\">baseGet</code>関数が呼び出されることがわかります。</p>\n<p><code class=\"language-text\">baseGet</code>関数のコードも見てみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">baseGet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  path <span class=\"token operator\">=</span> <span class=\"token function\">castPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>length\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>object <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    object <span class=\"token operator\">=</span> object<span class=\"token punctuation\">[</span><span class=\"token function\">toKey</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">==</span> length<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> object <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ここで1つ目の重要なポイントになるのは<code class=\"language-text\">castPath</code>関数です。</p>\n<p>コードを見ると受け取った値が配列ではない場合、<code class=\"language-text\">stringToPath</code>に流して配列に変換していることがわかりました。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stringToPath <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  string <span class=\"token operator\">=</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reLeadingDot<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rePropName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">,</span> quote<span class=\"token punctuation\">,</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>quote <span class=\"token operator\">?</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reEscapeChar<span class=\"token punctuation\">,</span> <span class=\"token string\">'$1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">||</span> match<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">castPath</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> value <span class=\"token operator\">:</span> <span class=\"token function\">stringToPath</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>そしてこの配列の変換の方法がポイントになります。</p>\n<p><code class=\"language-text\">stringToPath</code>では、‘reLeadingDot’によって、’.’区切りで文字列を分割します。</p>\n<p>そのため、‘toString.length’のような文字列がvalueに代入された場合は、変換後の配列が<code class=\"language-text\">[toString, length]</code>のように2要素に分割されてしまうわけです！</p>\n<p>さて、<code class=\"language-text\">baseGet</code>関数に戻ります。</p>\n<p>この時点で変数pathには、ユーザが入力した文字列を配列に変換した値が格納されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>length\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>object <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tobject <span class=\"token operator\">=</span> object<span class=\"token punctuation\">[</span><span class=\"token function\">toKey</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">==</span> length<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> object <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span></code></pre></div>\n<p>変数objectは、<code class=\"language-text\">baseGet</code>関数の戻り値なので、すなわち<code class=\"language-text\">get(pi, index)</code>の戻り値となります。</p>\n<p>whileループの処理を追いかけてみましょう。\n次のようにコードを改変して出力を見てみました。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> object <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"length\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before :\"</span> <span class=\"token operator\">+</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>object <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tobject <span class=\"token operator\">=</span> object<span class=\"token punctuation\">[</span><span class=\"token function\">toKey</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count \"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After :\"</span> <span class=\"token operator\">+</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>結果はこちらです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> \"Before :3.141592653589793\"\n> \"Count 1: function toString() { [native code] }\"\n> \"Count 2: 0\"\n> \"After :0\"</code></pre></div>\n<p>一体何が起こっているのかを説明します。</p>\n<p>ループ内では、objectに対して、ブラケット表記法のプロパティアクセサを用いたプロパティの取得が行われています。</p>\n<p>そのため、1度目の処理では、Stringオブジェクトである”3.14…”に対して、<code class=\"language-text\">toString</code>プロパティを参照したため、Functionオブジェクトが変数objectに格納されたのです。</p>\n<p>そして、2度目の処理では、Functionオブジェクトとなった変数objectの<code class=\"language-text\">length</code>プロパティに対して参照を試みています。</p>\n<p>これは今回初めて知ったのですが、JavascriptにおいてFunctionオブジェクトのlengthプロパティは引数の数を返すそうです。</p>\n<p>参考：<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/length\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Function.length - JavaScript | MDN</a></p>\n<p>今回Functionオブジェクトとして利用したのは<code class=\"language-text\">toString</code>関数であり、その引数は0です。</p>\n<p>そのため、<code class=\"language-text\">baseGet</code>関数の戻り値も0となり、最終的に<code class=\"language-text\">get(pi, index)</code>から返却される値も0となるため、FLAGが取得できるという流れです。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>ちなみに、前述の理由により、<code class=\"language-text\">toString.length</code>以外にも、参照可能かつ期待される引数が0の関数名を指定してあげれば、すべてFLAG取得に利用することができます。\n（例：valueOf, toLowerCaseなど）</p>\n<p>WEB問は普段解かないものの、たまたま挑戦した問題でした。</p>\n<p>ライブラリのコードはちゃんと追っていたのですが、残念ながらJavascriptのPrototypeの仕様への理解が浅く、自力でのFLAG取得には至りませんでしたものの、非常に学びの多い良問だと感じたため、今回記事にまとめさせていただきました。</p>\n<p>作問者の方に感謝！</p>","fields":{"slug":"/ctf-tsg-live6","tagSlugs":["/tag/ctf/","/tag/web/"]},"frontmatter":{"date":"2021-10-04","description":"TSG LIVE! 6 CTFのWEB問、Truth about Piがとても勉強になったのでWriteUpを兼ねて学んだことをまとめていこうと思います。","tags":["CTF","Web"],"title":"Truth about PiのWriteUpと備忘録[TSG LIVE! 6 CTF]","socialImage":{"publicURL":"/static/334bd91f01f5d703919e643c6130dca6/ctf-elf-training.png"}}}},"pageContext":{"slug":"/ctf-tsg-live6"}},"staticQueryHashes":["251939775","401334301","825871152"]}