{"componentChunkName":"component---src-templates-post-template-js","path":"/diyos-30daysos-qemu-nographic","result":{"data":{"markdownRemark":{"id":"f06d6aa2-2f7e-5ae2-8a5a-f7c9cf412239","html":"<p><strong>自作OSをCUIで動かしたい時に使うQemuのnographicオプション</strong>についてまとめます。</p>\n<p>今回動かすバイナリは、30日OSの1日目で作成する、何もしないブートイメージです。</p>\n<p>30日OSの書籍と異なる点として、30日OSを執筆された方の自作ツールではなく、汎用アセンブラのNASMを利用しています。  </p>\n<h2 id=\"qemuをcuiで動かす\" style=\"position:relative;\"><a href=\"#qemu%E3%82%92cui%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99\" aria-label=\"qemuをcuiで動かす permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QemuをCUIで動かす</h2>\n<p>結論から書きますが、以下のコマンドでブートイメージをQemuのCUI実行することができました。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">qemu-system-x86_64 -drive <span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span>boot.img,format<span class=\"token operator\">=</span>raw -nographic</code></pre></div>\n<p>おそらくこれがQemuのCUIでバイナリを実行する際のミニマムなオプションかと思います。</p>\n<p>それぞれのオプションの意味は以下のとおりです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-drive:     \n    ファイルをドライブイメージとして使用するためのオプション\n    必須の引数として、[file=file]をとる\n\n    [file=file][,if=type][,bus=n][,unit=m][,media=d][,index=i]\n    [,cache=writethrough|writeback|none|directsync|unsafe][,format=f]\n    [,snapshot=on|off][,rerror=ignore|stop|report]\n    [,werror=ignore|stop|report|enospc][,id=name][,aio=threads|native]\n    [,readonly=on|off][,copy-on-read=on|off]\n    [,discard=ignore|unmap][,detect-zeroes=on|off|unmap]\n    [[,bps=b]|[[,bps_rd=r][,bps_wr=w]]]\n    [[,iops=i]|[[,iops_rd=r][,iops_wr=w]]]\n    [[,bps_max=bm]|[[,bps_rd_max=rm][,bps_wr_max=wm]]]\n    [[,iops_max=im]|[[,iops_rd_max=irm][,iops_wr_max=iwm]]]\n    [[,iops_size=is]]\n    [[,group=g]]\n\n-nographic：\n    GUIを無効にして、シリアルI/Oをコンソールにリダイレクトする</code></pre></div>\n<p>上記のとおり、-driveオプションは、NASMで作成したブートイメージ(boot.img)をドライブイメージに指定するためのオプションです。</p>\n<p>fileとformatは、この-driveオプションの引数になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">-drive <span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span>boot.img,format<span class=\"token operator\">=</span>raw</code></pre></div>\n<p>-driveオプションに必須の引数は[file=file]のみですが、今回はformat=rawの指定も入れています。<br>\nformat=rawの指定がなくとも、CUIでQemuを起動することはできますが、次のような警告が出力されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WARNING:\nImage format was not specified for '/haribote/boot.img' and probing guessed raw.Specify the 'raw' format explicitly to remove the restrictions.</code></pre></div>\n<p>次に、-nographicオプションですが、これがCUIでQemuを起動するためのオプションです。<br>\nヘルプに記載のとおり、シリアルI/O(デバイス間で通信されるデータ)をコンソールにリダイレクトしてくれます。</p>\n<h2 id=\"qemuのcui停止する\" style=\"position:relative;\"><a href=\"#qemu%E3%81%AEcui%E5%81%9C%E6%AD%A2%E3%81%99%E3%82%8B\" aria-label=\"qemuのcui停止する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QemuのCUI停止する</h2>\n<p>QemuのCUIが起動できたら、元のコンソールに戻ります。<br>\nコンソールに戻るには、次のキーを「連続して」入力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Ctrl + A\nX</code></pre></div>\n<p>「Ctrl + A」を押したら、キーを離して「X」を入力してください。<br>\nこれでQemuが停止します。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>CUIで起動テストできると、作業がちょっとスムーズになった気がします。<br>\nWSL上のDockerでそのまま動作確認ができるのがうれしい。</p>\n<p>ちなみに上記の動作確認は以下のDockerイメージ上で行いました。<br>\n参考までに。</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> python:3.8</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PYTHONUNBUFFERED 1</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> TZ=Asia/Tokyo</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> mkdir -p /haribote</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> HOME=/haribote</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> <span class=\"token variable\">$HOME</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> useradd ubuntu</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> dpkg --add-architecture i386</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt update &amp;&amp; apt upgrade -y</span>\n\n<span class=\"token comment\"># デバッグ、開発用のツール</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt install vim unzip zip gdb ltrace strace -y</span>\n\n<span class=\"token comment\"># コンパイル用のツール</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt install mtools nasm build-essential g++ make -y</span>\n\n<span class=\"token comment\"># Qemu</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt install qemu qemu-system-x86 qemu-utils qemu-system-arm -y</span></code></pre></div>","fields":{"slug":"/diyos-30daysos-qemu-nographic","tagSlugs":["/tag/自作os/","/tag/30-日os/","/tag/qemu/","/tag/notes/"]},"frontmatter":{"date":"2021-01-09","description":"自作OSをCUIで動かしたい時に使うQemuのnographicオプションについて紹介します。","tags":["自作OS","30日OS","QEMU","Notes"],"title":"30日OSのブートイメージをQemuのCUIで動かすnographicオプションの使い方","socialImage":{"publicURL":"/static/dc4d8b7f8795f3c3d3489d9957d155f2/no-image.png"}}}},"pageContext":{"slug":"/diyos-30daysos-qemu-nographic"}},"staticQueryHashes":["251939775","401334301","825871152"]}