{"componentChunkName":"component---src-templates-post-template-js","path":"/docker-tabo-compleate","result":{"data":{"markdownRemark":{"id":"2a258458-3934-59e5-adfe-dff67b180476","html":"<p>Dokcerコンテナの中でmakeを使う際に、引数のタブ補完ができない問題の解消法についてまとめます。</p>\n<p>僕は自作OSの開発をDockerコンテナで行っているのですが、<strong>docker runコマンドでログインしたコンテナの中で、Makefileの引数のタブ補完ができない問題</strong>が発生しました。</p>\n<p>本来であれば、次の画像のように「make build」といった形のMakefileの引数がTabキーで補完されてほしいのですが、接続したDokcerコンテナ内のシェルでは上手く起動しませんでした。</p>\n<p><img src=\"assets/2021_01_11_2954.assets/image-1.png\" alt=\"img\"></p>\n<h2 id=\"解決方法\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\" aria-label=\"解決方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解決方法</h2>\n<p>MakefileのTab補完ができない場合は、以下のコマンドで<strong>bash-completion</strong>をインストールしたのち、/etc/bash_completionをBashのsourceコマンドで読み込ませます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> bash-completion -y\n<span class=\"token builtin class-name\">source</span> /etc/bash_completion</code></pre></div>\n<p>これで、Tab補完が有効になりました。</p>\n<p>しかし、そもそも、bash-completionとはなんでしょうか。<br>\nReadmeを読むと、<strong>BashシェルのTab補完を強化するためのツール</strong>のようです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bash-completion は、Bash シェル用のコマンドラインコマンド補完のコレクション、新しい補完の作成を支援するヘルパー関数のコレクション、補完を自動的にロードしたりインストールしたりするための機能のセットです。\n``\n\nbash-completionを入れておくと、**Makefileの引数以外にも、systemctlなど、デフォルトのツールのオプション引数も出力できる**ようになります。  \n非常に便利です。\n\nちなみに、bash-completionをインストールした後、bash-completionが有効になっているかは、以下のコマンドを実行したときに大量の出力があるかで確認できます。\n\n​```bash\ncomplete -p</code></pre></div>\n<p>詳しくは以下の記事が参考になりました。</p>\n<p><a href=\"https://qiita.com/yamada-hakase/items/bf163f0924e4d925fefb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bash-completionを活用して、manやhelpを見ずに、バシバシ長いコマンドを打つ - Qiita</a></p>\n<h2 id=\"dockerコンテナでbash-completionが有効にならない\" style=\"position:relative;\"><a href=\"#docker%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%A7bash-completion%E3%81%8C%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84\" aria-label=\"dockerコンテナでbash completionが有効にならない permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerコンテナでbash-completionが有効にならない</h2>\n<p>というわけで、Dokcerfileにbash-completionをインストールする記述を追加してからイメージをビルドすれば、Tab補完ができない問題は解消されそうです。</p>\n<p>ここで、次のようなDockerfileを利用してイメージを作成しました。</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Dokcerfile</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> python:3.8</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PYTHONUNBUFFERED 1</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> TZ=Asia/Tokyo</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> mkdir -p /homedir</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> HOME=/homedir</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> <span class=\"token variable\">$HOME</span></span>\n\n<span class=\"token comment\"># If you henge shell to Bash</span>\n<span class=\"token comment\"># Shell &amp;#91;\"/bin/bash\", \"-c\"]</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> useradd ubuntu</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> dpkg --add-architecture i386</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt update &amp;&amp; apt upgrade -y</span>\n\n<span class=\"token comment\"># Utils</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt install vim unzip zip gdb ltrace strace bash-completion -y</span>\n\n<span class=\"token comment\"># Devtools</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt install mtools nasm build-essential g++ make -y</span>\n\n<span class=\"token comment\"># Qemu</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt install qemu qemu-system-x86 qemu-utils qemu-system-arm -y</span></code></pre></div>\n<p><strong>しかし、作成したイメージに以下のコマンドでログインしたところ、Tab補完が機能しませんでした。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run --rm -it -v mydir:/homedir mycontainer /bin/bash</code></pre></div>\n<p><strong>ログインしたコンテナ内で「source /etc/bash_completion」を実行した後であれば、Tab補完は正常に動いてくれるため、bash-completion自体は正常にインストールされているようです。</strong></p>\n<p>また、/etc/profile.d 配下には、以下のようにbash_completion.shが配置されていました。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@ab80c3738102:~<span class=\"token comment\"># cat /etc/profile.d/bash_completion.sh</span>\n\n<span class=\"token comment\"># Check for interactive bash and that we haven't already been sourced.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -n <span class=\"token string\">\"<span class=\"token variable\">${<span class=\"token environment constant\">BASH_VERSION</span>-}</span>\"</span> -a -n <span class=\"token string\">\"<span class=\"token variable\">${<span class=\"token environment constant\">PS1</span>-}</span>\"</span> -a -z <span class=\"token string\">\"<span class=\"token variable\">${BASH_COMPLETION_VERSINFO-}</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\n    <span class=\"token comment\"># Check for recent enough version of bash.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token environment constant\">BASH_VERSINFO</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>}</span> -gt <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">\\</span>\n       <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token environment constant\">BASH_VERSINFO</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>}</span> -eq <span class=\"token number\">4</span> -a <span class=\"token variable\">${<span class=\"token environment constant\">BASH_VERSINFO</span><span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>}</span> -ge <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        <span class=\"token punctuation\">[</span> -r <span class=\"token string\">\"<span class=\"token variable\">${XDG_CONFIG_HOME<span class=\"token operator\">:-</span>$HOME<span class=\"token operator\">/</span>.config}</span>/bash_completion\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n            <span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"<span class=\"token variable\">${XDG_CONFIG_HOME<span class=\"token operator\">:-</span>$HOME<span class=\"token operator\">/</span>.config}</span>/bash_completion\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">shopt</span> -q progcomp <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> -r /usr/share/bash-completion/bash_completion <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n            <span class=\"token comment\"># Source completion code.</span>\n            <span class=\"token builtin class-name\">.</span> /usr/share/bash-completion/bash_completion\n        <span class=\"token keyword\">fi</span>\n    <span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>そのため、どうやら<strong>シェル起動時に/etc/profileによって読み込まれるはずの/etc/profile.d/bash_completionが、上記の方法でコマンドにログインした際には読み込まれていないことが原因</strong>のようです。</p>\n<p>Docker run コマンドについて、ドキュメントを参照したところ次のような記述がありました。</p>\n<blockquote>\n<p>docker runコマンドは、まず指定されたイメージの上に書き込み可能なコンテナレイヤーを作成し、指定されたコマンドで起動します。</p>\n<p>つまり、docker run は API /containers/create と /containers/(id)/start と同等です。\n停止しているコンテナは、docker start を使って以前の変更をすべてそのままにして再起動することができます。</p>\n<p>すべてのコンテナのリストを表示するには docker ps -a を参照してください。</p>\n<p><a href=\"https://docs.docker.com/engine/reference/commandline/run/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.docker.com/engine/reference/commandline/run/</a></p>\n</blockquote>\n<p>つまり、<strong>docker run -it コマンドで/bin/bashを呼び出すのは、起動したDokcerコンテナ内でインタラクティブなbashを呼び出し、そこに疑似TTYで呼び出し元の標準入出力を接続している</strong>ということのようです。</p>\n<p>ここで問題の原因は、Dockerコンテナ起動時(つまり、docker run で起動した bash に接続時)に /etc/profile によって読み込まれるはずのbash_completionが読み込まれないことでした。</p>\n<p>それもそのはず、<strong>/etc/profile はそもそも、シェルへの「ログイン時」に読み込まれます。</strong><br>\nそのため、 run コマンドで bash を起動しただけでは、そもそも読み込まれないのです。</p>\n<p>原因が特定できたので、Dockerコンテナの起動コマンドを次のように改変します。</p>\n<p><code class=\"language-text\">docker run --rm -it -v mydir:/homedir mycontainer /bin/bash -login</code></p>\n<p>この「-login」オプションは、環境設定(profileなど)を意図的に読み込ませて実行することを指示するオプションです。</p>\n<p>このコマンドで起動したコンテナに接続することで、Tab補完がきちんと動いてくれるようになりました、</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>ちょっとした備忘録のつもりの、軽い気持ちで書き始めた記事でしたが、BashのTab補完やDockerコマンド、Bashシェルの仕様などの理解が深まり、非常に勉強になりました。</p>","fields":{"slug":"/docker-tabo-compleate","tagSlugs":["/tag/docker/","/tag/bash/","/tag/notes/"]},"frontmatter":{"date":"2021-01-11","description":"Dokcerコンテナの中でmakeを使う際に、引数のタブ補完ができない問題の解消法についてまとめます。","tags":["Docker","Bash","Notes"],"title":"docker run -it ~ /bin/bash で起動したコンテナでTab補完ができない問題の原因と解決方法","socialImage":{"publicURL":"/static/dc4d8b7f8795f3c3d3489d9957d155f2/no-image.png"}}}},"pageContext":{"slug":"/docker-tabo-compleate"}},"staticQueryHashes":["251939775","401334301","825871152"]}