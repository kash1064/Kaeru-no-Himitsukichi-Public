{"componentChunkName":"component---src-templates-post-template-js","path":"/ghidra-ghidrascript-utils","result":{"data":{"markdownRemark":{"id":"ef6d72ac-d1d4-5d45-8578-8e9c19868a27","html":"<p>元々は <a href=\"/ghidra-ghidrascript-tutorial\">はじめての Ghidra Script で CTF の問題を解く</a> の記事で紹介していた Ghidra Script のサンプル集でしたが、数が増えてきたのとこれから本格的に Ghidra を使っていこうと思っていることもあり、新しく別の記事に分割することにしました。</p>\n<p>使ってる感じ、Python(Jython) ではなく Java でスクリプトを書けるようにした方がよさそうな気がしていますが、とりあえず現在のところは Python でスクリプトを作成しています。</p>\n<p>ランタイムは Ghidrathon ではなく Ghidra のデフォルトのものを使用しています。</p>\n<!-- omit in toc -->\n<h2 id=\"もくじ\" style=\"position:relative;\"><a href=\"#%E3%82%82%E3%81%8F%E3%81%98\" aria-label=\"もくじ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>もくじ</h2>\n<ul>\n<li><a href=\"#%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%87%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E7%B5%90%E6%9E%9C%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">関数のデコンパイル結果を取得する</a></li>\n<li><a href=\"#%E7%89%B9%E5%AE%9A%E3%81%AE%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AE%E9%96%A2%E6%95%B0%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">特定のアドレスの関数、データを取得する</a></li>\n<li><a href=\"#%E9%96%A2%E6%95%B0%E5%86%85%E3%81%AE-call-%E3%82%92%E5%88%97%E6%8C%99%E3%81%99%E3%82%8B\">関数内の Call を列挙する</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E7%AF%84%E5%9B%B2%E5%86%85%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8B-call-%E9%96%A2%E6%95%B0%E3%81%8C%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99%E9%96%A2%E6%95%B0%E5%90%8D%E3%82%92%E5%88%97%E6%8C%99%E3%81%99%E3%82%8B\">指定アドレス範囲内で実行される Call 関数が呼び出す関数名を列挙する</a></li>\n<li><a href=\"#%E3%83%87%E3%82%A3%E3%82%B9%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AB%E7%B5%90%E6%9E%9C%E3%81%8B%E3%82%89%E9%80%A3%E7%B6%9A%E3%81%97%E3%81%A6%E3%83%8F%E3%83%BC%E3%83%89%E3%82%B3%E3%83%BC%E3%83%89%E3%81%95%E3%82%8C%E3%81%9F%E3%83%90%E3%82%A4%E3%83%88%E9%85%8D%E5%88%97%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">ディスアセンブル結果から連続してハードコードされたバイト配列を取得する</a></li>\n<li><a href=\"#%E7%89%B9%E5%AE%9A%E3%81%AE%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AE%E6%A7%8B%E9%80%A0%E4%BD%93%E6%83%85%E5%A0%B1%E3%82%92%E8%AD%98%E5%88%A5%E3%81%97%E3%81%A6%E5%80%A4%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">特定のアドレスの構造体情報を識別して値を取得する</a></li>\n<li><a href=\"#%E7%89%B9%E5%AE%9A%E3%81%AE%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AB%E6%A7%8B%E9%80%A0%E4%BD%93%E3%82%92%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6%E5%80%A4%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">特定のアドレスに構造体を割り当て、値を取得する</a></li>\n<li><a href=\"#%E4%BB%BB%E6%84%8F%E3%81%AE%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%83%AC%E3%83%B3%E3%82%B8%E3%81%AE%E3%83%90%E3%82%A4%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A8%E3%81%97%E3%81%A6%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B\">任意のアドレスレンジのバイトデータをファイルとして保存する</a></li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>\n<h2 id=\"関数のデコンパイル結果を取得する\" style=\"position:relative;\"><a href=\"#%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%87%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E7%B5%90%E6%9E%9C%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\" aria-label=\"関数のデコンパイル結果を取得する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>関数のデコンパイル結果を取得する</h2>\n<p>以下のスクリプトでは、Listing ウインドウで選択中の関数のデコンパイル結果を出力できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> ghidra<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>decompiler <span class=\"token keyword\">import</span> DecompInterface\n\n<span class=\"token comment\"># Decompile インターフェースを取得</span>\ndecomp <span class=\"token operator\">=</span> DecompInterface<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndecomp<span class=\"token punctuation\">.</span>openProgram<span class=\"token punctuation\">(</span>currentProgram<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># currentAddress には、Listing で選択している行のアドレスが自動的に参照される</span>\n<span class=\"token comment\"># そのため、事前にターゲットになる関数のアドレスを選択しておく</span>\nfunc <span class=\"token operator\">=</span> fpapi<span class=\"token punctuation\">.</span>getFunctionContaining<span class=\"token punctuation\">(</span>currentAddress<span class=\"token punctuation\">)</span>\ndecomp_results <span class=\"token operator\">=</span> decomp<span class=\"token punctuation\">.</span>decompileFunction<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> monitor<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> decomp_results<span class=\"token punctuation\">.</span>decompileCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pp <span class=\"token operator\">=</span> PrettyPrinter<span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> decomp_results<span class=\"token punctuation\">.</span>getCCodeMarkup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    code <span class=\"token operator\">=</span> pp<span class=\"token punctuation\">.</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getC<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There was an error in decompilation!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"特定のアドレスの関数データを取得する\" style=\"position:relative;\"><a href=\"#%E7%89%B9%E5%AE%9A%E3%81%AE%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AE%E9%96%A2%E6%95%B0%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\" aria-label=\"特定のアドレスの関数データを取得する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特定のアドレスの関数、データを取得する</h2>\n<p>以下のスクリプトでは、オフセットを指定して任意のアドレスの関数名を取得したり、指定のアドレスのデータを取得したりできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Listing 情報を取得(ghidra.program.database.ListingDB)</span>\nlisting <span class=\"token operator\">=</span> currentProgram<span class=\"token punctuation\">.</span>getListing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># オフセットを指定して GenericAddress オブジェクトを取得</span>\nfpapi <span class=\"token operator\">=</span> FlatProgramAPI<span class=\"token punctuation\">(</span>currentProgram<span class=\"token punctuation\">)</span>\naddr <span class=\"token operator\">=</span> fpapi<span class=\"token punctuation\">.</span>toAddr<span class=\"token punctuation\">(</span><span class=\"token number\">0x1024aa</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 指定したアドレスを含む関数を取得</span>\nfunc <span class=\"token operator\">=</span> fpapi<span class=\"token punctuation\">.</span>getFunctionContaining<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 関数名の表示</span>\n\n<span class=\"token comment\"># データを取得するアドレスを指定</span>\naddr <span class=\"token operator\">=</span> fpapi<span class=\"token punctuation\">.</span>toAddr<span class=\"token punctuation\">(</span><span class=\"token number\">0x102cd1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 指定アドレスのデータを取得</span>\ndata <span class=\"token operator\">=</span> listing<span class=\"token punctuation\">.</span>getDataAt<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ghidra.program.model.scalar.Scalar</span>\n\n<span class=\"token comment\"># 指定 AddressSet の範囲で DataIterator オブジェクトを取得</span>\n<span class=\"token comment\"># 指定の範囲で任意の AddressSet を取得する</span>\n<span class=\"token keyword\">from</span> ghidra<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>address <span class=\"token keyword\">import</span> Address<span class=\"token punctuation\">,</span> AddressSet\nfactory <span class=\"token operator\">=</span> currentProgram<span class=\"token punctuation\">.</span>getAddressFactory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 指定のオフセットから 0x100 分の範囲を指定</span>\naddr_set <span class=\"token operator\">=</span> AddressSet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\naddr_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 指定の範囲のデータを先頭から取得</span>\ndata_iterator <span class=\"token operator\">=</span> listing<span class=\"token punctuation\">.</span>getData<span class=\"token punctuation\">(</span>addr_set<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> data_iterator<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\"># 特定のアドレスのオペコードとオペランドを取得</span>\naddr <span class=\"token operator\">=</span> toAddr<span class=\"token punctuation\">(</span><span class=\"token number\">0x1000000</span><span class=\"token punctuation\">)</span>\ninst <span class=\"token operator\">=</span> getInstructionAt<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># オペランドの取得</span>\ninst<span class=\"token punctuation\">.</span>getDefaultOperandRepresentation<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ninst<span class=\"token punctuation\">.</span>getDefaultOperandRepesentation<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 次の行の情報を取得できる</span>\ninst<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ninst<span class=\"token punctuation\">.</span>getDefaultOperandRepresentation<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ninst<span class=\"token punctuation\">.</span>getDefaultOperandRepesentation<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"関数内の-call-を列挙する\" style=\"position:relative;\"><a href=\"#%E9%96%A2%E6%95%B0%E5%86%85%E3%81%AE-call-%E3%82%92%E5%88%97%E6%8C%99%E3%81%99%E3%82%8B\" aria-label=\"関数内の call を列挙する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>関数内の Call を列挙する</h2>\n<p>以下のコードでは関数内の Call 命令を列挙できます。</p>\n<p>関数内の呼び出し順序を維持したい場合やそうでない場合で取得方法を変える必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># currentAddress is ghidra.program.model.address.GenericAddress</span>\n<span class=\"token comment\"># currentAddress には、Listing で選択している行のアドレスが自動的に参照される</span>\n<span class=\"token comment\"># そのため、事前にターゲットになる関数のアドレスを選択しておく</span>\nfunc_mgr <span class=\"token operator\">=</span> currentProgram<span class=\"token punctuation\">.</span>getFunctionManager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfunc <span class=\"token operator\">=</span> func_mgr<span class=\"token punctuation\">.</span>getFunctionContaining<span class=\"token punctuation\">(</span>currentAddress<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 関数内の呼び出しアドレスを列挙する(呼び出し順ではない)</span>\ncalls <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span>getCalledFunctions<span class=\"token punctuation\">(</span>monitor<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> calls<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Listing 情報を取得(ghidra.program.database.ListingDB)</span>\nlisting <span class=\"token operator\">=</span> currentProgram<span class=\"token punctuation\">.</span>getListing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 関数内の Call 命令を順に列挙することで呼び出し順序を維持して出力する</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> listing<span class=\"token punctuation\">.</span>getInstructions<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"指定アドレス範囲内で実行される-call-関数が呼び出す関数名を列挙する\" style=\"position:relative;\"><a href=\"#%E6%8C%87%E5%AE%9A%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E7%AF%84%E5%9B%B2%E5%86%85%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8B-call-%E9%96%A2%E6%95%B0%E3%81%8C%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99%E9%96%A2%E6%95%B0%E5%90%8D%E3%82%92%E5%88%97%E6%8C%99%E3%81%99%E3%82%8B\" aria-label=\"指定アドレス範囲内で実行される call 関数が呼び出す関数名を列挙する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>指定アドレス範囲内で実行される Call 関数が呼び出す関数名を列挙する</h2>\n<p>以下のスクリプトでは、指定のアドレス範囲内で実行される関数のシンボル名を列挙できます。</p>\n<p>以下の問題で使用しました。</p>\n<p>参考：<a href=\"/ctf-cakectf-2023#nanderev\">Cake CTF 2023 Writeup - nande</a></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> ghidra<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">.</span>flatapi <span class=\"token keyword\">import</span> FlatProgramAPI\n<span class=\"token keyword\">from</span> ghidra<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>address <span class=\"token keyword\">import</span> AddressSet\n\nlisting <span class=\"token operator\">=</span> currentProgram<span class=\"token punctuation\">.</span>getListing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfpapi <span class=\"token operator\">=</span> FlatProgramAPI<span class=\"token punctuation\">(</span>currentProgram<span class=\"token punctuation\">)</span>\nstart_addr <span class=\"token operator\">=</span> fpapi<span class=\"token punctuation\">.</span>toAddr<span class=\"token punctuation\">(</span><span class=\"token number\">0x1043c9</span><span class=\"token punctuation\">)</span>\nend_addr <span class=\"token operator\">=</span> fpapi<span class=\"token punctuation\">.</span>toAddr<span class=\"token punctuation\">(</span><span class=\"token number\">0x104825</span><span class=\"token punctuation\">)</span>\n\naddr_set <span class=\"token operator\">=</span> AddressSet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\naddr_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>start_addr<span class=\"token punctuation\">,</span> end_addr<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> listing<span class=\"token punctuation\">.</span>getInstructions<span class=\"token punctuation\">(</span>addr_set<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tcode <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token string\">\"CALL\"</span> <span class=\"token keyword\">in</span> code<span class=\"token punctuation\">:</span>\n\t\tfunc_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\t\tfpapi<span class=\"token punctuation\">.</span>getFunctionContaining<span class=\"token punctuation\">(</span>fpapi<span class=\"token punctuation\">.</span>toAddr<span class=\"token punctuation\">(</span>func_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"ディスアセンブル結果から連続してハードコードされたバイト配列を取得する\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%82%A3%E3%82%B9%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AB%E7%B5%90%E6%9E%9C%E3%81%8B%E3%82%89%E9%80%A3%E7%B6%9A%E3%81%97%E3%81%A6%E3%83%8F%E3%83%BC%E3%83%89%E3%82%B3%E3%83%BC%E3%83%89%E3%81%95%E3%82%8C%E3%81%9F%E3%83%90%E3%82%A4%E3%83%88%E9%85%8D%E5%88%97%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\" aria-label=\"ディスアセンブル結果から連続してハードコードされたバイト配列を取得する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ディスアセンブル結果から連続してハードコードされたバイト配列を取得する</h2>\n<p>以下のコードでは、一連のアセンブリコードのオペランドを連続して抽出できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 特定アドレスから 0x26 バイト分のオペランドを取得する</span>\naddr <span class=\"token operator\">=</span> toAddr<span class=\"token punctuation\">(</span><span class=\"token number\">0x109011</span><span class=\"token punctuation\">)</span>\ninst <span class=\"token operator\">=</span> getInstructionAt<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>getDefaultOperandRepresentation<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    inst <span class=\"token operator\">=</span> inst<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"特定のアドレスの構造体情報を識別して値を取得する\" style=\"position:relative;\"><a href=\"#%E7%89%B9%E5%AE%9A%E3%81%AE%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AE%E6%A7%8B%E9%80%A0%E4%BD%93%E6%83%85%E5%A0%B1%E3%82%92%E8%AD%98%E5%88%A5%E3%81%97%E3%81%A6%E5%80%A4%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\" aria-label=\"特定のアドレスの構造体情報を識別して値を取得する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特定のアドレスの構造体情報を識別して値を取得する</h2>\n<p>以下のコードでは、特定のアドレスの構造体情報を識別して、その値を取得することができます。</p>\n<p>以下の問題で使用しました。</p>\n<p>参考：<a href=\"/ctf-amature-2023#csce221-data-structures-and-algorithmsrev\">AmateursCTF 2023 Writeup - CSCE221-Data Structures and Algorithms</a></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> ghidra<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>script <span class=\"token keyword\">import</span> GhidraScript\n\n<span class=\"token comment\"># list の取得</span>\nstart_address <span class=\"token operator\">=</span> toAddr<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x404000\"</span><span class=\"token punctuation\">)</span>\ndata_section <span class=\"token operator\">=</span> currentProgram<span class=\"token punctuation\">.</span>getMemory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getBlock<span class=\"token punctuation\">(</span>start_address<span class=\"token punctuation\">)</span>\ndata_address <span class=\"token operator\">=</span> toAddr<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x404060\"</span><span class=\"token punctuation\">)</span>\ndata_object <span class=\"token operator\">=</span> getDataAt<span class=\"token punctuation\">(</span>data_address<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 自作した list 構造体が解釈される</span>\ndata_structure <span class=\"token operator\">=</span> data_object<span class=\"token punctuation\">.</span>dataType\ndata_component <span class=\"token operator\">=</span> data_structure<span class=\"token punctuation\">.</span>getComponent<span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Get the relative offset, length and data type of the component</span>\noffset <span class=\"token operator\">=</span> data_component<span class=\"token punctuation\">.</span>offset\nlength <span class=\"token operator\">=</span> data_component<span class=\"token punctuation\">.</span>length\ndata_type <span class=\"token operator\">=</span> data_component<span class=\"token punctuation\">.</span>dataType\n\n<span class=\"token comment\"># list 構造体から int 分の値を取得</span>\nbyte_array <span class=\"token operator\">=</span> getBytes<span class=\"token punctuation\">(</span>data_address<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>byte_array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Get the address of the .data section</span>\nstart_address <span class=\"token operator\">=</span> toAddr<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x404000\"</span><span class=\"token punctuation\">)</span>\ndata_section <span class=\"token operator\">=</span> currentProgram<span class=\"token punctuation\">.</span>getMemory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getBlock<span class=\"token punctuation\">(</span>start_address<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># list のアドレス</span>\ndata_address <span class=\"token operator\">=</span> toAddr<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x404060\"</span><span class=\"token punctuation\">)</span>\ndata_object <span class=\"token operator\">=</span> getDataAt<span class=\"token punctuation\">(</span>data_address<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"特定のアドレスに構造体を割り当て値を取得する\" style=\"position:relative;\"><a href=\"#%E7%89%B9%E5%AE%9A%E3%81%AE%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AB%E6%A7%8B%E9%80%A0%E4%BD%93%E3%82%92%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6%E5%80%A4%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\" aria-label=\"特定のアドレスに構造体を割り当て値を取得する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特定のアドレスに構造体を割り当て、値を取得する</h2>\n<p>このスクリプトでは、任意のアドレス範囲のデータを構造体として定義して値を参照することができます。</p>\n<p>以下の問題で使用しました。</p>\n<p>参考：<a href=\"/ctf-amature-2023#csce221-data-structures-and-algorithmsrev\">AmateursCTF 2023 Writeup - CSCE221-Data Structures and Algorithms</a></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># listnode の取得</span>\ndata_type_manager <span class=\"token operator\">=</span> currentProgram<span class=\"token punctuation\">.</span>getDataTypeManager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmy_structure <span class=\"token operator\">=</span> data_type_manager<span class=\"token punctuation\">.</span>getDataType<span class=\"token punctuation\">(</span><span class=\"token string\">\"main.coredump/listnode\"</span><span class=\"token punctuation\">)</span>\nstart_address <span class=\"token operator\">=</span> toAddr<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x405000\"</span><span class=\"token punctuation\">)</span>\ndata_section <span class=\"token operator\">=</span> currentProgram<span class=\"token punctuation\">.</span>getMemory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getBlock<span class=\"token punctuation\">(</span>start_address<span class=\"token punctuation\">)</span>\n\nflag <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\nlistnode_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x4052a0</span>\n\n<span class=\"token comment\"># listnode</span>\ndata_address <span class=\"token operator\">=</span> toAddr<span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>listnode_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndata_object <span class=\"token operator\">=</span> createData<span class=\"token punctuation\">(</span>data_address<span class=\"token punctuation\">,</span> my_structure<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 自作した listnode 構造体が解釈される</span>\ndata_structure <span class=\"token operator\">=</span> data_object<span class=\"token punctuation\">.</span>dataType\ndata_component <span class=\"token operator\">=</span> data_structure<span class=\"token punctuation\">.</span>getComponent<span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Get the relative offset, length and data type of the component</span>\noffset <span class=\"token operator\">=</span> data_component<span class=\"token punctuation\">.</span>offset\nlength <span class=\"token operator\">=</span> data_component<span class=\"token punctuation\">.</span>length\ndata_type <span class=\"token operator\">=</span> data_component<span class=\"token punctuation\">.</span>dataType\n\n<span class=\"token comment\"># listnode 構造体から byte 分の値を取得</span>\nbyte_array <span class=\"token operator\">=</span> getBytes<span class=\"token punctuation\">(</span>data_address<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span>\nflag <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>byte_array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"任意のアドレスレンジのバイトデータをファイルとして保存する\" style=\"position:relative;\"><a href=\"#%E4%BB%BB%E6%84%8F%E3%81%AE%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%83%AC%E3%83%B3%E3%82%B8%E3%81%AE%E3%83%90%E3%82%A4%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A8%E3%81%97%E3%81%A6%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B\" aria-label=\"任意のアドレスレンジのバイトデータをファイルとして保存する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>任意のアドレスレンジのバイトデータをファイルとして保存する</h2>\n<p>暗号化されているデータが埋め込まれているセクションなど、手動でのコピーが面倒な場合に使用するスクリプトです。</p>\n<p>シンプルに任意のアドレス範囲のデータを 1 バイトずつ取得してファイルに書き込みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> ghidra<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>address <span class=\"token keyword\">import</span> Address\n<span class=\"token keyword\">from</span> ghidra<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>mem <span class=\"token keyword\">import</span> MemoryAccessException\n<span class=\"token keyword\">import</span> struct\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save_bytes_to_file</span><span class=\"token punctuation\">(</span>start_address<span class=\"token punctuation\">,</span> end_address<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    currentProgram <span class=\"token operator\">=</span> getCurrentProgram<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    memory <span class=\"token operator\">=</span> currentProgram<span class=\"token punctuation\">.</span>getMemory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    start_addr <span class=\"token operator\">=</span> toAddr<span class=\"token punctuation\">(</span>start_address<span class=\"token punctuation\">)</span>\n    end_addr <span class=\"token operator\">=</span> toAddr<span class=\"token punctuation\">(</span>end_address<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n        address <span class=\"token operator\">=</span> start_addr\n        <span class=\"token keyword\">while</span> address <span class=\"token operator\">&lt;=</span> end_addr<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                byte <span class=\"token operator\">=</span> memory<span class=\"token punctuation\">.</span>getByte<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span>\n                <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> MemoryAccessException <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error reading memory at address:\"</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n\nstart_address <span class=\"token operator\">=</span> <span class=\"token number\">0x403040</span>\nend_address <span class=\"token operator\">=</span> <span class=\"token number\">0x403000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x1ce00</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\nfilename <span class=\"token operator\">=</span> <span class=\"token string\">\"C:\\\\Users\\\\Public\\\\output.bin\"</span>\nsave_bytes_to_file<span class=\"token punctuation\">(</span>start_address<span class=\"token punctuation\">,</span> end_address<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>Ghidra Script を使いこなせるようになるともっとできることが増えるような気がします。</p>\n<p>ただ、Ghidra のデフォルトの Jython はバージョンが古い上に、サンプルとして公開されているスクリプトは圧倒的に Java が多いので、本格的に使うなら Java を勉強する方がいいかもしれません。。</p>","fields":{"slug":"/ghidra-ghidrascript-utils","tagSlugs":["/tag/reversing/","/tag/ghidra/"]},"frontmatter":{"date":"2024-07-15","description":"ユースケース別 Ghidra Script のサンプル集","tags":["Reversing","Ghidra"],"title":"ユースケース別 Ghidra Script のサンプル集","socialImage":{"publicURL":"/static/9da27646267266fe15d51cabfaa57fc2/ghidra-ghidrascript-utils.png"}}}},"pageContext":{"slug":"/ghidra-ghidrascript-utils"}},"staticQueryHashes":["251939775","401334301","825871152"]}