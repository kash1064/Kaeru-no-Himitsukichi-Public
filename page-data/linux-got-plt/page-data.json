{"componentChunkName":"component---src-templates-post-template-js","path":"/linux-got-plt","result":{"data":{"markdownRemark":{"id":"12097b27-69f1-5117-9853-49544e2c77eb","html":"<p>今回は、GOTとPLTの概要についてまとめるとともに実際に検証を行っていきます。</p>\n<p>この記事を書き始めたきっかけとしては、位置独立コード(PIC)について調べていく中でGOTがよくわからなくなってしまったことです。</p>\n<!-- omit in toc -->\n<h2 id=\"もくじ\" style=\"position:relative;\"><a href=\"#%E3%82%82%E3%81%8F%E3%81%98\" aria-label=\"もくじ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>もくじ</h2>\n<ul>\n<li><a href=\"#%E5%85%B1%E6%9C%89%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%A8%E5%8B%95%E7%9A%84%E3%83%AA%E3%83%B3%E3%82%AF\">共有ライブラリと動的リンク</a></li>\n<li><a href=\"#%E5%85%B1%E6%9C%89%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E9%96%A2%E6%95%B0%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%81%AE%E6%B5%81%E3%82%8C\">共有ライブラリ関数呼び出しの流れ</a></li>\n<li><a href=\"#got\">GOT</a></li>\n<li><a href=\"#plt\">PLT</a></li>\n<li>\n<p><a href=\"#got%E3%81%A8plt%E3%81%AE%E5%8B%95%E3%81%8D%E3%82%92%E8%BF%BD%E3%81%86\">GOTとPLTの動きを追う</a></p>\n<ul>\n<li><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A8%E3%83%93%E3%83%AB%E3%83%89\">ソースコードとビルド</a></li>\n<li><a href=\"#%E4%BB%AE%E6%83%B3%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%AE%E5%87%BA%E5%8A%9B\">仮想メモリの出力</a></li>\n<li><a href=\"#call%E5%91%BD%E4%BB%A4\">call命令</a></li>\n<li><a href=\"#%E5%85%B1%E6%9C%89%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E9%96%A2%E6%95%B0%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\">共有ライブラリ関数の呼び出し</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83%E6%9B%B8%E7%B1%8D\">参考書籍</a></li>\n</ul>\n<h2 id=\"共有ライブラリと動的リンク\" style=\"position:relative;\"><a href=\"#%E5%85%B1%E6%9C%89%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%A8%E5%8B%95%E7%9A%84%E3%83%AA%E3%83%B3%E3%82%AF\" aria-label=\"共有ライブラリと動的リンク permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>共有ライブラリと動的リンク</h2>\n<p>多くのELFバイナリではライブラリ関数(あらかじめ定義されているよく使う便利な関数)が動的リンクによってリンクされています。</p>\n<p>動的リンクとは、プログラムの実行に必要なライブラリ関数などの本体を、プログラムの実行時にリンクする仕組みのことです。</p>\n<p>動的リンクと対になる方式としては、必要なライブラリ関数などをすべて1つのプログラムにあらかじめリンクしておく静的リンクがあります。</p>\n<p>ライブラリ関数などのように複数のプログラムが共通して使用する関数やモジュールを動的リンクにすることで、プログラム自体のファイルサイズの削減や、実行時のメモリ使用量を効率化できるといったメリットがあります。</p>\n<p>ELFバイナリがどの共有ライブラリに依存しているかは、<code class=\"language-text\">ldd</code>コマンドで調べることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ldd test.o\n\tlinux-vdso.so.1 <span class=\"token punctuation\">(</span>0x00007ffdb417f000<span class=\"token punctuation\">)</span>\n\tlibc.so.6 <span class=\"token operator\">=</span><span class=\"token operator\">></span> /lib/x86_64-linux-gnu/libc.so.6 <span class=\"token punctuation\">(</span>0x00007f02af5ca000<span class=\"token punctuation\">)</span>\n\t/lib64/ld-linux-x86-64.so.2 <span class=\"token punctuation\">(</span>0x00007f02af7d7000<span class=\"token punctuation\">)</span></code></pre></div>\n<p>参考：<a href=\"https://linuxjm.osdn.jp/html/ld.so/man1/ldd.1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Man page of LDD</a></p>\n<p>この記事では、動的リンクされた共有ライブラリをプログラムの実行時にリンクする仕組みについてまとめます。</p>\n<h2 id=\"共有ライブラリ関数呼び出しの流れ\" style=\"position:relative;\"><a href=\"#%E5%85%B1%E6%9C%89%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E9%96%A2%E6%95%B0%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%81%AE%E6%B5%81%E3%82%8C\" aria-label=\"共有ライブラリ関数呼び出しの流れ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>共有ライブラリ関数呼び出しの流れ</h2>\n<p>ライブラリ関数が動的リンクされたELFバイナリを実行する場合、ライブラリ関数は実際に処理の中で呼び出されるタイミングまでバインドされません。</p>\n<p>このような仕組みは遅延バインドと呼ばれ、PLT(Procedure Linkage Table)によってサポートされます。</p>\n<p>プログラムの実行時に共有ライブラリ関数が呼び出されるとき、最初に呼び出されるアドレスは共有ライブラリ関数の実態ではなく、<code class=\"language-text\">.plt</code>セクションのエントリになります。</p>\n<p>呼び出されたPLTのエントリは、その後GOT(Global Offset Table)と呼ばれる領域にジャンプします。</p>\n<p>参考：<a href=\"https://amzn.to/3zwc6Y6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳解セキュリティコンテスト</a></p>\n<h2 id=\"got\" style=\"position:relative;\"><a href=\"#got\" aria-label=\"got permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GOT</h2>\n<p>GOT(Global Offset Table)はELFファイルとしてコンパイルされたプログラムを正しく実行できるようにするために使用されるコンピュータプログラム（実行可能ファイルおよび共有ライブラリ）メモリのセクションを指します。</p>\n<p>参考：<a href=\"https://en.wikipedia.org/wiki/Global_Offset_Table\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Global Offset Table - Wikipedia</a></p>\n<p>簡潔に言うと、GOTはライブラリ関数のアドレス一覧を保持するための領域です。</p>\n<p>この領域は、プログラムの実行時に使用するライブラリ関数のアドレスが設定されます。</p>\n<p>GOTによて、ライブラリ関数をプロセスメモリ空間の中に再配置することが容易になります。</p>\n<h2 id=\"plt\" style=\"position:relative;\"><a href=\"#plt\" aria-label=\"plt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PLT</h2>\n<p>PLT(Procedure Linkage Table)は、ライブラリ関数を呼び出すための小さなコードの集合です。</p>\n<p>PLTには、GOTが保持するライブラリ関数と同数のコードが配置されています。</p>\n<p>PLTの持つコードの挙動は、GOTに設定されている値にジャンプすることです。</p>\n<p>PLTのコードが呼び出されたとき、GOTにまだ呼び出し先の関数のアドレスが設定されていない場合は、アドレスをGOTに設定してからジャンプを行います。</p>\n<p>参考：<a href=\"https://keichi.dev/post/plt-and-got/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PLTとGOTってなんだっけ · Keichi Takahashi</a></p>\n<h2 id=\"gotとpltの動きを追う\" style=\"position:relative;\"><a href=\"#got%E3%81%A8plt%E3%81%AE%E5%8B%95%E3%81%8D%E3%82%92%E8%BF%BD%E3%81%86\" aria-label=\"gotとpltの動きを追う permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GOTとPLTの動きを追う</h2>\n<p>ここからは、実際にGDBを使ってメモリマップを見ていきます。</p>\n<h3 id=\"ソースコードとビルド\" style=\"position:relative;\"><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A8%E3%83%93%E3%83%AB%E3%83%89\" aria-label=\"ソースコードとビルド permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ソースコードとビルド</h3>\n<p>今回検証に使用するのは以下のコードです。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>次のコマンドでコンパイルし、gdbで起動しておきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gcc -fcf-protection<span class=\"token operator\">=</span>none -no-pie -g test.c -o test.o\ngdb ./test.o</code></pre></div>\n<h3 id=\"仮想メモリの出力\" style=\"position:relative;\"><a href=\"#%E4%BB%AE%E6%83%B3%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%AE%E5%87%BA%E5%8A%9B\" aria-label=\"仮想メモリの出力 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>仮想メモリの出力</h3>\n<p>Linuxには、現在稼働しているプロセスのための疑似ディレクトリとして<code class=\"language-text\">/proc</code>ディレクトリが容易されています。</p>\n<p><code class=\"language-text\">/proc</code>ディレクトリの直下には稼働中のプロセスのPIDに対応した数字のディレクトリがあり、その中にプロセス制御テーブルがマッピングされています。</p>\n<p>参考：<a href=\"http://uralowl.my.coocan.jp/unix/job/ORACLE/oracle/pmap_linux.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">プロセスのメモリマップについて (Linux)</a></p>\n<p>参考：<a href=\"https://stackoverflow.com/questions/1401359/understanding-linux-proc-pid-maps-or-proc-self-maps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">embedded - Understanding Linux /proc/pid/maps or /proc/self/maps - Stack Overflow</a></p>\n<p>今回は、プロセスのメモリマップを確認するため、以下のコマンドを使用しました。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> /proc/<span class=\"token variable\"><span class=\"token variable\">`</span>pidof test.o<span class=\"token variable\">`</span></span>/maps\naddress           \tpermission offset   device inode   \t\t\t\t   pathname\n00400000-00401000 r--p 00000000 fd:00 <span class=\"token number\">786517</span>                             /home/ubuntu/gottest/test.o\n00401000-00402000 r-xp 00001000 fd:00 <span class=\"token number\">786517</span>                             /home/ubuntu/gottest/test.o\n00402000-00403000 r--p 00002000 fd:00 <span class=\"token number\">786517</span>                             /home/ubuntu/gottest/test.o\n00403000-00404000 r--p 00002000 fd:00 <span class=\"token number\">786517</span>                             /home/ubuntu/gottest/test.o\n00404000-00405000 rw-p 00003000 fd:00 <span class=\"token number\">786517</span>                             /home/ubuntu/gottest/test.o\n7ffff7dc3000-7ffff7de8000 r--p 00000000 fd:00 <span class=\"token number\">945235</span>                     /lib/x86_64-linux-gnu/libc-2.31.so\n7ffff7de8000-7ffff7f60000 r-xp 00025000 fd:00 <span class=\"token number\">945235</span>                     /lib/x86_64-linux-gnu/libc-2.31.so\n7ffff7f60000-7ffff7faa000 r--p 0019d000 fd:00 <span class=\"token number\">945235</span>                     /lib/x86_64-linux-gnu/libc-2.31.so\n7ffff7faa000-7ffff7fab000 ---p 001e7000 fd:00 <span class=\"token number\">945235</span>                     /lib/x86_64-linux-gnu/libc-2.31.so\n7ffff7fab000-7ffff7fae000 r--p 001e7000 fd:00 <span class=\"token number\">945235</span>                     /lib/x86_64-linux-gnu/libc-2.31.so\n7ffff7fae000-7ffff7fb1000 rw-p 001ea000 fd:00 <span class=\"token number\">945235</span>                     /lib/x86_64-linux-gnu/libc-2.31.so\n7ffff7fb1000-7ffff7fb7000 rw-p 00000000 00:00 <span class=\"token number\">0</span> \n7ffff7fcb000-7ffff7fce000 r--p 00000000 00:00 <span class=\"token number\">0</span>                          <span class=\"token punctuation\">[</span>vvar<span class=\"token punctuation\">]</span>\n7ffff7fce000-7ffff7fcf000 r-xp 00000000 00:00 <span class=\"token number\">0</span>                          <span class=\"token punctuation\">[</span>vdso<span class=\"token punctuation\">]</span>\n7ffff7fcf000-7ffff7fd0000 r--p 00000000 fd:00 <span class=\"token number\">945231</span>                     /lib/x86_64-linux-gnu/ld-2.31.so\n7ffff7fd0000-7ffff7ff3000 r-xp 00001000 fd:00 <span class=\"token number\">945231</span>                     /lib/x86_64-linux-gnu/ld-2.31.so\n7ffff7ff3000-7ffff7ffb000 r--p 00024000 fd:00 <span class=\"token number\">945231</span>                     /lib/x86_64-linux-gnu/ld-2.31.so\n7ffff7ffc000-7ffff7ffd000 r--p 0002c000 fd:00 <span class=\"token number\">945231</span>                     /lib/x86_64-linux-gnu/ld-2.31.so\n7ffff7ffd000-7ffff7ffe000 rw-p 0002d000 fd:00 <span class=\"token number\">945231</span>                     /lib/x86_64-linux-gnu/ld-2.31.so\n7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 <span class=\"token number\">0</span> \n7ffffffde000-7ffffffff000 rw-p 00000000 00:00 <span class=\"token number\">0</span>                          <span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">]</span>\nffffffffff600000-ffffffffff601000 --xp 00000000 00:00 <span class=\"token number\">0</span>                  <span class=\"token punctuation\">[</span>vsyscall<span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">maps</code>は、プロセスまたはスレッド内の連続する仮想メモリの領域を示しています。</p>\n<p><code class=\"language-text\">address</code>にはプロセスのアドレス空間内の領域の開始アドレスと終了アドレスが、<code class=\"language-text\">permission</code>にはその領域の権限が記録されています。</p>\n<p>上記の結果から、この<code class=\"language-text\">/lib/x86_64-linux-gnu/libc-2.31.so</code>と<code class=\"language-text\">/lib/x86_64-linux-gnu/ld-2.31.so</code>の2つの共有ライブラリが使用されていることがわかります。</p>\n<p>ここで、共有ライブラリ<code class=\"language-text\">/lib/x86_64-linux-gnu/ld-2.31.so</code>は<code class=\"language-text\">7ffff7fcf000</code>にマッピングされていますが、これは固定されたアドレスではありません。</p>\n<p>共有ライブラリが展開されるメモリアドレスは、プログラムの実行時に決定され、場合によっては異なるアドレスに展開されることもあります。</p>\n<p>ここで、プログラムの実行時に、共有ライブラリが実際にどのメモリアドレスに展開されたのかを調べて呼び出すための仕組みがPLTとGOTです。</p>\n<h3 id=\"call命令\" style=\"position:relative;\"><a href=\"#call%E5%91%BD%E4%BB%A4\" aria-label=\"call命令 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>call命令</h3>\n<p>アセンブリソースから、関数を呼び出す<code class=\"language-text\">call</code>命令の箇所を抜粋しました。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ disas main\nDump of assembler code <span class=\"token keyword\">for</span> <span class=\"token keyword\">function</span> main:\n   0x000000000040113e <span class=\"token operator\">&lt;</span>+1<span class=\"token operator\"><span class=\"token file-descriptor important\">3</span>></span>:\tcall   0x401126 <span class=\"token operator\">&lt;</span>test<span class=\"token operator\">></span>\n   0x0000000000401146 <span class=\"token operator\">&lt;</span>+2<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>:\tcall   0x401030 <span class=\"token operator\">&lt;</span>rand@plt<span class=\"token operator\">></span>\n   0x000000000040114e <span class=\"token operator\">&lt;</span>+2<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span>:\tcall   0x401030 <span class=\"token operator\">&lt;</span>rand@plt<span class=\"token operator\">></span>\nEnd of assembler dump.</code></pre></div>\n<p><code class=\"language-text\">call</code>命令は以下の2つの処理を組み合わせた処理を実行する命令です。</p>\n<ul>\n<li><code class=\"language-text\">call</code>命令の次のアドレス(関数がreturnした後に実行する命令)をスタックにプッシュする</li>\n<li>呼び出し先の関数のアドレスにジャンプする</li>\n</ul>\n<p>参考：<a href=\"https://vanya.jp.net/os/x86call/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">x86アセンブリ言語での関数コール</a></p>\n<p>ここで、2つの<code class=\"language-text\">call</code>命令のアセンブリをそれぞれ出力してみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 0x401126 &lt;test></span>\n$ disas 0x401126\nDump of assembler code <span class=\"token keyword\">for</span> <span class=\"token keyword\">function</span> test:\n   0x0000000000401126 <span class=\"token operator\">&lt;</span>+<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>:\tpush   rbp\n   0x0000000000401127 <span class=\"token operator\">&lt;</span>+<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>:\tmov    rbp,rsp\n   0x000000000040112a <span class=\"token operator\">&lt;</span>+<span class=\"token operator\"><span class=\"token file-descriptor important\">4</span>></span>:\tmov    eax,0x0\n   0x000000000040112f <span class=\"token operator\">&lt;</span>+<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span>:\tpop    rbp\n   0x0000000000401130 <span class=\"token operator\">&lt;</span>+1<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>:\tret    \nEnd of assembler dump.</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 0x401030 &lt;rand@plt></span>\n$ disas 0x401030\nDump of assembler code <span class=\"token keyword\">for</span> <span class=\"token keyword\">function</span> rand@plt:\n   0x0000000000401030 <span class=\"token operator\">&lt;</span>+<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>:\tjmp    QWORD PTR <span class=\"token punctuation\">[</span>rip+0x2fe2<span class=\"token punctuation\">]</span>        <span class=\"token comment\"># 0x404018 &lt;rand@got.plt></span>\n   0x0000000000401036 <span class=\"token operator\">&lt;</span>+<span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>></span>:\tpush   0x0\n   0x000000000040103b <span class=\"token operator\">&lt;</span>+1<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>:\tjmp    0x401020\nEnd of assembler dump.</code></pre></div>\n<p>これを見比べたときに、ユーザ関数の<code class=\"language-text\">test</code>は直接関数が<code class=\"language-text\">call</code>されているのに対して、<code class=\"language-text\">rand</code>を呼び出す際は<code class=\"language-text\">rand@plt</code>が呼び出されていることがわかります。</p>\n<p>そして、<code class=\"language-text\">rand@plt</code>が呼び出された場合は最初の<code class=\"language-text\">JMP</code>命令で<code class=\"language-text\">rand@got.plt</code>が呼び出されます。</p>\n<p>これはまだGOTに呼び出し先のアドレスが設定されていないためです。</p>\n<h3 id=\"共有ライブラリ関数の呼び出し\" style=\"position:relative;\"><a href=\"#%E5%85%B1%E6%9C%89%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E9%96%A2%E6%95%B0%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\" aria-label=\"共有ライブラリ関数の呼び出し permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>共有ライブラリ関数の呼び出し</h3>\n<p>次に、1回目と2回目の<code class=\"language-text\">rand</code>関数の呼び出し点にそれぞれブレークポイントを設定して、PLTからGOTを経て共有ライブラリ関数のバインドが行われる前後のGOTの変化を見ていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ b *0x401146\n$ b *0x40114e\n$ run</code></pre></div>\n<p>これで、1回目の<code class=\"language-text\">rand</code>関数の呼び出し点に到達しました。</p>\n<p>ここで、<code class=\"language-text\">rand@plt</code>のディスアセンブル結果から、対応するGOTのアドレスは<code class=\"language-text\">0x404018</code>であることがわかっています。</p>\n<p>つまり、最終的に<code class=\"language-text\">0x404018</code>に<code class=\"language-text\">rand</code>関数本体のアドレスが格納される想定になります。</p>\n<p>しかし、現時点ではまだ<code class=\"language-text\">rand</code>関数はプログラムの実行時に一度も呼び出されていないため、GOTには<code class=\"language-text\">rand@plt+6</code>のアドレスが格納されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ telescope 0x404018\n0000<span class=\"token operator\">|</span> 0x404018 --<span class=\"token operator\">></span> 0x401036 <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>rand@plt+<span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>></span>:\tpush   0x0<span class=\"token punctuation\">)</span></code></pre></div>\n<p>参考：<a href=\"https://gef.readthedocs.io/en/master/commands/dereference/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Command dereference - GEF - GDB Enhanced Features documentation</a></p>\n<p><code class=\"language-text\">rand@plt+6</code>のアドレスの処理は、スタックに値(0x0)を積んだ後に<code class=\"language-text\">0x401020</code>へのジャンプを行っています。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ disas 0x401030\nDump of assembler code <span class=\"token keyword\">for</span> <span class=\"token keyword\">function</span> rand@plt:\n   0x0000000000401030 <span class=\"token operator\">&lt;</span>+<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>:\tjmp    QWORD PTR <span class=\"token punctuation\">[</span>rip+0x2fe2<span class=\"token punctuation\">]</span>        <span class=\"token comment\"># 0x404018 &lt;rand@got.plt></span>\n   0x0000000000401036 <span class=\"token operator\">&lt;</span>+<span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>></span>:\tpush   0x0\n   0x000000000040103b <span class=\"token operator\">&lt;</span>+1<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>:\tjmp    0x401020\nEnd of assembler dump.</code></pre></div>\n<p>この後の処理は、以下のようにさらにスタックに値を格納した後、<code class=\"language-text\">0x404010</code>に格納されているアドレスにジャンプする処理が続きます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ x/16 0x401020\n   0x401020:\tpush   QWORD PTR <span class=\"token punctuation\">[</span>rip+0x2fe2<span class=\"token punctuation\">]</span>        <span class=\"token comment\"># 0x404008</span>\n   0x401026:\tjmp    QWORD PTR <span class=\"token punctuation\">[</span>rip+0x2fe4<span class=\"token punctuation\">]</span>        <span class=\"token comment\"># 0x404010</span></code></pre></div>\n<p><code class=\"language-text\">0x401036</code>にブレークポイントを設定し、その後の処理を追ってみると次のようになりました。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">=</span><span class=\"token operator\">></span> 0x401026:\tjmp    QWORD PTR <span class=\"token punctuation\">[</span>rip+0x2fe4<span class=\"token punctuation\">]</span>        <span class=\"token comment\"># 0x404010</span>\n <span class=\"token operator\">|</span> 0x40102c:\tnop    DWORD PTR <span class=\"token punctuation\">[</span>rax+0x0<span class=\"token punctuation\">]</span>\n <span class=\"token operator\">|</span> 0x401030 <span class=\"token operator\">&lt;</span>rand@plt<span class=\"token operator\">></span>:\tjmp    QWORD PTR <span class=\"token punctuation\">[</span>rip+0x2fe2<span class=\"token punctuation\">]</span>        <span class=\"token comment\"># 0x404018 &lt;rand@got.plt></span>\n <span class=\"token operator\">|</span> 0x401036 <span class=\"token operator\">&lt;</span>rand@plt+<span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>></span>:\tpush   0x0\n <span class=\"token operator\">|</span> 0x40103b <span class=\"token operator\">&lt;</span>rand@plt+1<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>:\tjmp    0x401020\n <span class=\"token operator\">|</span>-<span class=\"token operator\">></span>   0x7ffff7fe7bb0:\tendbr64 \n       0x7ffff7fe7bb4:\tpush   rbx\n       0x7ffff7fe7bb5:\tmov    rbx,rsp\n       0x7ffff7fe7bb8:\tand    rsp,0xffffffffffffffc0\n       0x7ffff7fe7bbc:\tsub    rsp,QWORD PTR <span class=\"token punctuation\">[</span>rip+0x14b45<span class=\"token punctuation\">]</span>        <span class=\"token comment\"># 0x7ffff7ffc708 &lt;_rtld_global_ro+232></span></code></pre></div>\n<p>ここで呼び出している関数は<code class=\"language-text\">_dl_runtime_resolve</code>です。</p>\n<p>詳しくは以下が参考になりました。</p>\n<p>参考：<a href=\"https://syst3mfailure.io/ret2dl_resolve\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ret2dl_resolve x64</a></p>\n<p>この関数では、呼び出し先の<code class=\"language-text\">rand</code>関数のアドレスを解決して、<code class=\"language-text\">rand</code>関数を呼び出します。</p>\n<p>この際にGOTが更新されるため、次回以降の<code class=\"language-text\">rand</code>関数の呼び出し時には、解決された<code class=\"language-text\">rand</code>関数のアドレスがGOTから直接呼び出されます。</p>\n<p>実際に2回目の<code class=\"language-text\">rand</code>関数の呼び出し時点で停止させ、先ほどと同じように<code class=\"language-text\">rand@plt</code>が参照するGOTの中身を確認すると、<code class=\"language-text\">rand</code>関数本体のアドレスが格納されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ telescope 0x404018\n0000<span class=\"token operator\">|</span> 0x404018 --<span class=\"token operator\">></span> 0x7ffff7e0de90 <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>rand<span class=\"token operator\">></span>:\tendbr64<span class=\"token punctuation\">)</span></code></pre></div>\n<p>そのため、2回目の実行時には<code class=\"language-text\">_dl_runtime_resolve</code>は呼び出されず、直接<code class=\"language-text\">rand</code>関数が実行されます。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>UNIXのコードを読んでいたはずが、気づいたらGOTとPLTのことを調べてました。</p>\n<p><a href=\"https://amzn.to/3zwc6Y6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳解セキュリティコンテスト</a>読むともっと詳しく書いてあったので、GOT Overwriteなども試しつつもう少し深掘りしてみようと思います。</p>\n<h2 id=\"参考書籍\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E6%9B%B8%E7%B1%8D\" aria-label=\"参考書籍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考書籍</h2>\n<ul>\n<li><a href=\"https://amzn.to/3zwc6Y6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳解セキュリティコンテスト</a></li>\n<li><a href=\"https://amzn.to/3n114Fn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Debug Hacks -デバッグを極めるテクニック&#x26;ツール</a></li>\n</ul>","fields":{"slug":"/linux-got-plt","tagSlugs":["/tag/linux/","/tag/os/","/tag/kernel/"]},"frontmatter":{"date":"2022-01-06","description":"GOTとPLTの概要についてまとめるとともに実際に検証してみた内容をまとめています。","tags":["Linux","OS","Kernel"],"title":"GOT/PLTを経由したライブラリ関数呼び出しの流れを追う","socialImage":{"publicURL":"/static/a4f7c9e2f649a8b7bec38cf6b030aece/linux-got-plt.png"}}}},"pageContext":{"slug":"/linux-got-plt"}},"staticQueryHashes":["251939775","401334301","825871152"]}