{"componentChunkName":"component---src-templates-post-template-js","path":"/linux-memory-protect-gdt-ldt","result":{"data":{"markdownRemark":{"id":"fada2128-2453-5720-bd4f-c6a219458838","html":"<p>UNIXのソースコードを読む中で、起動時のプロテクトモードへの移行プロセスが気になったので調べたことをまとめました。</p>\n<p>技術的に誤りが無いように努めていますが、もし万が一誤りがあればご指摘いただけると助かります。</p>\n<p>今回は、Intelのx86CPUをターゲットとしています。</p>\n<!-- omit in toc -->\n<h2 id=\"もくじ\" style=\"position:relative;\"><a href=\"#%E3%82%82%E3%81%8F%E3%81%98\" aria-label=\"もくじ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>もくじ</h2>\n<ul>\n<li>\n<p><a href=\"#%E3%83%AA%E3%82%A2%E3%83%AB%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A8%E3%83%97%E3%83%AD%E3%83%86%E3%82%AF%E3%83%88%E3%83%A2%E3%83%BC%E3%83%89\">リアルモードとプロテクトモード</a></p>\n<ul>\n<li><a href=\"#%E3%83%AA%E3%82%A2%E3%83%AB%E3%83%A2%E3%83%BC%E3%83%89\">リアルモード</a></li>\n<li><a href=\"#%E3%83%97%E3%83%AD%E3%83%86%E3%82%AF%E3%83%88%E3%83%A2%E3%83%BC%E3%83%89\">プロテクトモード</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%97%E3%83%AD%E3%83%86%E3%82%AF%E3%83%88%E3%83%A2%E3%83%BC%E3%83%89%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%A1%E3%83%A2%E3%83%AA%E4%BF%9D%E8%AD%B7\">プロテクトモードにおけるメモリ保護</a></li>\n<li>\n<p><a href=\"#%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%BF%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">ディスクリプタテーブルについて</a></p>\n<ul>\n<li><a href=\"#gdt%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%BF%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB\">GDT(グローバルディスクリプタテーブル)</a></li>\n<li><a href=\"#ldt%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%BF%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB\">LDT(ローカルディスクリプタテーブル)</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83%E6%9B%B8%E7%B1%8D\">参考書籍</a></li>\n</ul>\n<h2 id=\"リアルモードとプロテクトモード\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%82%A2%E3%83%AB%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A8%E3%83%97%E3%83%AD%E3%83%86%E3%82%AF%E3%83%88%E3%83%A2%E3%83%BC%E3%83%89\" aria-label=\"リアルモードとプロテクトモード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リアルモードとプロテクトモード</h2>\n<h3 id=\"リアルモード\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%82%A2%E3%83%AB%E3%83%A2%E3%83%BC%E3%83%89\" aria-label=\"リアルモード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リアルモード</h3>\n<p>x86CPUにおけるリアルモードとは、<code class=\"language-text\">Intel 8086</code>CPU互換のための動作モードです。</p>\n<p>x86の場合は起動時の動作モードとなり、BIOSもリアルモードで動作します。</p>\n<p><code class=\"language-text\">Intel 8086</code>CPU互換のため、リアルモードはすべてのレジスタのアドレス長が16bitに制限されます。</p>\n<p>参考：<a href=\"https://ja.wikipedia.org/wiki/%E3%83%AA%E3%82%A2%E3%83%AB%E3%83%A2%E3%83%BC%E3%83%89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">リアルモード - Wikipedia</a></p>\n<p>メモリアドレスを参照する場合はセグメントレジスタの値を使用して、20bitのアドレス空間にアクセスすることができます。</p>\n<p>また、A20 Lineを有効化することで21bitのアドレス空間を使用することができるようになります。</p>\n<p>リアルモードでは、後述するプロテクトモードに存在する、ハードウェアベースのメモリ保護や仮想メモリは存在しません。</p>\n<p>参考：<a href=\"https://wiki.osdev.org/Real_Mode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Real Mode - OSDev Wiki</a></p>\n<h3 id=\"プロテクトモード\" style=\"position:relative;\"><a href=\"#%E3%83%97%E3%83%AD%E3%83%86%E3%82%AF%E3%83%88%E3%83%A2%E3%83%BC%E3%83%89\" aria-label=\"プロテクトモード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プロテクトモード</h3>\n<p>プロテクトモードは、x86CPUにおいてメモリ空間が32bitに拡張され、メモリやI/Oの保護が可能となる動作モードです。</p>\n<p>階層的な特権管理(リングプロテクション)とタスク間のメモリ保護が可能です。</p>\n<p>参考：<a href=\"https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%83%86%E3%82%AF%E3%83%88%E3%83%A2%E3%83%BC%E3%83%89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">プロテクトモード - Wikipedia</a></p>\n<p>参考：<a href=\"https://wiki.osdev.org/Protected_Mode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Protected Mode - OSDev Wiki</a></p>\n<p>前述した通り、x86CPUにおいてBIOSはリアルモードで動作しているため、プロテクトモード移行後はBIOS割込みを使用できなくなります。</p>\n<p>プロテクトモードにおけるメモリ保護の仕組みについては後述します。</p>\n<h2 id=\"プロテクトモードにおけるメモリ保護\" style=\"position:relative;\"><a href=\"#%E3%83%97%E3%83%AD%E3%83%86%E3%82%AF%E3%83%88%E3%83%A2%E3%83%BC%E3%83%89%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%A1%E3%83%A2%E3%83%AA%E4%BF%9D%E8%AD%B7\" aria-label=\"プロテクトモードにおけるメモリ保護 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プロテクトモードにおけるメモリ保護</h2>\n<p>プロテクトモードでは、プログラムに対して参照可能なメモリ領域を定義する必要があります。これはカーネルプログラムにおいても同様です。</p>\n<p>まず、x86CPUはプログラムやデータをセグメントというメモリ内の連続した領域の単位で扱います。</p>\n<p>セグメントの単位は64KBか4GBの2種類があります。</p>\n<p>プロテクトモードにおけるメモリ保護では、メモリ領域の開始点とサイズ、そのメモリ領域の読み/書き/実行権限などをセグメントディスクリプタとよび、ディスクリプタテーブルによって管理します。</p>\n<p>プロテクトモードでプログラムがメモリを参照する場合、DSレジスタは直接メモリアドレスの値を指しません。</p>\n<p>その代わり、DSレジスタはディスクリプタテーブルを参照し、セグメントの情報を取得します。</p>\n<p>この仕組みによって、プログラムが自由なメモリ領域を参照するためにはディスクリプタテーブルの書き換えが必須となります。</p>\n<p>しかし、ディスクリプタテーブルはプログラムから書き換えられないようになっているため、結果としてプログラムはあらかじめ決められたメモリ領域以外を参照できず、メモリの保護が実現されます。</p>\n<p>参考：<a href=\"https://amzn.to/3JVSphh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Windowsはなぜ動くのか</a></p>\n<p>参考：<a href=\"https://ascii.jp/elem/000/000/649/649680/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASCII.jp：Windowsのメモリー管理をx86の仕組みから読み解く (1/4)</a></p>\n<h2 id=\"ディスクリプタテーブルについて\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%BF%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"ディスクリプタテーブルについて permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ディスクリプタテーブルについて</h2>\n<p>ディスクリプタテーブルには、GDT(グローバルディスクリプタテーブル)とLDT(ローカルディスクリプタテーブル)の2種類が存在します。</p>\n<h3 id=\"gdtグローバルディスクリプタテーブル\" style=\"position:relative;\"><a href=\"#gdt%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%BF%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB\" aria-label=\"gdtグローバルディスクリプタテーブル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GDT(グローバルディスクリプタテーブル)</h3>\n<p>GDTは、通常システムに1つだけ定義されるディスクリプタテーブルです。</p>\n<p>GDTでは複数のLDTが管理されます。</p>\n<p>x86CPUには、GDTの先頭アドレスを指すためのGDTRと呼ばれるレジスタが存在します。</p>\n<p>参考：<a href=\"https://en.wikipedia.org/wiki/Global_Descriptor_Table\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Global Descriptor Table - Wikipedia</a></p>\n<p>参考：<a href=\"https://wiki.osdev.org/Global_Descriptor_Table\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Global Descriptor Table - OSDev Wiki</a></p>\n<h3 id=\"ldtローカルディスクリプタテーブル\" style=\"position:relative;\"><a href=\"#ldt%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%82%BF%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB\" aria-label=\"ldtローカルディスクリプタテーブル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LDT(ローカルディスクリプタテーブル)</h3>\n<p>LDTはプログラムごとに作成されるディスクリプタテーブルです。</p>\n<p>x86CPUでは、プログラムはディスクリプタテーブルで定義されたアドレス以外の領域にはアクセスできません。</p>\n<p>そのため、プログラムごとに競合しないディスクリプタテーブルをOSが管理することによって、各プログラムが互いのメモリ領域を参照することを防ぎ、メモリ保護を実現することができます。</p>\n<p>x86CPUには、GDTRと同様に、現在使用しているLDTの先頭アドレスを指定するためのレジスタとしてLDTRが用意されています。</p>\n<p>プログラムがセグメントレジスタに値をセットしようとしたとき、CPUはLDTRを参照し、プログラムがアクセスしようとしているアドレスの参照と、アクセス可否の検証を行います。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>x86CPUにおけるプログラム実行時の流れを整理すると、まずプログラムが実行状態に切り替わるとき、CPUはGDTRから参照したGDTより、実行対象のLDTのインデックスを特定して、LDTRに格納しておきます。</p>\n<p>プログラムが特定のセグメントに対して参照を要求した場合、CPUはLDTRからLDTを参照して、参照先のアドレスの取得と参照可否の検証を行います。</p>\n<p>この一連の処理によって、プログラムはあらかじめ定義されたメモリ領域以外を参照することができず、メモリ保護が実現されます。</p>\n<h2 id=\"参考書籍\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E6%9B%B8%E7%B1%8D\" aria-label=\"参考書籍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考書籍</h2>\n<ul>\n<li><a href=\"https://amzn.to/3JVSphh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Windowsはなぜ動くのか</a></li>\n<li><a href=\"https://amzn.to/3qZSCY7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">30日でできる! OS自作入門</a></li>\n<li><a href=\"https://amzn.to/3qXYsZX\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ゼロからのOS自作入門</a></li>\n<li><a href=\"https://amzn.to/3JRUdI2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作って理解するOS x86系コンピュータを動かす理論と実装</a></li>\n</ul>","fields":{"slug":"/linux-memory-protect-gdt-ldt","tagSlugs":["/tag/linux/","/tag/os/","/tag/kernel/"]},"frontmatter":{"date":"2022-01-09","description":"UNIXのソースコードを読む中で、起動時のプロテクトモードへの移行プロセスが気になったので調べたことをまとめました。","tags":["Linux","OS","Kernel"],"title":"x86CPUのメモリ保護機構に関するメモ書き(GDTとLDT)","socialImage":{"publicURL":"/static/93ee63f2a992cec8ea2a833117345df4/linux-memory-protect-gdt-ldt.png"}}}},"pageContext":{"slug":"/linux-memory-protect-gdt-ldt"}},"staticQueryHashes":["251939775","401334301","825871152"]}