{"componentChunkName":"component---src-templates-post-template-js","path":"/powershell-get-http-response","result":{"data":{"markdownRemark":{"id":"94da5735-fef1-5d98-8083-946963da997e","html":"<h2 id=\"powershellとnet-framework\" style=\"position:relative;\"><a href=\"#powershell%E3%81%A8net-framework\" aria-label=\"powershellとnet framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PowerShellと.NET Framework</h2>\n<p>PowerShellは、OSSで開発が進んでおり、Windows、Linux、MacOSで動作するパワフルなシェルであり、オブジェクト指向言語として設計されたスクリプト言語です。</p>\n<p>PowerShellは.NET Frameworkを基盤としています。<br>\nBashなどでいうところのコマンドに相当する命令は、コマンドレットと呼ばれていますが、その実態は.NET Frameworkオブジェクトです。</p>\n<p>Linuxなどで使用されるシェルと同様に、パイプを用いた処理結果の受け渡しが可能ですが、渡される情報は、テキストではなく.NET Frameworkのオブジェクトです。<br>\nそのため、柔軟でパワフルな処理を実現できるというわけです。</p>\n<p>次の項では、実際にPowerShellから.NET Frameworkのオブジェクトを読み込んでいきます。</p>\n<h2 id=\"systemnetwebclientを参照する\" style=\"position:relative;\"><a href=\"#systemnetwebclient%E3%82%92%E5%8F%82%E7%85%A7%E3%81%99%E3%82%8B\" aria-label=\"systemnetwebclientを参照する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.Net.WebClientを参照する</h2>\n<p>例えば、PowerShellで以下のスクリプトを実行するだけで、$contentという変数には、指定したURLのHTTPレスポンスが格納されるというわけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Add-Type</span> <span class=\"token operator\">-</span>AssemblyName System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http\n<span class=\"token variable\">$webClient</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>HttpClient\n<span class=\"token variable\">$content</span> = <span class=\"token variable\">$webClient</span><span class=\"token punctuation\">.</span>GetAsync<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://kashiwaba-yuki.com\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>具体的には、まず.NET Frameworkクラスを定義することができるAdd-Typeコマンドレットを用いて、System.Net.Httpクラスを参照します。<br>\n次に、$webClientにSystem.Net.Httpクラスのインスタンスを格納し、GetAsyncメソッドを用いて、指定したURLのHTTPレスポンスを取得しています。</p>\n<p>この$contentを実際に出力してみると、以下のような結果が確認できました。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$content\n\nResult                 : StatusCode: 200, ReasonPhrase: 'OK', Version: 1.1, Content: System.Net.Http.StreamContent, Headers:\n                         {\n                           Transfer-Encoding: chunked\n                           Connection: keep-alive\n                           Link: https://kashiwaba-yuki.com/wp-json/; rel=\"https://api.w.org/\"\n                           Vary: Range\n                           Vary: Accept-Encoding\n                           X-Cache: MISS\n                           Date: Wed, 01 Jul 2020 07:38:37 GMT\n                           Server: Apache\n                           X-Powered-By: PHP/7.4.4\n                           Content-Type: text/html; charset=UTF-8\n                         }\nId                     : 365\nException              :\nStatus                 : RanToCompletion\nIsCanceled             : False\nIsCompleted            : True\nCreationOptions        : None\nAsyncState             :\nIsFaulted              : False\nAsyncWaitHandle        : System.Threading.ManualResetEvent\nCompletedSynchronously : False</code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>というわけで、PowerShellでNET Frameworkのオブジェクトを参照できることについてまとめました。</p>\n<p>.NET Frameworkのオブジェクトを参照できるということは、極端な話C#でできることってPowerShellでも実装できちゃう、って話ですね。<br>\nPowerShellからC#プログラムを呼び出せるみたいなので、全部をPowerShellで書く必要はないかもしれませんが…。</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/ja-jp/dotnet/api/system.net.webclient?view=netcore-3.1\" target=\"_blank\" rel=\"noopener noreferrer\">WebClient クラス (System.Net) | Microsoft Docs</a></li>\n<li><a href=\"https://forsenergy.com/ja-jp/windowspowershellhelp/html/7c6ad475-d556-436e-841b-7e618f888644.htm\" target=\"_blank\" rel=\"noopener noreferrer\">Add-Type</a></li>\n</ul>","fields":{"slug":"/powershell-get-http-response","tagSlugs":["/tag/power-shell/","/tag/windows/"]},"frontmatter":{"date":"2020-07-01","description":"PowerShellから.NET Frameworkのオブジェクトを参照する方法についてまとめます。","tags":["PowerShell","Windows"],"title":"PowerShellで.NET Frameworkオブジェクトを参照してHTTPレスポンスを取得","socialImage":{"publicURL":"/static/dc4d8b7f8795f3c3d3489d9957d155f2/no-image.png"}}}},"pageContext":{"slug":"/powershell-get-http-response"}},"staticQueryHashes":["251939775","401334301","825871152"]}