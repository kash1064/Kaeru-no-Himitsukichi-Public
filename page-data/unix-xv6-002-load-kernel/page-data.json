{"componentChunkName":"component---src-templates-post-template-js","path":"/unix-xv6-002-load-kernel","result":{"data":{"markdownRemark":{"id":"a4c64bae-1d88-5299-8393-1192b0666ec5","html":"<p><a href=\"https://amzn.to/3q8TU3K\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">はじめてのOSコードリーディング ~UNIX V6で学ぶカーネルのしくみ</a>にインスパイアされて<a href=\"https://github.com/mit-pdos/xv6-public\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xv6 OS</a>を読んでます。</p>\n<p>リバースエンジニアリングに強くなりたいのと、カーネルとかOSに詳しくなりたいと思っています。</p>\n<p><a href=\"https://amzn.to/3I6fkVt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳解 Linuxカーネル</a>が結構重かったので、もう少し軽めのところから始めたいと思っていたところ、UNIX V6というOSがトータルで1万行くらいのコード量で、人類でもギリギリ理解できるということを知り、興味を持ちました。</p>\n<p>ただ、UNIX V6自体はx86CPUでは動作しないため、基本的には、UNIXv6をX86アーキテクチャで動くようにした<a href=\"https://github.com/mit-pdos/xv6-public\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xv6 OS</a>のリポジトリをForkした<a href=\"https://github.com/kash1064/xv6-public\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kash1064/xv6-public: xv6 OS</a>のソースコードを読んでいくことにしました。</p>\n<p><a href=\"/unix-xv6-001-bootstrap\">前回</a>に引き続きxv6OSのソースコードを読んでいきます。</p>\n<p>前回の記事では、xv6OSのブートストラップのコードを読んで、カーネル本体をロードする手前まで追っていきました。</p>\n<p>今回は実際に読み込まれるカーネルの動きを追っていきます。</p>\n<!-- omit in toc -->\n<h2 id=\"もくじ\" style=\"position:relative;\"><a href=\"#%E3%82%82%E3%81%8F%E3%81%98\" aria-label=\"もくじ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>もくじ</h2>\n<ul>\n<li><a href=\"#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%81%AE%E3%83%AD%E3%83%BC%E3%83%89\">カーネルのロード</a></li>\n<li>\n<p><a href=\"#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89\">カーネルプログラムのビルド</a></p>\n<ul>\n<li><a href=\"#%E3%83%AA%E3%83%B3%E3%82%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88\">リンカスクリプト</a></li>\n<li><a href=\"#%E3%83%AA%E3%83%B3%E3%82%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E6%A7%8B%E9%80%A0\">リンカスクリプトの構造</a></li>\n<li><a href=\"#%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E5%AE%9A%E7%BE%A9\">エントリポイントの定義</a></li>\n<li><a href=\"#sectionstext%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9\">SECTIONS：textセクションの定義</a></li>\n<li><a href=\"#sectionsrodata%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9\">SECTIONS：rodataセクションの定義</a></li>\n<li><a href=\"#sectionsstabstabstr%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9\">SECTIONS：stab,stabstrセクションの定義</a></li>\n<li><a href=\"#sectionsdata%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9\">SECTIONS：dataセクションの定義</a></li>\n<li><a href=\"#sectionsbss%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9\">SECTIONS：bssセクションの定義</a></li>\n<li><a href=\"#sectionsdiscard\">SECTIONS：DISCARD</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%81%AE%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\">カーネルのエントリポイント</a></p>\n<ul>\n<li><a href=\"#%E3%83%9E%E3%83%AB%E3%83%81%E3%83%96%E3%83%BC%E3%83%88%E3%83%98%E3%83%83%E3%83%80\">マルチブートヘッダ</a></li>\n<li><a href=\"#%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E7%89%A9%E7%90%86%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E5%AE%9A%E7%BE%A9\">エントリポイントの物理アドレスを定義</a></li>\n<li><a href=\"#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%81%AE%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E3%83%AD%E3%83%BC%E3%83%89\">カーネルのエントリポイントのロード</a></li>\n<li><a href=\"#%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%A8%E3%81%AF\">ページングとは</a></li>\n<li><a href=\"#%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%AE%E8%A8%AD%E5%AE%9A\">スタックポインタの設定</a></li>\n<li><a href=\"#main%E9%96%A2%E6%95%B0%E3%81%AB%E7%A7%BB%E8%A1%8C\">main関数に移行</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83%E6%9B%B8%E7%B1%8D\">参考書籍</a></li>\n</ul>\n<h2 id=\"カーネルのロード\" style=\"position:relative;\"><a href=\"#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%81%AE%E3%83%AD%E3%83%BC%E3%83%89\" aria-label=\"カーネルのロード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>カーネルのロード</h2>\n<p>ブートストラップの中でカーネルのロードを行っていた箇所を振り返っておきます。</p>\n<p>カーネルの読み込みは、以下のようにメモリの<code class=\"language-text\">0x10000</code>番地に読み込まれました。</p>\n<p>その後、プログラムヘッダがロードされ、<code class=\"language-text\">entry()</code>関数が呼び出されてカーネルに処理が移行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">bootmain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elfhdr</span> <span class=\"token operator\">*</span>elf<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proghdr</span> <span class=\"token operator\">*</span>ph<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>eph<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  uchar<span class=\"token operator\">*</span> pa<span class=\"token punctuation\">;</span>\n\n  elf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">elfhdr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// scratch space</span>\n\n  <span class=\"token comment\">// Read 1st page off disk</span>\n  <span class=\"token function\">readseg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uchar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>elf<span class=\"token punctuation\">,</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Is this an ELF executable?</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>elf<span class=\"token operator\">-></span>magic <span class=\"token operator\">!=</span> ELF_MAGIC<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// let bootasm.S handle error</span>\n\n  <span class=\"token comment\">// Load each program segment (ignores ph flags).</span>\n  ph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proghdr</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uchar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>elf <span class=\"token operator\">+</span> elf<span class=\"token operator\">-></span>phoff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  eph <span class=\"token operator\">=</span> ph <span class=\"token operator\">+</span> elf<span class=\"token operator\">-></span>phnum<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> ph <span class=\"token operator\">&lt;</span> eph<span class=\"token punctuation\">;</span> ph<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    pa <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uchar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ph<span class=\"token operator\">-></span>paddr<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">readseg</span><span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>filesz<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>off<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>memsz <span class=\"token operator\">></span> ph<span class=\"token operator\">-></span>filesz<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">stosb</span><span class=\"token punctuation\">(</span>pa <span class=\"token operator\">+</span> ph<span class=\"token operator\">-></span>filesz<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>memsz <span class=\"token operator\">-</span> ph<span class=\"token operator\">-></span>filesz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Call the entry point from the ELF header.</span>\n  <span class=\"token comment\">// Does not return!</span>\n  entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>elf<span class=\"token operator\">-></span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>そのため、今回は<code class=\"language-text\">entry()</code>関数を探すところから始めていきたいと思います。</p>\n<h2 id=\"カーネルプログラムのビルド\" style=\"position:relative;\"><a href=\"#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89\" aria-label=\"カーネルプログラムのビルド permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>カーネルプログラムのビルド</h2>\n<p>カーネルプログラムのビルドの流れを追います。</p>\n<p>最終的なイメージファイルである<code class=\"language-text\">xv6.img</code>は、以下のコマンドで生成されていました。</p>\n<p><code class=\"language-text\">0x10000</code>の空領域に<code class=\"language-text\">bootblock</code>と<code class=\"language-text\">kernel</code>を埋め込んだものが<code class=\"language-text\">xv6.img</code>になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">xv6.img: bootblock kernel\n\t<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>xv6.img <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">10000</span>\n\t<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>bootblock <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>xv6.img <span class=\"token assign-left variable\">conv</span><span class=\"token operator\">=</span>notrunc\n\t<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>kernel <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>xv6.img <span class=\"token assign-left variable\">seek</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">conv</span><span class=\"token operator\">=</span>notrunc</code></pre></div>\n<p><code class=\"language-text\">bootblock</code>については前回追ったので、今回は<code class=\"language-text\">kernel</code>を追っていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kernel: <span class=\"token variable\"><span class=\"token variable\">$(</span>OBJS<span class=\"token variable\">)</span></span> entry.o entryother initcode kernel.ld\n\t<span class=\"token variable\"><span class=\"token variable\">$(</span>LD<span class=\"token variable\">)</span></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>LDFLAGS<span class=\"token variable\">)</span></span> -T kernel.ld -o kernel entry.o <span class=\"token variable\"><span class=\"token variable\">$(</span>OBJS<span class=\"token variable\">)</span></span> -b binary initcode entryother\n\t<span class=\"token variable\"><span class=\"token variable\">$(</span>OBJDUMP<span class=\"token variable\">)</span></span> -S kernel <span class=\"token operator\">></span> kernel.asm\n\t<span class=\"token variable\"><span class=\"token variable\">$(</span>OBJDUMP<span class=\"token variable\">)</span></span> -t kernel <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d'</span> <span class=\"token operator\">></span> kernel.sym</code></pre></div>\n<p><code class=\"language-text\">kernel</code>の依存関係は<code class=\"language-text\">$(OBJS) entry.o entryother initcode kernel.ld</code>になってます。</p>\n<p><code class=\"language-text\">$(OBJS)</code>の一覧は結構数が多いので割愛します。<code class=\"language-text\">main.o</code>など、カーネルのモジュールが含まれます。</p>\n<p>下の2行はバイナリの逆アセンブル結果とシンボル情報を出力しているのみで、実際にバイナリを作成しているのは<code class=\"language-text\">$(LD) $(LDFLAGS) -T kernel.ld -o kernel entry.o $(OBJS) -b binary initcode entryother</code>の行です。</p>\n<p><code class=\"language-text\">LD</code>は、前回説明した<code class=\"language-text\">GCC</code>と同じく<code class=\"language-text\">$(TOOLPREFIX)ld</code>の形式で使用されます。</p>\n<p>今回はクロスコンパイルは行わないので、普通に<code class=\"language-text\">ld</code>コマンドが実行されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">LD <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>TOOLPREFIX<span class=\"token variable\">)</span></span>ld\n\n<span class=\"token comment\"># FreeBSD ld wants ``elf_i386_fbsd''</span>\nLDFLAGS <span class=\"token operator\">+=</span> -m <span class=\"token variable\"><span class=\"token variable\">$(</span>shell <span class=\"token punctuation\">$(</span>LD<span class=\"token punctuation\">)</span> -V <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> elf_i386 <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -n <span class=\"token number\">1</span><span class=\"token variable\">)</span></span></code></pre></div>\n<p><code class=\"language-text\">LDFLAGS</code>は、<code class=\"language-text\">ld -V</code>の結果から<code class=\"language-text\">elf_i386</code>を抽出して<code class=\"language-text\">-m elf_i386</code>オプションとして表示させています。</p>\n<p><code class=\"language-text\">ld -V</code>は、<code class=\"language-text\">ld</code>コマンドのバージョン確認コマンドのうち、サポートしているエミュレータの一覧を表示するオプション付きのコマンドです。</p>\n<p>実際にビルド時に実行されるコマンドは以下のようになります。</p>\n<p><code class=\"language-text\">-T</code>オプションは<code class=\"language-text\">-c</code>オプションと同じく、リンカスクリプト(<code class=\"language-text\">kernel.ld</code>)からリンクコマンドを読み込むオプションです。</p>\n<p>また、<code class=\"language-text\">-b</code>オプションは以降にインプットするオブジェクトファイルのバイナリフォーマットを指定するコマンドで、今回は<code class=\"language-text\">binary</code>を指定しているようです。</p>\n<p>以降に続く<code class=\"language-text\">initcode</code>と<code class=\"language-text\">entryother</code>はアセンブリファイルからアセンブルされたバイナリです。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ld -m elf_i386 -T kernel.ld -o kernel <span class=\"token punctuation\">\\</span>\nentry.o bio.o console.o exec.o file.o fs.o ide.o ioapic.o kalloc.o kbd.o lapic.o log.o main.o mp.o picirq.o pipe.o proc.o sleeplock.o spinlock.o string.o swtch.o syscall.o sysfile.o sysproc.o trapasm.o trap.o uart.o vectors.o vm.o  <span class=\"token punctuation\">\\</span>\n-b binary initcode entryother</code></pre></div>\n<p>参考：<a href=\"https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_3.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LD、GNUリンカーの使用-オプション</a></p>\n<p>次にリンカスクリプト<code class=\"language-text\">kernel.ld</code>の中身を見てみます。</p>\n<h3 id=\"リンカスクリプト\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%83%B3%E3%82%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88\" aria-label=\"リンカスクリプト permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リンカスクリプト</h3>\n<p>そもそもリンカスクリプトについてですが、リンカがオブジェクトファイルをリンクして実行形式を作成する際に、オブジェクトのメモリ配置を指定するためのファイルです。</p>\n<p>通常は、リンカに内臓されているデフォルトのリンカスクリプトが使用されるため、明示的に指定する必要はありません。</p>\n<p>ちなみに、リンカに内臓されているデフォルトのリンカスクリプトは<code class=\"language-text\">ld</code>コマンドに<code class=\"language-text\">--verbose</code>オプションを付けると出力できます。</p>\n<p>ただし、OSなど組込み系のプログラムの場合は、汎用OSの管理機能が使えないため、リンカスクリプトを独自に設定する必要があります。</p>\n<p>参考：<a href=\"https://sourceware.org/binutils/docs/ld/Scripts.html#Scripts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scripts (LD)</a></p>\n<p>参考：<a href=\"https://sourceware.org/binutils/docs/ld/Basic-Script-Concepts.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Basic Script Concepts (LD)</a></p>\n<p>参考：<a href=\"https://www.computex.co.jp/article/use_gcc_1.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GNU Cを使いこなそう | 株式会社コンピューテックス</a></p>\n<p>xv6OSでカーネルのビルドに使用するリンカスクリプトの全文は以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Simple linker script for the JOS kernel.\n   See the GNU ld 'info' manual (\"info ld\") to learn the syntax. */</span>\n\n<span class=\"token function\">OUTPUT_FORMAT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elf32-i386\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"elf32-i386\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"elf32-i386\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">OUTPUT_ARCH</span><span class=\"token punctuation\">(</span>i386<span class=\"token punctuation\">)</span>\n<span class=\"token function\">ENTRY</span><span class=\"token punctuation\">(</span>_start<span class=\"token punctuation\">)</span>\n\nSECTIONS\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/* Link the kernel at this address: \".\" means the current address */</span>\n        <span class=\"token comment\">/* Must be equal to KERNLINK */</span>\n\t<span class=\"token punctuation\">.</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x80100000</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">.</span>text <span class=\"token operator\">:</span> <span class=\"token function\">AT</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>text <span class=\"token punctuation\">.</span>stub <span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">.</span>gnu<span class=\"token punctuation\">.</span>linkonce<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>etext <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Define the 'etext' symbol to this value */</span>\n\n\t<span class=\"token punctuation\">.</span>rodata <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>rodata <span class=\"token punctuation\">.</span>rodata<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">.</span>gnu<span class=\"token punctuation\">.</span>linkonce<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/* Include debugging information in kernel memory */</span>\n\t<span class=\"token punctuation\">.</span>stab <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>__STAB_BEGIN__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>stab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>__STAB_END__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">.</span>stabstr <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>__STABSTR_BEGIN__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>stabstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>__STABSTR_END__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/* Adjust the address for the data segment to the next page */</span>\n\t<span class=\"token punctuation\">.</span> <span class=\"token operator\">=</span> <span class=\"token function\">ALIGN</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Conventionally, Unix linkers provide pseudo-symbols\n\t * etext, edata, and end, at the end of the text, data, and bss.\n\t * For the kernel mapping, we need the address at the beginning\n\t * of the data section, but that's not one of the conventional\n\t * symbols, because the convention started before there was a\n\t * read-only rodata section between text and data. */</span>\n\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* The data segment */</span>\n\t<span class=\"token punctuation\">.</span>data <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>edata <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">.</span>bss <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token operator\">/</span>DISCARD<span class=\"token operator\">/</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>eh_frame <span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span>GNU<span class=\"token operator\">-</span>stack<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"リンカスクリプトの構造\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%83%B3%E3%82%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E6%A7%8B%E9%80%A0\" aria-label=\"リンカスクリプトの構造 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リンカスクリプトの構造</h3>\n<p>リンカスクリプトとして最低限必須となる記述は、<code class=\"language-text\">SECTIONS</code>要素です。</p>\n<p><code class=\"language-text\">MEMORY</code>要素を定義する場合が多いですが、必須ではありません。</p>\n<p><code class=\"language-text\">SECTIONS</code>要素ではセクションを定義し、任意のアドレスに配置します。</p>\n<p>このアドレスは、物理アドレスと仮想アドレスのどちらも定義可能です。</p>\n<p>参考：<a href=\"https://www.computex.co.jp/article/use_gcc_1.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GNU Cを使いこなそう | 株式会社コンピューテックス</a></p>\n<p>参考：<a href=\"http://blueeyes.sakura.ne.jp/2018/10/31/1676/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">リンカスクリプトの書き方</a></p>\n<p><code class=\"language-text\">SECTIONS</code>要素のみが定義された最も単純なリンカスクリプトは以下の例のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">SECTIONS\n<span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span>text <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x8000000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span>data <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span>bss <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>参考：<a href=\"https://sourceware.org/binutils/docs/ld/Simple-Example.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Simple Example (LD)</a></p>\n<p>xv6OSのリンカスクリプトでは、以下のセクションが定義されています。</p>\n<ul>\n<li>.text : 実行バイナリが配置される。通常は読み取り/実行権限のみ。</li>\n<li>.rodata : 読み取り専用データが配置される。</li>\n<li>.stab : スタブと呼ばれる固定長構造体の配列が配置される。</li>\n<li>.stabstr : スタブから参照される可変長文字列が配置される。</li>\n<li>.data : 読み書き可能なデータが配置される。</li>\n<li>.bss : ブロック開始記号(宣言されているがまだ値が割り当てられていないオブジェクト)が配置される。</li>\n</ul>\n<p>参考：<a href=\"https://opensource.apple.com/source/gdb/gdb-292/doc/stabs.html/stabs_13.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">STABS - Using Stabs in Their Own Sections</a></p>\n<p>参考：<a href=\"https://doc.ecoscentric.com/gnutools/doc/stabs/Stab-Section-Basics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">STABS: Stab Section Basics</a></p>\n<p>参考：<a href=\"https://en.wikipedia.org/wiki/.bss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.bss - Wikipedia</a></p>\n<p>リンカスクリプトの内容について順に見ていきます。</p>\n<h3 id=\"エントリポイントの定義\" style=\"position:relative;\"><a href=\"#%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-label=\"エントリポイントの定義 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>エントリポイントの定義</h3>\n<p>リンカスクリプトの先頭行を見ると、3つの定義がされています。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Simple linker script for the JOS kernel.\n   See the GNU ld 'info' manual (\"info ld\") to learn the syntax. */</span>\n\n<span class=\"token function\">OUTPUT_FORMAT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elf32-i386\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"elf32-i386\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"elf32-i386\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">OUTPUT_ARCH</span><span class=\"token punctuation\">(</span>i386<span class=\"token punctuation\">)</span>\n<span class=\"token function\">ENTRY</span><span class=\"token punctuation\">(</span>_start<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">OUTPUT_FORMAT</code>では、出力バイナリのフォーマットを定義しています。</p>\n<p><code class=\"language-text\">OUTPUT_ARCH</code>では、出力されるバイナリがどのアーキテクチャに対応するかを指定しています。</p>\n<p><code class=\"language-text\">ENTRY</code>では、一番初めに実行される関数のシンボル名を指定しています。</p>\n<p>参考：<a href=\"https://sourceware.org/binutils/docs/ld/Entry-Point.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Entry Point (LD)</a></p>\n<p>ここで指定されている<code class=\"language-text\">_start</code>は、<code class=\"language-text\">entry.S</code>の中で以下のように定義されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># By convention, the _start symbol specifies the ELF entry point.\n# Since we haven&#39;t set up virtual memory yet, our entry point is\n# the physical address of &#39;entry&#39;.\n.globl _start\n_start = V2P_WO(entry)\n\n# Entering xv6 on boot processor, with paging off.\n.globl entry\nentry:\n  # Turn on page size extension for 4Mbyte pages\n  movl    %cr4, %eax\n  orl     $(CR4_PSE), %eax\n  movl    %eax, %cr4\n  # Set page directory\n  movl    $(V2P_WO(entrypgdir)), %eax\n  movl    %eax, %cr3\n  # Turn on paging.\n  movl    %cr0, %eax\n  orl     $(CR0_PG|CR0_WP), %eax\n  movl    %eax, %cr0\n\n  # Set up the stack pointer.\n  movl $(stack + KSTACKSIZE), %esp\n\n  # Jump to main(), and switch to executing at\n  # high addresses. The indirect call is needed because\n  # the assembler produces a PC-relative instruction\n  # for a direct jump.\n  mov $main, %eax\n  jmp *%eax\n\n.comm stack, KSTACKSIZE</code></pre></div>\n<p><code class=\"language-text\">entry.S</code>の詳細については後述します。</p>\n<p>参考：<a href=\"https://yohei.codes/ja/post/xv6-memory-1/#kernelld\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xv6: OSはどうメモリを参照、管理するのか（前編） - yohei.codes</a></p>\n<h3 id=\"sectionstextセクションの定義\" style=\"position:relative;\"><a href=\"#sectionstext%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-label=\"sectionstextセクションの定義 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SECTIONS：textセクションの定義</h3>\n<p>まずはtextセクションの定義を行っている箇所を見ていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Link the kernel at this address: \".\" means the current address */</span>\n<span class=\"token comment\">/* Must be equal to KERNLINK */</span>\n<span class=\"token punctuation\">.</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x80100000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span>text <span class=\"token operator\">:</span> <span class=\"token function\">AT</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>text <span class=\"token punctuation\">.</span>stub <span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">.</span>gnu<span class=\"token punctuation\">.</span>linkonce<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>etext <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Define the 'etext' symbol to this value */</span></code></pre></div>\n<p>最初の行で定義されている<code class=\"language-text\">. = 0x80100000;</code>では、特殊記号<code class=\"language-text\">.</code>の値を設定します。</p>\n<p>これは、ロケーションカウンタとして使用されます。</p>\n<p>以降に定義されたセクションは、ロケーションカウンタの指すアドレスから開始されます。</p>\n<p>セクションが定義されると、ロケーションカウンタはそのサイズ分インクリメントされます。</p>\n<p>参考：<a href=\"https://sourceware.org/binutils/docs/ld/Simple-Example.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Simple Example (LD)</a></p>\n<p>xv6OSでは、ロケーションカウンタの初期値として<code class=\"language-text\">0x80100000</code>が定義されています。</p>\n<p>これによって、リンカによって出力されるバイナリの命令アドレスは<code class=\"language-text\">0x80100000</code>から開始されることになります。</p>\n<p>セクションの定義は、以下の構造で行われます。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">section <span class=\"token punctuation\">[</span>address<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">AT</span><span class=\"token punctuation\">(</span>lma<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">ALIGN</span><span class=\"token punctuation\">(</span>section_align<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> ALIGN_WITH_INPUT<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">SUBALIGN</span><span class=\"token punctuation\">(</span>subsection_align<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">[</span>constraint<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">{</span>\n    output<span class=\"token operator\">-</span>section<span class=\"token operator\">-</span>command\n    output<span class=\"token operator\">-</span>section<span class=\"token operator\">-</span>command\n    …\n  <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">></span>region<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>AT<span class=\"token operator\">></span>lma_region<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">:</span>phdr <span class=\"token operator\">:</span>phdr …<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>fillexp<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>参考：<a href=\"https://sourceware.org/binutils/docs/ld/Output-Section-Description.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Output Section Description (LD)</a></p>\n<p><code class=\"language-text\">AT(0x100000)</code>は、セクションのロードアドレスを<code class=\"language-text\">0x100000</code>と定義しています。</p>\n<p>参考：<a href=\"https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_21.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using LD, the GNU linker - Section Options</a></p>\n<p><code class=\"language-text\">*(.text .stub .text.* .gnu.linkonce.t.*)</code>の行は何をしているのか正直全くわからなかったのですが、セクションのコンテンツを定義している行のようです。</p>\n<p>いくつか定義の方法がありますが、基本的には<code class=\"language-text\">ファイル名(シンボル)</code>の形式で定義されます。</p>\n<p>複数行に渡って定義することが可能です。</p>\n<p><code class=\"language-text\">*()</code>のように、ファイル名の代わりに<code class=\"language-text\">*</code>を使用した場合は、リンク時に与えられたオブジェクトファイルの全てが対象になります。</p>\n<p>つまり、<code class=\"language-text\">*(.text .stub .text.* .gnu.linkonce.t.*)</code>の行は、入力されたオブジェクトファイルの持つ<code class=\"language-text\">.text .stub .text.* .gnu.linkonce.t.*</code>の各セクションのデータをリンカが作成する実行ファイルの<code class=\"language-text\">.text.</code>セクションに配置する、という命令です。</p>\n<p>参考：<a href=\"https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_19.html#SEC19\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using LD, the GNU linker - Section Placement</a></p>\n<p>リンカの入力で与えられている<code class=\"language-text\">entry.o</code>や<code class=\"language-text\">bio.o</code>などのファイルは、いずれも32bitELF形式でコンパイルされているため、それぞれがヘッダや<code class=\"language-text\">.text</code>セクションを持っています。</p>\n<p>これらを一つの実行ファイルとして統合するために上記のような定義がされているんですね。</p>\n<p>続いて<code class=\"language-text\">.text</code>セクションの定義が完了したため、セグメントの終了を示す<code class=\"language-text\">etext</code>を定義する必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>etext <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* Define the 'etext' symbol to this value */</span></code></pre></div>\n<p>参考：<a href=\"https://linuxjm.osdn.jp/html/LDP_man-pages/man3/end.3.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Man page of END</a></p>\n<p>ここでは、<code class=\"language-text\">PROVIDE</code>を使って、カレントロケーションに<code class=\"language-text\">etext</code>を設定しています。</p>\n<p><code class=\"language-text\">PROVIDE</code>は、シンボルがコード上で未定義の場合にのみシンボルを作成する命令です。</p>\n<p>参考：<a href=\"https://sourceware.org/binutils/docs/ld/PROVIDE.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PROVIDE (LD)</a></p>\n<h3 id=\"sectionsrodataセクションの定義\" style=\"position:relative;\"><a href=\"#sectionsrodata%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-label=\"sectionsrodataセクションの定義 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SECTIONS：rodataセクションの定義</h3>\n<p>続いて<code class=\"language-text\">.rodata</code>セクションを定義します。</p>\n<p><code class=\"language-text\">rodata</code>は<code class=\"language-text\">Read Only Data</code>の意味です。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span>rodata <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>rodata <span class=\"token punctuation\">.</span>rodata<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">.</span>gnu<span class=\"token punctuation\">.</span>linkonce<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>リンカの定義は<code class=\"language-text\">.text</code>セクションと同じ記法なので割愛します。</p>\n<h3 id=\"sectionsstabstabstrセクションの定義\" style=\"position:relative;\"><a href=\"#sectionsstabstabstr%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-label=\"sectionsstabstabstrセクションの定義 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SECTIONS：stab,stabstrセクションの定義</h3>\n<p>続いて、デバッグ用の<code class=\"language-text\">stab</code>セクションが定義されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Include debugging information in kernel memory */</span>\n<span class=\"token punctuation\">.</span>stab <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>__STAB_BEGIN__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>stab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>__STAB_END__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span>stabstr <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>__STABSTR_BEGIN__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>stabstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>__STABSTR_END__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ld</code>は、リンカスクリプトで定義されたコンテンツが空となるセクションは作成しません。</p>\n<p>デフォルトのコードでは各バイナリは<code class=\"language-text\">.stab</code>セクションを持たないため、<code class=\"language-text\">kerel</code>にも<code class=\"language-text\">.stab</code>セクションは存在しませんでした。</p>\n<p>しかし、Makefileで定義されたgccのコンパイルオプションに<code class=\"language-text\">-gstabs</code>を追加して<code class=\"language-text\">.stab</code>セクションを作成することで、リンクされた<code class=\"language-text\">kernel</code>にも<code class=\"language-text\">.stab</code>セクションが作成されることを確認しました。</p>\n<h3 id=\"sectionsdataセクションの定義\" style=\"position:relative;\"><a href=\"#sectionsdata%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-label=\"sectionsdataセクションの定義 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SECTIONS：dataセクションの定義</h3>\n<p><code class=\"language-text\">.data</code>セクションには読み書き可能なデータが格納されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Adjust the address for the data segment to the next page */</span>\n<span class=\"token punctuation\">.</span> <span class=\"token operator\">=</span> <span class=\"token function\">ALIGN</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Conventionally, Unix linkers provide pseudo-symbols\n\t* etext, edata, and end, at the end of the text, data, and bss.\n\t* For the kernel mapping, we need the address at the beginning\n\t* of the data section, but that's not one of the conventional\n\t* symbols, because the convention started before there was a\n\t* read-only rodata section between text and data. */</span>\n<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* The data segment */</span>\n<span class=\"token punctuation\">.</span>data <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>edata <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>まずは<code class=\"language-text\">. = ALIGN(0x1000);</code>の行でカレントロケーションを<code class=\"language-text\">0x1000</code>の境界にアラインメントしてます。</p>\n<p>この行は先ほどの<code class=\"language-text\">. = 0x80100000;</code>のように、ロケーションカウンタに特定のアドレスを割り当てているわけではありません。</p>\n<p><code class=\"language-text\">ALIGN</code>を実行した時点のカレントロケーションをもとに、指定した値の境界にカレントロケーションをアラインメントしています。</p>\n<p>実際に生成された<code class=\"language-text\">kernel</code>のバイナリを見ると、バイナリデータが<code class=\"language-text\">0x80107aa9</code>まで連続していたところから、<code class=\"language-text\">.data</code>セクションの先頭アドレスが<code class=\"language-text\">0x80108000</code>になっていることがわかります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ objdump -D kernel <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -5 <span class=\"token string\">\"Disassembly of section .data:\"</span>\n80107aa6:\t<span class=\"token number\">67</span> 6e                \toutsb  %ds:<span class=\"token punctuation\">(</span>%si<span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span>%dx<span class=\"token punctuation\">)</span>\n80107aa8:\t<span class=\"token number\">65</span>                   \tgs\n80107aa9:\t<span class=\"token number\">64</span>                   \tfs\n\t<span class=\"token punctuation\">..</span>.\n\nDisassembly of section .data:\n\n<span class=\"token number\">80108000</span> <span class=\"token operator\">&lt;</span>ctlmap<span class=\"token operator\">></span>:\n\t<span class=\"token punctuation\">..</span>.\n<span class=\"token number\">80108010</span>:\t<span class=\"token number\">11</span> <span class=\"token number\">17</span>                \tadc    %edx,<span class=\"token punctuation\">(</span>%edi<span class=\"token punctuation\">)</span>\n<span class=\"token number\">80108012</span>:\t05 <span class=\"token number\">12</span> <span class=\"token number\">14</span> <span class=\"token number\">19</span> <span class=\"token number\">15</span>       \t<span class=\"token function\">add</span>    <span class=\"token variable\">$0x15191412</span>,%eax</code></pre></div>\n<p>これはカレントロケーションが<code class=\"language-text\">0x80107aaa</code>までインクリメントされていたところから<code class=\"language-text\">0x1000</code>の境界にアラインメントされた結果です。</p>\n<p>参考：<a href=\"https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_14.html#IDX239\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using LD, the GNU linker - Arithmetic Functions</a></p>\n<p>以降の定義は、これまで紹介した内容と同一なので割愛します。</p>\n<h3 id=\"sectionsbssセクションの定義\" style=\"position:relative;\"><a href=\"#sectionsbss%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-label=\"sectionsbssセクションの定義 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SECTIONS：bssセクションの定義</h3>\n<p><code class=\"language-text\">.bss</code>セクションは以下のように定義します。</p>\n<p>ここについてもこれまでと同様ですので割愛します。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>edata <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span>bss <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">PROVIDE</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"sectionsdiscard\" style=\"position:relative;\"><a href=\"#sectionsdiscard\" aria-label=\"sectionsdiscard permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SECTIONS：DISCARD</h3>\n<p><code class=\"language-text\">/DISCARD/</code>に記述されたセクションは生成オブジェクトにリンクされません。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">/</span>DISCARD<span class=\"token operator\">/</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>eh_frame <span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span>GNU<span class=\"token operator\">-</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">.eh_frame</code>はgccによって生成される、スタックバックトレースを取得するための情報が格納されるセクションです。</p>\n<p><code class=\"language-text\">.note.GNU-stack</code>は、Linuxのオブジェクトファイルでスタック属性を宣言する際に使用されます。</p>\n<h2 id=\"カーネルのエントリポイント\" style=\"position:relative;\"><a href=\"#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%81%AE%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\" aria-label=\"カーネルのエントリポイント permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>カーネルのエントリポイント</h2>\n<p>続いて、リンク時にカーネルのエントリポイントとして定義されていた<code class=\"language-text\">_start</code>関数を見ていきます。</p>\n<p><code class=\"language-text\">_start</code>関数が定義された<code class=\"language-text\">entry.S</code>は以下のコードです。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># The xv6 kernel starts executing in this file. This file is linked with\n# the kernel C code, so it can refer to kernel symbols such as main().\n# The boot block (bootasm.S and bootmain.c) jumps to entry below.\n        \n# Multiboot header, for multiboot boot loaders like GNU Grub.\n# http://www.gnu.org/software/grub/manual/multiboot/multiboot.html\n#\n# Using GRUB 2, you can boot xv6 from a file stored in a\n# Linux file system by copying kernel or kernelmemfs to /boot\n# and then adding this menu entry:\n#\n# menuentry &quot;xv6&quot; {\n# \tinsmod ext2\n# \tset root=&#39;(hd0,msdos1)&#39;\n# \tset kernel=&#39;/boot/kernel&#39;\n# \techo &quot;Loading ${kernel}...&quot;\n# \tmultiboot ${kernel} ${kernel}\n# \tboot\n# }\n\n#include &quot;asm.h&quot;\n#include &quot;memlayout.h&quot;\n#include &quot;mmu.h&quot;\n#include &quot;param.h&quot;\n\n# Multiboot header.  Data to direct multiboot loader.\n.p2align 2\n.text\n.globl multiboot_header\nmultiboot_header:\n  #define magic 0x1badb002\n  #define flags 0\n  .long magic\n  .long flags\n  .long (-magic-flags)\n\n# By convention, the _start symbol specifies the ELF entry point.\n# Since we haven&#39;t set up virtual memory yet, our entry point is\n# the physical address of &#39;entry&#39;.\n.globl _start\n_start = V2P_WO(entry)\n\n# Entering xv6 on boot processor, with paging off.\n.globl entry\nentry:\n  # Turn on page size extension for 4Mbyte pages\n  movl    %cr4, %eax\n  orl     $(CR4_PSE), %eax\n  movl    %eax, %cr4\n  # Set page directory\n  movl    $(V2P_WO(entrypgdir)), %eax\n  movl    %eax, %cr3\n  # Turn on paging.\n  movl    %cr0, %eax\n  orl     $(CR0_PG|CR0_WP), %eax\n  movl    %eax, %cr0\n\n  # Set up the stack pointer.\n  movl $(stack + KSTACKSIZE), %esp\n\n  # Jump to main(), and switch to executing at\n  # high addresses. The indirect call is needed because\n  # the assembler produces a PC-relative instruction\n  # for a direct jump.\n  mov $main, %eax\n  jmp *%eax\n\n.comm stack, KSTACKSIZE</code></pre></div>\n<h3 id=\"マルチブートヘッダ\" style=\"position:relative;\"><a href=\"#%E3%83%9E%E3%83%AB%E3%83%81%E3%83%96%E3%83%BC%E3%83%88%E3%83%98%E3%83%83%E3%83%80\" aria-label=\"マルチブートヘッダ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>マルチブートヘッダ</h3>\n<p><code class=\"language-text\">entry.S</code>の先頭行からコードを見ていくと、次のようなコードがありました。</p>\n<p>まず先頭行、<code class=\"language-text\">.p2align 2</code>ではバイナリを4バイト境界にアラインメントしています。</p>\n<p>参考：<a href=\"https://sourceware.org/binutils/docs/as/P2align.html#P2align\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">P2align (Using as)</a></p>\n<p>参考：<a href=\"https://stackoverflow.com/questions/21546946/what-does-p2align-do-in-asm-code\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gcc - What does .p2align do in asm code? - Stack Overflow</a></p>\n<p>その後<code class=\"language-text\">.text</code>ディレクティブの直下に<code class=\"language-text\">multiboot_header</code>が定義されています。</p>\n<p>ここでは、マルチブート仕様に対応するためのマルチブートヘッダの定義を行っています。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># Multiboot header.  Data to direct multiboot loader.\n.p2align 2\n.text\n.globl multiboot_header\nmultiboot_header:\n  #define magic 0x1badb002\n  #define flags 0\n  .long magic\n  .long flags\n  .long (-magic-flags)</code></pre></div>\n<p>マルチブート仕様とは、ブートローダがx86オペレーティングシステムカーネルをロードする方法を標準化したものです。</p>\n<p><a href=\"https://yukituna.com/3850/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前回</a>の記事では、xv6OSのブートローダのコードを見ていきましたが、例えばxv6OSのカーネルをGRUBでブートしたい場合には、このマルチブート仕様にカーネルを対応させる必要があります。</p>\n<p>GRUBなどのブートローダは、Linuxシステムなどで標準的に採用されています。(通常はGRUB2を使用)</p>\n<p>参考：<a href=\"https://wiki2th.com/ja/Multiboot_Specification\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">マルチブート仕様</a></p>\n<p>参考：<a href=\"https://wocota.hatenadiary.org/entry/20090607/1244389534\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GRUBでOSを起動する - OSのようなもの</a></p>\n<p>参考：<a href=\"https://inaz2.hatenablog.com/entry/2015/12/31/221319\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GRUBで簡単なOSカーネルを動かしてみる - ももいろテクノロジー</a></p>\n<p>実際にxv6OSをGRUBによる起動に対応させるのはカーネルの読解が一通り終わってからやろうと考えているので、コードの詳細は追わずに先に進みます。</p>\n<h3 id=\"エントリポイントの物理アドレスを定義\" style=\"position:relative;\"><a href=\"#%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E7%89%A9%E7%90%86%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E5%AE%9A%E7%BE%A9\" aria-label=\"エントリポイントの物理アドレスを定義 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>エントリポイントの物理アドレスを定義</h3>\n<p>続いてのコードは以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># By convention, the _start symbol specifies the ELF entry point.\n# Since we haven&#39;t set up virtual memory yet, our entry point is\n# the physical address of &#39;entry&#39;.\n.globl _start\n_start = V2P_WO(entry)</code></pre></div>\n<p><code class=\"language-text\">.globl</code>ディレクティブは、シンボルをリンクされているすべてのファイルから参照可能にするための宣言です。</p>\n<p><code class=\"language-text\">_start</code>はエントリポイントとしてリンカスクリプトなどから参照されていたシンボルですが、この宣言によって<code class=\"language-text\">entry.S</code>の外部からの呼び出しが可能になっています。</p>\n<p>参考：<a href=\"https://www.google.com/search?q=.globl&#x26;rlz=1C1GCEA_enJP959JP959&#x26;oq=.globl&#x26;aqs=chrome..69i57j0i512j0i10i512j0i10l7.483j0j7&#x26;sourceid=chrome&#x26;ie=UTF-8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.globl - Google Search</a></p>\n<p>続いて、<code class=\"language-text\">_start = V2P_WO(entry)</code>の行を見てみます。</p>\n<p><code class=\"language-text\">V2P_WO</code>は、<code class=\"language-text\">memlayout.h</code>で定義されている以下のマクロです。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">// Memory layout\n\n#define EXTMEM  0x100000            // Start of extended memory\n#define PHYSTOP 0xE000000           // Top physical memory\n#define DEVSPACE 0xFE000000         // Other devices are at high addresses\n\n// Key addresses for address space layout (see kmap in vm.c for layout)\n#define KERNBASE 0x80000000         // First kernel virtual address\n#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked\n\n#define V2P(a) (((uint) (a)) - KERNBASE)\n#define P2V(a) ((void *)(((char *) (a)) + KERNBASE))\n\n#define V2P_WO(x) ((x) - KERNBASE)    // same as V2P, but without casts\n#define P2V_WO(x) ((x) + KERNBASE)    // same as P2V, but without casts</code></pre></div>\n<p>引数として受け取ったアドレスから<code class=\"language-text\">KERNBASE</code>として設定されている<code class=\"language-text\">0x80000000</code>を引いて返すだけのマクロのようです。</p>\n<p>もともと、リンカではカーネルの<code class=\"language-text\">.text</code>セクションは<code class=\"language-text\">0x80100000</code>をベースにしてリンクされていました。</p>\n<p>これはユーザモードとカーネルモードの仮想メモリ範囲を切り分けて、x86CPUのページング機構によってCPUがカーネルの仮想アドレスをロードするための仕組みです。</p>\n<p>参考：<a href=\"https://yohei.codes/ja/post/xv6-memory-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xv6: OSはどうメモリを参照、管理するのか（前編） - yohei.codes</a></p>\n<p>しかし、<code class=\"language-text\">_start = V2P_WO(entry)</code>が実行される段階では、カーネル側で仮想メモリの設定が行われていないため、エントリポイント<code class=\"language-text\">_start</code>を物理アドレスに割り当てるために、<code class=\"language-text\">0x80100000</code>の減算が行われています。</p>\n<h3 id=\"カーネルのエントリポイントのロード\" style=\"position:relative;\"><a href=\"#%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%81%AE%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E3%83%AD%E3%83%BC%E3%83%89\" aria-label=\"カーネルのエントリポイントのロード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>カーネルのエントリポイントのロード</h3>\n<p>残りの<code class=\"language-text\">entry.S</code>の処理を追っていきます。</p>\n<p>まずは<code class=\"language-text\">.globl entry</code>で<code class=\"language-text\">entry</code>を外部から参照可能なシンボルとしています。</p>\n<p>この<code class=\"language-text\">entry</code>で行っている処理は、簡単に言うとページングを利用してカーネルの仮想アドレスを読み込んでいます。</p>\n<p><code class=\"language-text\">entry</code>ラベルが呼び出しされる時点では、まだページング機構は有効化されていないので、まずはこれを有効化していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># Entering xv6 on boot processor, with paging off.\n.globl entry\nentry:\n  # Turn on page size extension for 4Mbyte pages\n  movl    %cr4, %eax\n  orl     $(CR4_PSE), %eax\n  movl    %eax, %cr4\n  # Set page directory\n  movl    $(V2P_WO(entrypgdir)), %eax\n  movl    %eax, %cr3\n  # Turn on paging.\n  movl    %cr0, %eax\n  orl     $(CR0_PG|CR0_WP), %eax\n  movl    %eax, %cr0\n\n  # Set up the stack pointer.\n  movl $(stack + KSTACKSIZE), %esp\n\n  # Jump to main(), and switch to executing at\n  # high addresses. The indirect call is needed because\n  # the assembler produces a PC-relative instruction\n  # for a direct jump.\n  mov $main, %eax\n  jmp *%eax\n\n.comm stack, KSTACKSIZE</code></pre></div>\n<h3 id=\"ページングとは\" style=\"position:relative;\"><a href=\"#%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%A8%E3%81%AF\" aria-label=\"ページングとは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ページングとは</h3>\n<p>コードを追う前に、ページングについて簡単にまとめます。</p>\n<p>ページングとは、メモリ領域を固定長のサイズ(ページ)に分割して管理する方法です。</p>\n<p>これによって、分割されたメモリ領域をリニアなメモリ空間として扱うことができたり、SSDなどの補助記憶装置に仮想的なページ領域を確保することで、物理メモリの容量以上のメモリ領域を扱うことができます。</p>\n<p>ページングにおいて、主記憶装置から補助記憶装置にページを書き出すことを「ページアウト」、逆に補助記憶装置から主記憶装置にページを書き戻すことを「ページイン」または「スワップイン」と呼びます。</p>\n<p>ページング機構によって、使用されていないメモリ領域はページアウトによって補助記憶装置に保存されます。</p>\n<p>次にそのメモリ領域が必要となる場合、OSは物理メモリ上に存在しないアドレスに対して「ページフォールト」という例外を発生させ、割込みによってスワップインを行い、物理メモリ上にページを書き戻すという挙動が発生します。</p>\n<p>参考：<a href=\"https://babyron64.hatenablog.com/entry/2017/12/22/210124\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">x86_64アーキテクチャ - ばびろん’s すたっく メモリアクセス</a></p>\n<p>参考：<a href=\"https://babyron64.hatenablog.com/entry/2017/12/22/232423\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">x86_64アーキテクチャ - ばびろん’s すたっく メモリアクセス(続き)</a></p>\n<p>参考：<a href=\"https://e-words.jp/w/%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ページング（paging）とは - IT用語辞典 e-Words</a></p>\n<p>ページング機構を有効化するためには、x86CPUでは<code class=\"language-text\">CR0(コントロールレジスタ0)</code>のPGフラグを1にする必要があります。</p>\n<p>実際にページングを有効化している箇所を見ます。</p>\n<p><a href=\"https://yukituna.com/3850/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前回の記事</a>でプロテクトモード移行時に<code class=\"language-text\">CR0(コントロールレジスタ0)</code>のPEフラグをセットしましたが、この時とやり方はほぼ同じです。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">entry:\n  # Turn on page size extension for 4Mbyte pages\n  movl    %cr4, %eax\n  orl     $(CR4_PSE), %eax\n  movl    %eax, %cr4\n  # Set page directory\n  movl    $(V2P_WO(entrypgdir)), %eax\n  movl    %eax, %cr3\n  # Turn on paging.\n  movl    %cr0, %eax\n  orl     $(CR0_PG|CR0_WP), %eax\n  movl    %eax, %cr0</code></pre></div>\n<p>最後の<code class=\"language-text\"># Turn on paging.</code>以降の処理が、<code class=\"language-text\">CR0(コントロールレジスタ0)</code>のPGフラグをセットしている箇所です。</p>\n<p>各フラグの演算に使っている定数はそれぞれ以下のように定義されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Control Register flags</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CR0_PE</span>          <span class=\"token expression\"><span class=\"token number\">0x00000001</span>      </span><span class=\"token comment\">// Protection Enable</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CR0_WP</span>          <span class=\"token expression\"><span class=\"token number\">0x00010000</span>      </span><span class=\"token comment\">// Write Protect</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CR0_PG</span>          <span class=\"token expression\"><span class=\"token number\">0x80000000</span>      </span><span class=\"token comment\">// Paging</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CR4_PSE</span>         <span class=\"token expression\"><span class=\"token number\">0x00000010</span>      </span><span class=\"token comment\">// Page size extension</span></span></code></pre></div>\n<p>ここから、PGフラグだけでなく、WPフラグもセットしていることがわかります。</p>\n<p>WPフラグがセットされると、CPUはリング0のスーパーバイザレベルのプロシージャが読み取り専用ページに時書き込みを行うことを禁止することができます。</p>\n<p>これによってOSで新しいプロセスを作成する際のコピーオンライト方式の実装を容易にすることができます。</p>\n<p>これについては今後の記事で書きます。</p>\n<p>ただ、x86CPUではデフォルトでWPフラグがセットされているはずなので、なぜ明示的に設定しているのかは疑問に感じる点です。</p>\n<p>参考：<a href=\"https://en.wikipedia.org/wiki/Control_register\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Control register - Wikipedia</a></p>\n<p>参考：<a href=\"https://stackoverflow.com/questions/15275059/whats-the-purpose-of-x86-cr0-wp-bit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">assembly - whats the purpose of x86 cr0 WP bit? - Stack Overflow</a></p>\n<p>次に、CR0の設定より少しさかのぼった以下の箇所を見ていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># Turn on page size extension for 4Mbyte pages\nmovl    %cr4, %eax\norl     $(CR4_PSE), %eax\nmovl    %eax, %cr4</code></pre></div>\n<p>ここでは<code class=\"language-text\">CR4(コントロールレジスタ4)</code>のPSEフラグをセットしています。</p>\n<p>このフラグは、1ページのサイズをコントロールすることができます。</p>\n<p>CR4のPSEフラグがセットされていない(デフォルト)場合、ページのサイズは4KiBになります。</p>\n<p>逆にPSEフラグがセットされている場合、ページサイズは4MiBに拡張されます。</p>\n<p>参考：<a href=\"https://en.wikipedia.org/wiki/Control_register\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Control register - Wikipedia</a></p>\n<p>ページサイズに2つのサイズが設定されている詳しい背景などは機会があれば別の記事にまとめます。</p>\n<p>xv6OSでは、4MiBのページサイズが設定されていることまでわかりました。</p>\n<p>最後は以下の箇所です。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># Set page directory\nmovl    $(V2P_WO(entrypgdir)), %eax\nmovl    %eax, %cr3</code></pre></div>\n<p>xv6OSにおけるページング機構は、この次の行で有効化しているため、この時点ではまだページングが有効になっていません。</p>\n<p>そのため、<code class=\"language-text\">$(V2P_WO(entrypgdir))</code>マクロによって<code class=\"language-text\">entrypgdir</code>のアドレスを物理アドレスに変換してからCR3に書き込んでいます。</p>\n<p>CR3は、ページング機構が有効な場合に使用されるレジスタで、x86CPUがページディレクトリとページテーブルを参照し、リニアアドレスを物理アドレスに変換するために使用されます。</p>\n<p><code class=\"language-text\">entrypgdir</code>は、<code class=\"language-text\">main.c</code>で定義されている構造体配列です。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// main.c</span>\n<span class=\"token class-name\">pde_t</span> entrypgdir<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// For entry.S</span>\n\n<span class=\"token comment\">// The boot page table used in entry.S and entryother.S.</span>\n<span class=\"token comment\">// Page directories (and page tables) must start on page boundaries,</span>\n<span class=\"token comment\">// hence the __aligned__ attribute.</span>\n<span class=\"token comment\">// PTE_PS in a page directory entry enables 4Mbyte pages.</span>\n\n<span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__aligned__</span><span class=\"token punctuation\">(</span>PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">pde_t</span> entrypgdir<span class=\"token punctuation\">[</span>NPDENTRIES<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Map VA's [0, 4MB) to PA's [0, 4MB)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> PTE_P <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_PS<span class=\"token punctuation\">,</span>\n   \n  <span class=\"token comment\">// Map VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB)</span>\n  <span class=\"token punctuation\">[</span>KERNBASE<span class=\"token operator\">>></span>PDXSHIFT<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> PTE_P <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_PS<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>配列のサイズは<code class=\"language-text\">NPDENTRIES</code>ですが、これは<code class=\"language-text\">mmu.h</code>で以下の通り1024と定義されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Page directory and page table constants.</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NPDENTRIES</span>      <span class=\"token expression\"><span class=\"token number\">1024</span>    </span><span class=\"token comment\">// # directory entries per page directory</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NPTENTRIES</span>      <span class=\"token expression\"><span class=\"token number\">1024</span>    </span><span class=\"token comment\">// # PTEs per page table</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PGSIZE</span>          <span class=\"token expression\"><span class=\"token number\">4096</span>    </span><span class=\"token comment\">// bytes mapped by a page</span></span></code></pre></div>\n<p><code class=\"language-text\">entrypgdir</code>には2つの要素があります。</p>\n<p>正直何をしているのか雰囲気でしか理解していないですが、ここでは単にページディレクトリのエントリを初期化しているようです。</p>\n<p>まず、2つの要素に共通している<code class=\"language-text\">(0) | PTE_P | PTE_W | PTE_PS</code>の行は、以下の定義を行っています。</p>\n<ul>\n<li><code class=\"language-text\">0</code> - すべてのビットを0にする</li>\n<li><code class=\"language-text\">PTE_P</code> - present をセットする</li>\n<li><code class=\"language-text\">PTE_W</code> - read\\write をセットする</li>\n<li><code class=\"language-text\">PTE_PS</code> - 4MiB page size bit をセットする</li>\n</ul>\n<p>1つ目の要素<code class=\"language-text\">[0] = (0) | PTE_P | PTE_W | PTE_PS,</code>では、0番目の要素のページディレクトリエントリをこの値に初期化しています。</p>\n<p>次の要素では、<code class=\"language-text\">KERNBASE>>PDXSHIFT</code> = <code class=\"language-text\">0x80000000 >> 22</code> = 512番目の要素のページディレクトリエントリをこの値に初期化しています。</p>\n<p>この初期化は、次にページング機構を有効化してメイン関数に移行する際に使用するようです。</p>\n<p>参考：<a href=\"https://yohei.codes/ja/post/xv6-memory-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xv6: OSはどうメモリを参照、管理するのか（前編） - yohei.codes</a></p>\n<p>参考：<a href=\"https://stackoverflow.com/questions/58576065/what-does-this-code-mean-in-xv6-entrypgdir\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">what does this code mean in xv6 entrypgdir? - Stack Overflow</a></p>\n<h3 id=\"スタックポインタの設定\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%AE%E8%A8%AD%E5%AE%9A\" aria-label=\"スタックポインタの設定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>スタックポインタの設定</h3>\n<p>最後にスタックポインタの設定を行って、main関数に移行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># Set up the stack pointer.\nmovl $(stack + KSTACKSIZE), %esp</code></pre></div>\n<p><code class=\"language-text\">KSTACKSIZE</code>は、<code class=\"language-text\">param.h</code>で4096と定義されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NPROC</span>        <span class=\"token expression\"><span class=\"token number\">64</span>  </span><span class=\"token comment\">// maximum number of processes</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">KSTACKSIZE</span> <span class=\"token expression\"><span class=\"token number\">4096</span>  </span><span class=\"token comment\">// size of per-process kernel stack</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NCPU</span>          <span class=\"token expression\"><span class=\"token number\">8</span>  </span><span class=\"token comment\">// maximum number of CPUs</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NOFILE</span>       <span class=\"token expression\"><span class=\"token number\">16</span>  </span><span class=\"token comment\">// open files per process</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NFILE</span>       <span class=\"token expression\"><span class=\"token number\">100</span>  </span><span class=\"token comment\">// open files per system</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NINODE</span>       <span class=\"token expression\"><span class=\"token number\">50</span>  </span><span class=\"token comment\">// maximum number of active i-nodes</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NDEV</span>         <span class=\"token expression\"><span class=\"token number\">10</span>  </span><span class=\"token comment\">// maximum major device number</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ROOTDEV</span>       <span class=\"token expression\"><span class=\"token number\">1</span>  </span><span class=\"token comment\">// device number of file system root disk</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXARG</span>       <span class=\"token expression\"><span class=\"token number\">32</span>  </span><span class=\"token comment\">// max exec arguments</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXOPBLOCKS</span>  <span class=\"token expression\"><span class=\"token number\">10</span>  </span><span class=\"token comment\">// max # of blocks any FS op writes</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LOGSIZE</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span>MAXOPBLOCKS<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">// max data blocks in on-disk log</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NBUF</span>         <span class=\"token expression\"><span class=\"token punctuation\">(</span>MAXOPBLOCKS<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">// size of disk block cache</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FSSIZE</span>       <span class=\"token expression\"><span class=\"token number\">1000</span>  </span><span class=\"token comment\">// size of file system in blocks</span></span></code></pre></div>\n<p>Cのコードに移行するためにスタックポインタの設定が必要なのですが、ここは正直よくわかりませんでした。</p>\n<p>というのも、変数<code class=\"language-text\">stack</code>は、<code class=\"language-text\">main.c</code>で定義されているものであり、この時点ではまだ値が格納されていません。</p>\n<p>結果として<code class=\"language-text\">.comm</code>シンボルとして定義され、あとで再定義される想定とされているようです。</p>\n<p>参考：<a href=\"https://stackoverflow.com/questions/29008035/assembly-mov-unitialized-variable\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">c - assembly - mov unitialized variable? - Stack Overflow</a></p>\n<p>難解ですね。。</p>\n<h3 id=\"main関数に移行\" style=\"position:relative;\"><a href=\"#main%E9%96%A2%E6%95%B0%E3%81%AB%E7%A7%BB%E8%A1%8C\" aria-label=\"main関数に移行 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main関数に移行</h3>\n<p>ブートストラップから続く一連の処理がようやく終わり、ここからカーネル本体となる<code class=\"language-text\">main.c</code>の関数に移行していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">Jump to <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> and <span class=\"token keyword\">switch</span> to executing at</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">high</span> <span class=\"token expression\">addresses<span class=\"token punctuation\">.</span> The indirect call is needed because</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">the</span> <span class=\"token expression\">assembler produces a PC<span class=\"token operator\">-</span>relative instruction</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">for</span> <span class=\"token expression\">a direct jump<span class=\"token punctuation\">.</span></span></span>\nmov $main<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>eax\njmp <span class=\"token operator\">*</span><span class=\"token operator\">%</span>eax\n\n<span class=\"token punctuation\">.</span>comm stack<span class=\"token punctuation\">,</span> KSTACKSIZE</code></pre></div>\n<p>結構長くなってしまったので続きはまた次回の記事にて。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>今回はカーネルプログラムのビルドとリンカスクリプト、そしてエントリポイントの処理の流れを追っていきました。</p>\n<p>次回は今度こそようやくカーネル本体の動きを追っていくことができそうです。</p>\n<h2 id=\"参考書籍\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E6%9B%B8%E7%B1%8D\" aria-label=\"参考書籍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考書籍</h2>\n<ul>\n<li><a href=\"https://amzn.to/3qZSCY7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">30日でできる! OS自作入門</a></li>\n<li><a href=\"https://amzn.to/3qXYsZX\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ゼロからのOS自作入門</a></li>\n<li><a href=\"https://amzn.to/3q8TU3K\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">はじめてのOSコードリーディング ~UNIX V6で学ぶカーネルのしくみ</a></li>\n<li><a href=\"https://amzn.to/3I6fkVt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳解 Linuxカーネル</a></li>\n<li><a href=\"https://amzn.to/3JRUdI2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作って理解するOS x86系コンピュータを動かす理論と実装</a></li>\n</ul>","fields":{"slug":"/unix-xv6-002-load-kernel","tagSlugs":["/tag/unix/","/tag/xv-6/","/tag/kernel/","/tag/os/"]},"frontmatter":{"date":"2022-01-16","description":"教育用OSのxv6OSのソースコードを読んでカーネルについて学んでいきます。この記事ではxv6OSのカーネルのデバッグ環境を構築します。","tags":["Unix","xv6","Kernel","OS"],"title":"xv6OSを真面目に読みこんでカーネルを完全に理解する -リンカ・ページング編-","socialImage":{"publicURL":"/static/c3c9f1c2cccec8bc4489b3fb915130c5/unix-xv6-002-load-kernel.png"}}}},"pageContext":{"slug":"/unix-xv6-002-load-kernel"}},"staticQueryHashes":["251939775","401334301","825871152"]}