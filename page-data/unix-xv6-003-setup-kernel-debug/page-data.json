{"componentChunkName":"component---src-templates-post-template-js","path":"/unix-xv6-003-setup-kernel-debug","result":{"data":{"markdownRemark":{"id":"af312565-ed87-5022-98d7-392b864971d3","html":"<p><a href=\"https://amzn.to/3q8TU3K\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">はじめてのOSコードリーディング ~UNIX V6で学ぶカーネルのしくみ</a>にインスパイアされて<a href=\"https://github.com/mit-pdos/xv6-public\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xv6 OS</a>を読んでます。</p>\n<p>リバースエンジニアリングに強くなりたいのと、カーネルとかOSに詳しくなりたいと思っています。</p>\n<p><a href=\"https://amzn.to/3I6fkVt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳解 Linuxカーネル</a>が結構重かったので、もう少し軽めのところから始めたいと思っていたところ、UNIX V6というOSがトータルで1万行くらいのコード量で、人類でもギリギリ理解できるということを知り、興味を持ちました。</p>\n<p>ただ、UNIX V6自体はx86CPUでは動作しないため、基本的には、UNIXv6をX86アーキテクチャで動くようにした<a href=\"https://github.com/mit-pdos/xv6-public\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xv6 OS</a>のリポジトリをForkした<a href=\"https://github.com/kash1064/xv6-public\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kash1064/xv6-public: xv6 OS</a>のソースコードを読んでいくことにしました。</p>\n<p><a href=\"/unix-xv6-002-load-kernel\">前回</a>まででxv6OSのビルドと起動プロセスまで読み進めました。</p>\n<p>早速カーネル本体の動きを読み進めようと思ったのですが、コードを読むだけだとわからない箇所があったので、理解を深めるためにデバッグ環境を先に構成しようと思います。</p>\n<!-- omit in toc -->\n<h2 id=\"もくじ\" style=\"position:relative;\"><a href=\"#%E3%82%82%E3%81%8F%E3%81%98\" aria-label=\"もくじ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>もくじ</h2>\n<ul>\n<li>\n<p><a href=\"#xv6os%E3%82%92qemu-gdb%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%99%E3%82%8B\">xv6OSをQEMU-GDBでデバッグする</a></p>\n<ul>\n<li><a href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E6%99%82%E3%81%AEqemu%E3%81%AE%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E5%BC%95%E6%95%B0\">デバッグ時のQEMUのオプション引数</a></li>\n<li><a href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%82%92%E8%A9%A6%E3%81%99\">デバッグを試す</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>\n<h2 id=\"xv6osをqemu-gdbでデバッグする\" style=\"position:relative;\"><a href=\"#xv6os%E3%82%92qemu-gdb%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%99%E3%82%8B\" aria-label=\"xv6osをqemu gdbでデバッグする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>xv6OSをQEMU-GDBでデバッグする</h2>\n<p>基本的な手順は以下の記事が参考になりました。</p>\n<p>参考：<a href=\"https://qiita.com/ksky/items/974ad1249cfb2dcf5437\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xv6のデバッグ環境をつくる - Qiita</a></p>\n<p>僕の環境ではQEMUのコンソールはGUIの別ウィンドウで使用したかったので、上記の記事とは異なり、<code class=\"language-text\">qemu-nox-gdb</code>ではなく<code class=\"language-text\">qemu-gdb</code>を使用しています。</p>\n<p>デバッガの接続方法は非常に簡単で、以下のコマンド実行するだけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Makefileと同じディレクトリで実行する</span>\n<span class=\"token function\">make</span> qemu-gdb</code></pre></div>\n<p>続いて、別のターミナルを開き、以下のコマンドを入力するとデバッグが可能になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># gdbでkernelバイナリをデバッグ対象に指定</span>\ngdb kernel\n\n<span class=\"token comment\"># gdbでリモートデバッグ</span>\ntarget remote localhost:26000</code></pre></div>\n<p>まず、<code class=\"language-text\">make qemu-gdb</code>は、xv6OSをビルドした上で<code class=\"language-text\">qemu-system-i386 -serial mon:stdio -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp 2 -m 512  -S -gdb tcp::26000</code>を呼び出します。</p>\n<p>QEMUのオプション引数については以下で順に見ていきます。</p>\n<h3 id=\"デバッグ時のqemuのオプション引数\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E6%99%82%E3%81%AEqemu%E3%81%AE%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E5%BC%95%E6%95%B0\" aria-label=\"デバッグ時のqemuのオプション引数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デバッグ時のQEMUのオプション引数</h3>\n<p><code class=\"language-text\">make qemu-gdb</code>実行時に使用されるオプション引数は以下の通りです。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">オプション引数</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">-serial <dev></td>\n<td align=\"center\">仮想シリアルデバイスをホストにリダイレクトする<br /><code class=\"language-text\">mon:stdio</code>の設定ではターミナルにコンソールとQEMU monitorを表示させる</td>\n</tr>\n<tr>\n<td align=\"center\">-drive <options></td>\n<td align=\"center\">ブロックデバイスやインターフェースなどの新しいデバイスを追加する<br />今回は<code class=\"language-text\">xv6.img</code>と<code class=\"language-text\">fs.img</code>をそれぞれdiskとして読み込んでいる</td>\n</tr>\n<tr>\n<td align=\"center\">-smp <cpus></td>\n<td align=\"center\">指定した数のCPUを使用してSMP(マルチプロセッサシステム)をエミュレーションする</td>\n</tr>\n<tr>\n<td align=\"center\">-m <MB or GB></td>\n<td align=\"center\">仮想マシン起動時のメモリサイズを指定(デフォルト単位：MB)<br /><code class=\"language-text\">1G</code>のように接頭辞を付けることでギガバイト単位に変更可能</td>\n</tr>\n<tr>\n<td align=\"center\">-S</td>\n<td align=\"center\">起動時にCPUを使用しない(=電源投入直後の時点で停止し、gdbの接続を待機させる)</td>\n</tr>\n<tr>\n<td align=\"center\">-gdb &#x3C;tcp::port></td>\n<td align=\"center\">GDB接続を指定のプロトコル、ポートで受け入れる</td>\n</tr>\n</tbody>\n</table>\n<p>参考：<a href=\"https://www.qemu.org/docs/master/system/invocation.html#hxtool-0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Invocation — QEMU documentation</a></p>\n<p>参考：<a href=\"https://qiita.com/wataash/items/174b454d4478898a556b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">カーネルデバッグで使うQEMUオプションチートシート - Qiita</a></p>\n<h3 id=\"デバッグを試す\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%82%92%E8%A9%A6%E3%81%99\" aria-label=\"デバッグを試す permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デバッグを試す</h3>\n<p>xv6カーネルのシンボル情報は、ビルド時に<code class=\"language-text\">kernel.sym</code>に格納されています。</p>\n<p>実際にgdb側でシンボルのアドレスを検索してみても同等の結果になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ info address main\nSymbol <span class=\"token string\">\"main\"</span> is a <span class=\"token keyword\">function</span> at address 0x80103040.</code></pre></div>\n<p>main関数にブレークポイントを仕掛けます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ main\n$ c\nContinuing.\n<span class=\"token punctuation\">[</span>----------------------------------registers-----------------------------------<span class=\"token punctuation\">]</span>\nEAX: 0x80103040 --<span class=\"token operator\">></span> 0xfb1e0ff3 \nEBX: 0x10094 --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \nECX: 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \nEDX: 0x1f0 --<span class=\"token operator\">></span> 0xf000ff53 \nESI: 0x10094 --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \nEDI: 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \nEBP: 0x7bf8 --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \nESP: 0x8010b5c0 --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \nEIP: 0x80103040 --<span class=\"token operator\">></span> 0xfb1e0ff3\nEFLAGS: 0x86 <span class=\"token punctuation\">(</span>carry PARITY adjust zero SIGN <span class=\"token builtin class-name\">trap</span> interrupt direction overflow<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>-------------------------------------code-------------------------------------<span class=\"token punctuation\">]</span>\n   0x80103034 <span class=\"token operator\">&lt;</span>mpenter+2<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>:\tcall   0x801027a0 <span class=\"token operator\">&lt;</span>lapicinit<span class=\"token operator\">></span>\n   0x80103039 <span class=\"token operator\">&lt;</span>mpenter+2<span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>></span>:\tcall   0x80102fe0 <span class=\"token operator\">&lt;</span>mpmain<span class=\"token operator\">></span>\n   0x8010303e:\txchg   ax,ax\n<span class=\"token operator\">=</span><span class=\"token operator\">></span> 0x80103040 <span class=\"token operator\">&lt;</span>main<span class=\"token operator\">></span>:\tendbr32 \n   0x80103044 <span class=\"token operator\">&lt;</span>main+<span class=\"token operator\"><span class=\"token file-descriptor important\">4</span>></span>:\tlea    ecx,<span class=\"token punctuation\">[</span>esp+0x4<span class=\"token punctuation\">]</span>\n   0x80103048 <span class=\"token operator\">&lt;</span>main+<span class=\"token operator\"><span class=\"token file-descriptor important\">8</span>></span>:\tand    esp,0xfffffff0\n   0x8010304b <span class=\"token operator\">&lt;</span>main+1<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>:\tpush   DWORD PTR <span class=\"token punctuation\">[</span>ecx-0x4<span class=\"token punctuation\">]</span>\n   0x8010304e <span class=\"token operator\">&lt;</span>main+1<span class=\"token operator\"><span class=\"token file-descriptor important\">4</span>></span>:\tpush   ebp\n<span class=\"token punctuation\">[</span>------------------------------------stack-------------------------------------<span class=\"token punctuation\">]</span>\n0000<span class=\"token operator\">|</span> 0x8010b5c0 --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \n0004<span class=\"token operator\">|</span> 0x8010b5c4 --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \n0008<span class=\"token operator\">|</span> 0x8010b5c8 --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \n0012<span class=\"token operator\">|</span> 0x8010b5cc --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \n0016<span class=\"token operator\">|</span> 0x8010b5d0 --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \n0020<span class=\"token operator\">|</span> 0x8010b5d4 --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \n0024<span class=\"token operator\">|</span> 0x8010b5d8 --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \n0028<span class=\"token operator\">|</span> 0x8010b5dc --<span class=\"token operator\">></span> 0x0 --<span class=\"token operator\">></span> 0xf000ff53 \n<span class=\"token punctuation\">[</span>------------------------------------------------------------------------------<span class=\"token punctuation\">]</span>\nLegend: code, data, rodata, value\n\nThread <span class=\"token number\">1</span> hit Breakpoint <span class=\"token number\">1</span>, main <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> at main.c:19</code></pre></div>\n<p>僕の環境ではgdb-pedaを有効化しているので色々でてきました。</p>\n<p>これでカーネルのデバッグができるようになりました。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>はじめはbochsでやろうと思ったのですが、トラシューが上手くいかなかったのでgdbを使ってデバッグすることにしました。</p>\n<p>こっちの方が設定が簡単で使い慣れているので結果としてよかったです。</p>\n<p>今度こそほんとのほんとにカーネル本体を読み進めます。</p>","fields":{"slug":"/unix-xv6-003-setup-kernel-debug","tagSlugs":["/tag/unix/","/tag/xv-6/","/tag/kernel/","/tag/os/"]},"frontmatter":{"date":"2022-01-24","description":"教育用OSのxv6OSのソースコードを読んでカーネルについて学んでいきます。この記事ではxv6OSのカーネルをロードする挙動を読み解きます。","tags":["Unix","xv6","Kernel","OS"],"title":"xv6OSを真面目に読みこんでカーネルを完全に理解する -GDBデバッグ環境構築編-","socialImage":{"publicURL":"/static/8ad19b30a768f586cec17434bc789068/unix-xv6-003-setup-kernel-debug.png"}}}},"pageContext":{"slug":"/unix-xv6-003-setup-kernel-debug"}},"staticQueryHashes":["251939775","401334301","825871152"]}