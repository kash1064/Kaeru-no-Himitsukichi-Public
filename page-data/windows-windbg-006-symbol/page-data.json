{"componentChunkName":"component---src-templates-post-template-js","path":"/windows-windbg-006-symbol","result":{"data":{"markdownRemark":{"id":"7dad5605-cfeb-5af1-bc32-c2c061ecacab","html":"<p>WinDbgによるWindowsデバッグやダンプ解析によるトラブルシューティングに習熟することを目指しています。</p>\n<p>WinDbgを用いたWindowsのデバッグやダンプの解析方法について公開している情報については、以下のページに一覧をまとめているので、よければご覧ください。</p>\n<p>参考：<a href=\"/windows-windbg-001-index\">WinDbgを用いたデバッグとトラブルシューティングのテクニック</a></p>\n<p>今回は、上記のWinDbgまとめ記事で解析のために使用するサンプルプログラムをビルドする環境について紹介します。</p>\n<p>以下の要件を実現できる環境を、WSL2上のUbuntu20.04で構築していきます。\n基本的にはDockerコンテナを使用するので、Dockerが動くならどの環境でも問題ないと思います。</p>\n<ol>\n<li><strong>Linux環境でEXEファイルをクロスコンパイルできる</strong></li>\n<li><strong>Linux環境でシンボルファイル（.pdbファイル）を生成できる</strong></li>\n</ol>\n<!-- omit in toc -->\n<h2 id=\"もくじ\" style=\"position:relative;\"><a href=\"#%E3%82%82%E3%81%8F%E3%81%98\" aria-label=\"もくじ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>もくじ</h2>\n<ul>\n<li><a href=\"#%E3%83%93%E3%83%AB%E3%83%89%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E3%81%88%E3%82%8B\">ビルド環境を整える</a></li>\n<li><a href=\"#%E3%82%B7%E3%83%B3%E3%83%9C%E3%83%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%ABpdb%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A8%E3%81%AF\">シンボルファイル（.pdbファイル）とは</a></li>\n<li><a href=\"#linux%E7%92%B0%E5%A2%83%E3%81%A7%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E6%99%82%E3%81%AB%E3%82%B7%E3%83%B3%E3%83%9C%E3%83%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\">Linux環境でコンパイル時にシンボルファイルを生成する方法</a></li>\n<li><a href=\"#llvm-mingw%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\">llvm-mingwの環境を用意する</a></li>\n<li><a href=\"#llvm-mingw%E3%81%A7pdb%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BB%98%E3%81%8D%E3%81%A7c%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%99%E3%82%8B\">llvm-mingwでPDBファイル付きでC++ファイルをコンパイルする</a></li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>\n<h2 id=\"ビルド環境を整える\" style=\"position:relative;\"><a href=\"#%E3%83%93%E3%83%AB%E3%83%89%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E3%81%88%E3%82%8B\" aria-label=\"ビルド環境を整える permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ビルド環境を整える</h2>\n<p>WinDbgテスト用のプログラムは、以下のリポジトリに置いてあります。</p>\n<p>参考：<a href=\"https://github.com/kash1064/Try2WinDbg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kash1064/Try2WinDbg</a></p>\n<p>まずは、Dockerが利用可能なOS上の任意のディレクトリに上記のリポジトリをcloneします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/kash1064/Try2WinDbg</code></pre></div>\n<p>続いて、コンパイル用の以下のコンテナイメージをpullします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull kashiwabayuki/try2windbg:1.0</code></pre></div>\n<p>参考：<a href=\"https://hub.docker.com/r/kashiwabayuki/try2windbg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kashiwabayuki/try2windbg</a></p>\n<p>このコンテナイメージは、<a href=\"https://hub.docker.com/r/mstorsjo/llvm-mingw/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mstorsjo/llvm-mingw</a>のコンテナイメージを一部カスタマイズしたイメージです。</p>\n<p>詳細については後述します。</p>\n<p>サンプルプログラムのリポジトリとコンテナイメージの取得が完了したら、ダウンロードした<code class=\"language-text\">Try2WinDbg</code>ディレクトリに移動します。</p>\n<p>続いて、以下のコマンドを入力することで、<code class=\"language-text\">Try2WinDbg/src</code>直下に、コンパイルされたEXEファイルとシンボルファイルが生成されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> Try2WinDbg\n\n<span class=\"token comment\"># ビルドに使用するコンテナイメージを指定</span>\n<span class=\"token assign-left variable\">CONTAINER</span><span class=\"token operator\">=</span>kashiwabayuki/try2windbg:1.0\n<span class=\"token function\">docker</span> run --rm -it -v <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">`</span></span>/src:/try2windbg <span class=\"token variable\">$CONTAINER</span> <span class=\"token function\">bash</span> -c <span class=\"token string\">\"cd /try2windbg &amp;&amp; make\"</span></code></pre></div>\n<p>これで、環境構築は完了です。</p>\n<h2 id=\"シンボルファイルpdbファイルとは\" style=\"position:relative;\"><a href=\"#%E3%82%B7%E3%83%B3%E3%83%9C%E3%83%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%ABpdb%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A8%E3%81%AF\" aria-label=\"シンボルファイルpdbファイルとは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>シンボルファイル（.pdbファイル）とは</h2>\n<p>拡張子<code class=\"language-text\">.pdb</code>を持つファイルは、シンボルファイルと呼ばれるファイルです。</p>\n<p>PDBは、「プログラムデータベース」の略称で、プロジェクトのソースコード内の識別子とステートメントをコンパイル済みアプリの対応する識別子と命令にマッピングしています。</p>\n<p>このシンボルファイルを利用することで、デバッガを用いてアプリケーションやプロセスの解析を行う際に、非常に効率的な解析を行うことができます。</p>\n<p>シンボルファイルがなくても、デバッガによる解析は可能です。</p>\n<p>しかし、適切なシンボルファイルが読み込まれている場合と読み込まれていない場合には、同じアドレスを指し示す場合にも、デバッガ上で次のような表示の差異が発生します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sample+0x110     <span class=\"token comment\"># シンボルファイルなし</span>\nsample<span class=\"token operator\">!</span>main+0x10 <span class=\"token comment\"># シンボルファイルあり</span></code></pre></div>\n<p>シンボルファイルを適切に読み込ませることで、被疑箇所をスムーズに特定したり、関数名から挙動を類推したりと、より効率的にデバッグを行うことができるようになります。</p>\n<p>参考：<a href=\"https://docs.microsoft.com/ja-jp/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2019\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">デバッガーでシンボル (.pdb) ファイルとソース ファイルを設定する | Microsoft Docs</a></p>\n<h2 id=\"linux環境でコンパイル時にシンボルファイルを生成する方法\" style=\"position:relative;\"><a href=\"#linux%E7%92%B0%E5%A2%83%E3%81%A7%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E6%99%82%E3%81%AB%E3%82%B7%E3%83%B3%E3%83%9C%E3%83%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\" aria-label=\"linux環境でコンパイル時にシンボルファイルを生成する方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux環境でコンパイル時にシンボルファイルを生成する方法</h2>\n<p>Windowsアプリケーションのデバッグ時に非常に重要なシンボルファイルですが、Microsoftコンパイラの場合はビルド時に自動的に作成されます。</p>\n<p>しかし、MinGWなどを用いてLinux環境でクロスコンパイルを行う場合は、シンボルファイルは通常生成されません。</p>\n<p>MinGWでクロスコンパイルしたEXEファイルのシンボルファイルを作成する方法については、以下のStackOverFlowのように、<code class=\"language-text\">cv2pdb</code>を用いた方法が案内されるケースもありますが、この方法ではLinux環境ではシンボルファイルの作成ができません。</p>\n<p>参考：<a href=\"https://stackoverflow.com/questions/19269350/how-to-generate-pdb-files-while-building-library-using-mingw/28627790\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">c++ - how to generate pdb files while building library using mingw? - Stack Overflow</a></p>\n<p>そこで今回は、<a href=\"https://github.com/mstorsjo/llvm-mingw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">llvm-mingw</a>を用いた方法を利用しました。</p>\n<p><a href=\"https://github.com/mstorsjo/llvm-mingw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">llvm-mingw</a>とは、<a href=\"https://llvm.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LLVM</a>/<a href=\"https://clang.llvm.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Clang</a>/<a href=\"https://lld.llvm.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LLD</a> をベースにした<code class=\"language-text\">mingw-w64</code>のツールチェーンです。</p>\n<p>参考：<a href=\"https://github.com/mstorsjo/llvm-mingw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mstorsjo/llvm-mingw: An LLVM/Clang/LLD based mingw-w64 toolchain</a></p>\n<p>LLVMとは、一言で言うとプラットフォームに依存せずに任意のプログラミング言語のコンパイルを行うことができる基盤です。</p>\n<p>また、ClangとLLDは、LLVM用のC言語とリンカです。</p>\n<p><a href=\"https://github.com/mstorsjo/llvm-mingw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">llvm-mingw</a>は、通常のMinGWがGNUベースのbinutilsをLLVMベースのbinutilsに置き換えたものです。</p>\n<p>これによって、様々なコンピュータアーキテクチャ（i686、x86_64、armv7、arm64）に対して単一のツールチェーンでのコンパイルを実現しています。\nまた、PDB形式でのシンボルファイルの生成もできるようになります。</p>\n<h2 id=\"llvm-mingwの環境を用意する\" style=\"position:relative;\"><a href=\"#llvm-mingw%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\" aria-label=\"llvm mingwの環境を用意する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>llvm-mingwの環境を用意する</h2>\n<p>LLVMベースのMinGWを利用できる環境を用意するために最も簡単な方法は、公式の用意している<a href=\"https://hub.docker.com/r/mstorsjo/llvm-mingw/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dockerイメージ</a>を使用することです。</p>\n<p>基本的には、このイメージをDockerhubからpullするだけで、簡単に利用できるようになります。</p>\n<p>もしDockerコンテナではなく、Linuxのホスト上にllvm-mingwの環境を構築する必要がある場合は、以下のDockerfile内のスクリプトを参考にするとよいです。</p>\n<p>参考：<a href=\"https://github.com/mstorsjo/llvm-mingw/blob/master/Dockerfile.cross\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">llvm-mingw/Dockerfile.cross at master · mstorsjo/llvm-mingw</a></p>\n<h2 id=\"llvm-mingwでpdbファイル付きでcファイルをコンパイルする\" style=\"position:relative;\"><a href=\"#llvm-mingw%E3%81%A7pdb%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BB%98%E3%81%8D%E3%81%A7c%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%99%E3%82%8B\" aria-label=\"llvm mingwでpdbファイル付きでcファイルをコンパイルする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>llvm-mingwでPDBファイル付きでC++ファイルをコンパイルする</h2>\n<p>llvm-mingwの使い方は以下の通りです。</p>\n<p>公式のDockerイメージの場合は、すでにLLVMベースのMinGWに対して、<code class=\"language-text\">x86_64-w64-mingw32-g++</code>としてパスが通っています。</p>\n<p>これを利用して、<code class=\"language-text\">-Wl,-pdb=&lt;filename>.pdb</code>というオプションを付けてコンパイルを実行することで、EXEファイルのコンパイルと同時にシンボルファイルも作成されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">x86_64-w64-mingw32-g++ -Wl,-pdb<span class=\"token operator\">=</span>sample.pdb sample.cpp -o sample.exe</code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>今回は、Linux環境でWindows向けのEXEファイルをクロスコンパイルする際に、デバッグ用のシンボルファイルを作成する方法についてまとめました。</p>","fields":{"slug":"/windows-windbg-006-symbol","tagSlugs":["/tag/win-dbg/","/tag/kernel/","/tag/reversing/"]},"frontmatter":{"date":"2021-10-18","description":"","tags":["WinDbg","Kernel","Reversing"],"title":"llvm-mingwを使ってLinux環境でもシンボルファイル（.pdb）を作成する方法","socialImage":{"publicURL":"/static/362a371d01282684c0ad5266d80a86e8/windows-windbg-006-symbol.png"}}}},"pageContext":{"slug":"/windows-windbg-006-symbol"}},"staticQueryHashes":["251939775","401334301","825871152"]}